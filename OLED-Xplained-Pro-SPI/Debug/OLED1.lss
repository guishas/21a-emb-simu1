
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000880c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040880c  0040880c  0001880c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  00408814  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000002fc  204009d0  004091e4  000209d0  2**2
                  ALLOC
  4 .stack        00002004  20400ccc  004094e0  000209d0  2**0
                  ALLOC
  5 .heap         00000200  20402cd0  0040b4e4  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   00016248  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002fac  00000000  00000000  00036c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005986  00000000  00000000  00039c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a90  00000000  00000000  0003f5d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a18  00000000  00000000  00040061  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00009c78  00000000  00000000  00040a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000ebbd  00000000  00000000  0004a6f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00090157  00000000  00000000  000592ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000360c  00000000  00000000  000e9408  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d0 2c 40 20 85 26 40 00 35 27 40 00 35 27 40 00     .,@ .&@.5'@.5'@.
  400010:	35 27 40 00 35 27 40 00 35 27 40 00 00 00 00 00     5'@.5'@.5'@.....
	...
  40002c:	35 27 40 00 35 27 40 00 00 00 00 00 35 27 40 00     5'@.5'@.....5'@.
  40003c:	35 27 40 00 35 27 40 00 35 27 40 00 35 27 40 00     5'@.5'@.5'@.5'@.
  40004c:	49 2c 40 00 35 27 40 00 35 27 40 00 35 27 40 00     I,@.5'@.5'@.5'@.
  40005c:	35 27 40 00 35 27 40 00 00 00 00 00 3d 22 40 00     5'@.5'@.....="@.
  40006c:	55 22 40 00 6d 22 40 00 35 27 40 00 35 27 40 00     U"@.m"@.5'@.5'@.
  40007c:	35 27 40 00 85 22 40 00 9d 22 40 00 35 27 40 00     5'@.."@.."@.5'@.
  40008c:	35 27 40 00 35 27 40 00 35 27 40 00 35 27 40 00     5'@.5'@.5'@.5'@.
  40009c:	35 27 40 00 35 27 40 00 35 27 40 00 35 27 40 00     5'@.5'@.5'@.5'@.
  4000ac:	35 27 40 00 35 27 40 00 35 27 40 00 35 27 40 00     5'@.5'@.5'@.5'@.
  4000bc:	35 27 40 00 35 27 40 00 35 27 40 00 35 27 40 00     5'@.5'@.5'@.5'@.
  4000cc:	35 27 40 00 00 00 00 00 35 27 40 00 00 00 00 00     5'@.....5'@.....
  4000dc:	35 27 40 00 35 27 40 00 35 27 40 00 35 27 40 00     5'@.5'@.5'@.5'@.
  4000ec:	35 27 40 00 35 27 40 00 35 27 40 00 35 27 40 00     5'@.5'@.5'@.5'@.
  4000fc:	35 27 40 00 35 27 40 00 35 27 40 00 35 27 40 00     5'@.5'@.5'@.5'@.
  40010c:	35 27 40 00 35 27 40 00 00 00 00 00 00 00 00 00     5'@.5'@.........
  40011c:	00 00 00 00 35 27 40 00 35 27 40 00 35 27 40 00     ....5'@.5'@.5'@.
  40012c:	35 27 40 00 35 27 40 00 00 00 00 00 35 27 40 00     5'@.5'@.....5'@.
  40013c:	35 27 40 00                                         5'@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	00408814 	.word	0x00408814

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00408814 	.word	0x00408814
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	00408814 	.word	0x00408814
  4001a8:	00000000 	.word	0x00000000

004001ac <rtt_init>:
 * \param us_prescaler Prescaler value for the RTT.
 *
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
  4001ac:	b480      	push	{r7}
  4001ae:	b083      	sub	sp, #12
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
  4001b4:	460b      	mov	r3, r1
  4001b6:	807b      	strh	r3, [r7, #2]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4001b8:	887a      	ldrh	r2, [r7, #2]
  4001ba:	4b07      	ldr	r3, [pc, #28]	; (4001d8 <rtt_init+0x2c>)
  4001bc:	681b      	ldr	r3, [r3, #0]
  4001be:	4313      	orrs	r3, r2
  4001c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
  4001c4:	687b      	ldr	r3, [r7, #4]
  4001c6:	601a      	str	r2, [r3, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
  4001c8:	2300      	movs	r3, #0
}
  4001ca:	4618      	mov	r0, r3
  4001cc:	370c      	adds	r7, #12
  4001ce:	46bd      	mov	sp, r7
  4001d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001d4:	4770      	bx	lr
  4001d6:	bf00      	nop
  4001d8:	204009ec 	.word	0x204009ec

004001dc <rtt_sel_source>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
  4001dc:	b480      	push	{r7}
  4001de:	b083      	sub	sp, #12
  4001e0:	af00      	add	r7, sp, #0
  4001e2:	6078      	str	r0, [r7, #4]
  4001e4:	460b      	mov	r3, r1
  4001e6:	70fb      	strb	r3, [r7, #3]
	if(is_rtc_sel) {
  4001e8:	78fb      	ldrb	r3, [r7, #3]
  4001ea:	2b00      	cmp	r3, #0
  4001ec:	d00d      	beq.n	40020a <rtt_sel_source+0x2e>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <rtt_sel_source+0x54>)
  4001f0:	681b      	ldr	r3, [r3, #0]
  4001f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4001f6:	4a0e      	ldr	r2, [pc, #56]	; (400230 <rtt_sel_source+0x54>)
  4001f8:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001fa:	687b      	ldr	r3, [r7, #4]
  4001fc:	681a      	ldr	r2, [r3, #0]
  4001fe:	4b0c      	ldr	r3, [pc, #48]	; (400230 <rtt_sel_source+0x54>)
  400200:	681b      	ldr	r3, [r3, #0]
  400202:	431a      	orrs	r2, r3
  400204:	687b      	ldr	r3, [r7, #4]
  400206:	601a      	str	r2, [r3, #0]
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	}
}
  400208:	e00c      	b.n	400224 <rtt_sel_source+0x48>
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  40020a:	4b09      	ldr	r3, [pc, #36]	; (400230 <rtt_sel_source+0x54>)
  40020c:	681b      	ldr	r3, [r3, #0]
  40020e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  400212:	4a07      	ldr	r2, [pc, #28]	; (400230 <rtt_sel_source+0x54>)
  400214:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400216:	687b      	ldr	r3, [r7, #4]
  400218:	681a      	ldr	r2, [r3, #0]
  40021a:	4b05      	ldr	r3, [pc, #20]	; (400230 <rtt_sel_source+0x54>)
  40021c:	681b      	ldr	r3, [r3, #0]
  40021e:	431a      	orrs	r2, r3
  400220:	687b      	ldr	r3, [r7, #4]
  400222:	601a      	str	r2, [r3, #0]
}
  400224:	bf00      	nop
  400226:	370c      	adds	r7, #12
  400228:	46bd      	mov	sp, r7
  40022a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40022e:	4770      	bx	lr
  400230:	204009ec 	.word	0x204009ec

00400234 <rtt_enable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
  400234:	b480      	push	{r7}
  400236:	b085      	sub	sp, #20
  400238:	af00      	add	r7, sp, #0
  40023a:	6078      	str	r0, [r7, #4]
  40023c:	6039      	str	r1, [r7, #0]
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  40023e:	687b      	ldr	r3, [r7, #4]
  400240:	681b      	ldr	r3, [r3, #0]
  400242:	60fb      	str	r3, [r7, #12]
	temp |= ul_sources;
  400244:	68fa      	ldr	r2, [r7, #12]
  400246:	683b      	ldr	r3, [r7, #0]
  400248:	4313      	orrs	r3, r2
  40024a:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40024c:	4b06      	ldr	r3, [pc, #24]	; (400268 <rtt_enable_interrupt+0x34>)
  40024e:	681b      	ldr	r3, [r3, #0]
  400250:	68fa      	ldr	r2, [r7, #12]
  400252:	4313      	orrs	r3, r2
  400254:	60fb      	str	r3, [r7, #12]
#endif
	p_rtt->RTT_MR = temp;
  400256:	687b      	ldr	r3, [r7, #4]
  400258:	68fa      	ldr	r2, [r7, #12]
  40025a:	601a      	str	r2, [r3, #0]
}
  40025c:	bf00      	nop
  40025e:	3714      	adds	r7, #20
  400260:	46bd      	mov	sp, r7
  400262:	f85d 7b04 	ldr.w	r7, [sp], #4
  400266:	4770      	bx	lr
  400268:	204009ec 	.word	0x204009ec

0040026c <rtt_disable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be disabled.
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
  40026c:	b480      	push	{r7}
  40026e:	b085      	sub	sp, #20
  400270:	af00      	add	r7, sp, #0
  400272:	6078      	str	r0, [r7, #4]
  400274:	6039      	str	r1, [r7, #0]
	uint32_t temp = 0;
  400276:	2300      	movs	r3, #0
  400278:	60fb      	str	r3, [r7, #12]

	temp = p_rtt->RTT_MR;
  40027a:	687b      	ldr	r3, [r7, #4]
  40027c:	681b      	ldr	r3, [r3, #0]
  40027e:	60fb      	str	r3, [r7, #12]
	temp &= (~ul_sources);
  400280:	683b      	ldr	r3, [r7, #0]
  400282:	43db      	mvns	r3, r3
  400284:	68fa      	ldr	r2, [r7, #12]
  400286:	4013      	ands	r3, r2
  400288:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40028a:	4b07      	ldr	r3, [pc, #28]	; (4002a8 <rtt_disable_interrupt+0x3c>)
  40028c:	681b      	ldr	r3, [r3, #0]
  40028e:	68fa      	ldr	r2, [r7, #12]
  400290:	4313      	orrs	r3, r2
  400292:	60fb      	str	r3, [r7, #12]
#endif
	p_rtt->RTT_MR = temp;
  400294:	687b      	ldr	r3, [r7, #4]
  400296:	68fa      	ldr	r2, [r7, #12]
  400298:	601a      	str	r2, [r3, #0]
}
  40029a:	bf00      	nop
  40029c:	3714      	adds	r7, #20
  40029e:	46bd      	mov	sp, r7
  4002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002a4:	4770      	bx	lr
  4002a6:	bf00      	nop
  4002a8:	204009ec 	.word	0x204009ec

004002ac <rtt_read_timer_value>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
  4002ac:	b480      	push	{r7}
  4002ae:	b085      	sub	sp, #20
  4002b0:	af00      	add	r7, sp, #0
  4002b2:	6078      	str	r0, [r7, #4]
	uint32_t rtt_val = p_rtt->RTT_VR;
  4002b4:	687b      	ldr	r3, [r7, #4]
  4002b6:	689b      	ldr	r3, [r3, #8]
  4002b8:	60fb      	str	r3, [r7, #12]

	while (rtt_val != p_rtt->RTT_VR) {
  4002ba:	e002      	b.n	4002c2 <rtt_read_timer_value+0x16>
		rtt_val = p_rtt->RTT_VR;
  4002bc:	687b      	ldr	r3, [r7, #4]
  4002be:	689b      	ldr	r3, [r3, #8]
  4002c0:	60fb      	str	r3, [r7, #12]
	while (rtt_val != p_rtt->RTT_VR) {
  4002c2:	687b      	ldr	r3, [r7, #4]
  4002c4:	689a      	ldr	r2, [r3, #8]
  4002c6:	68fb      	ldr	r3, [r7, #12]
  4002c8:	429a      	cmp	r2, r3
  4002ca:	d1f7      	bne.n	4002bc <rtt_read_timer_value+0x10>
	}

	return rtt_val;
  4002cc:	68fb      	ldr	r3, [r7, #12]
}
  4002ce:	4618      	mov	r0, r3
  4002d0:	3714      	adds	r7, #20
  4002d2:	46bd      	mov	sp, r7
  4002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002d8:	4770      	bx	lr

004002da <rtt_get_status>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
  4002da:	b480      	push	{r7}
  4002dc:	b083      	sub	sp, #12
  4002de:	af00      	add	r7, sp, #0
  4002e0:	6078      	str	r0, [r7, #4]
	return p_rtt->RTT_SR;
  4002e2:	687b      	ldr	r3, [r7, #4]
  4002e4:	68db      	ldr	r3, [r3, #12]
}
  4002e6:	4618      	mov	r0, r3
  4002e8:	370c      	adds	r7, #12
  4002ea:	46bd      	mov	sp, r7
  4002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002f0:	4770      	bx	lr
	...

004002f4 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  4002f4:	b580      	push	{r7, lr}
  4002f6:	b084      	sub	sp, #16
  4002f8:	af00      	add	r7, sp, #0
  4002fa:	6078      	str	r0, [r7, #4]
  4002fc:	6039      	str	r1, [r7, #0]
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  4002fe:	687b      	ldr	r3, [r7, #4]
  400300:	681b      	ldr	r3, [r3, #0]
  400302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  400306:	60fb      	str	r3, [r7, #12]

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400308:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40030c:	480d      	ldr	r0, [pc, #52]	; (400344 <rtt_write_alarm_time+0x50>)
  40030e:	4b0e      	ldr	r3, [pc, #56]	; (400348 <rtt_write_alarm_time+0x54>)
  400310:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  400312:	683b      	ldr	r3, [r7, #0]
  400314:	2b00      	cmp	r3, #0
  400316:	d104      	bne.n	400322 <rtt_write_alarm_time+0x2e>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400318:	687b      	ldr	r3, [r7, #4]
  40031a:	f04f 32ff 	mov.w	r2, #4294967295
  40031e:	605a      	str	r2, [r3, #4]
  400320:	e003      	b.n	40032a <rtt_write_alarm_time+0x36>
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400322:	683b      	ldr	r3, [r7, #0]
  400324:	1e5a      	subs	r2, r3, #1
  400326:	687b      	ldr	r3, [r7, #4]
  400328:	605a      	str	r2, [r3, #4]
	}

	if (flag) {
  40032a:	68fb      	ldr	r3, [r7, #12]
  40032c:	2b00      	cmp	r3, #0
  40032e:	d004      	beq.n	40033a <rtt_write_alarm_time+0x46>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400330:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400334:	4803      	ldr	r0, [pc, #12]	; (400344 <rtt_write_alarm_time+0x50>)
  400336:	4b05      	ldr	r3, [pc, #20]	; (40034c <rtt_write_alarm_time+0x58>)
  400338:	4798      	blx	r3
	}

	return 0;
  40033a:	2300      	movs	r3, #0
}
  40033c:	4618      	mov	r0, r3
  40033e:	3710      	adds	r7, #16
  400340:	46bd      	mov	sp, r7
  400342:	bd80      	pop	{r7, pc}
  400344:	400e1830 	.word	0x400e1830
  400348:	0040026d 	.word	0x0040026d
  40034c:	00400235 	.word	0x00400235

00400350 <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
  400350:	b480      	push	{r7}
  400352:	b083      	sub	sp, #12
  400354:	af00      	add	r7, sp, #0
  400356:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400358:	687b      	ldr	r3, [r7, #4]
  40035a:	685b      	ldr	r3, [r3, #4]
  40035c:	f003 0302 	and.w	r3, r3, #2
  400360:	2b00      	cmp	r3, #0
  400362:	d001      	beq.n	400368 <spi_get_peripheral_select_mode+0x18>
		return 1;
  400364:	2301      	movs	r3, #1
  400366:	e000      	b.n	40036a <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
  400368:	2300      	movs	r3, #0
	}
}
  40036a:	4618      	mov	r0, r3
  40036c:	370c      	adds	r7, #12
  40036e:	46bd      	mov	sp, r7
  400370:	f85d 7b04 	ldr.w	r7, [sp], #4
  400374:	4770      	bx	lr
	...

00400378 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400378:	b580      	push	{r7, lr}
  40037a:	b082      	sub	sp, #8
  40037c:	af00      	add	r7, sp, #0
  40037e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400380:	6878      	ldr	r0, [r7, #4]
  400382:	4b03      	ldr	r3, [pc, #12]	; (400390 <sysclk_enable_peripheral_clock+0x18>)
  400384:	4798      	blx	r3
}
  400386:	bf00      	nop
  400388:	3708      	adds	r7, #8
  40038a:	46bd      	mov	sp, r7
  40038c:	bd80      	pop	{r7, pc}
  40038e:	bf00      	nop
  400390:	00402579 	.word	0x00402579

00400394 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400394:	b580      	push	{r7, lr}
  400396:	b082      	sub	sp, #8
  400398:	af00      	add	r7, sp, #0
  40039a:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40039c:	687b      	ldr	r3, [r7, #4]
  40039e:	4a09      	ldr	r2, [pc, #36]	; (4003c4 <spi_enable_clock+0x30>)
  4003a0:	4293      	cmp	r3, r2
  4003a2:	d103      	bne.n	4003ac <spi_enable_clock+0x18>
		sysclk_enable_peripheral_clock(ID_SPI0);
  4003a4:	2015      	movs	r0, #21
  4003a6:	4b08      	ldr	r3, [pc, #32]	; (4003c8 <spi_enable_clock+0x34>)
  4003a8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4003aa:	e006      	b.n	4003ba <spi_enable_clock+0x26>
	else if (p_spi == SPI1) {
  4003ac:	687b      	ldr	r3, [r7, #4]
  4003ae:	4a07      	ldr	r2, [pc, #28]	; (4003cc <spi_enable_clock+0x38>)
  4003b0:	4293      	cmp	r3, r2
  4003b2:	d102      	bne.n	4003ba <spi_enable_clock+0x26>
		sysclk_enable_peripheral_clock(ID_SPI1);
  4003b4:	202a      	movs	r0, #42	; 0x2a
  4003b6:	4b04      	ldr	r3, [pc, #16]	; (4003c8 <spi_enable_clock+0x34>)
  4003b8:	4798      	blx	r3
}
  4003ba:	bf00      	nop
  4003bc:	3708      	adds	r7, #8
  4003be:	46bd      	mov	sp, r7
  4003c0:	bd80      	pop	{r7, pc}
  4003c2:	bf00      	nop
  4003c4:	40008000 	.word	0x40008000
  4003c8:	00400379 	.word	0x00400379
  4003cc:	40058000 	.word	0x40058000

004003d0 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  4003d0:	b480      	push	{r7}
  4003d2:	b083      	sub	sp, #12
  4003d4:	af00      	add	r7, sp, #0
  4003d6:	6078      	str	r0, [r7, #4]
  4003d8:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4003da:	687b      	ldr	r3, [r7, #4]
  4003dc:	685b      	ldr	r3, [r3, #4]
  4003de:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
  4003e2:	687b      	ldr	r3, [r7, #4]
  4003e4:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4003e6:	687b      	ldr	r3, [r7, #4]
  4003e8:	685a      	ldr	r2, [r3, #4]
  4003ea:	683b      	ldr	r3, [r7, #0]
  4003ec:	041b      	lsls	r3, r3, #16
  4003ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  4003f2:	431a      	orrs	r2, r3
  4003f4:	687b      	ldr	r3, [r7, #4]
  4003f6:	605a      	str	r2, [r3, #4]
}
  4003f8:	bf00      	nop
  4003fa:	370c      	adds	r7, #12
  4003fc:	46bd      	mov	sp, r7
  4003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400402:	4770      	bx	lr

00400404 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400404:	b580      	push	{r7, lr}
  400406:	b084      	sub	sp, #16
  400408:	af00      	add	r7, sp, #0
  40040a:	6078      	str	r0, [r7, #4]
  40040c:	4608      	mov	r0, r1
  40040e:	4611      	mov	r1, r2
  400410:	461a      	mov	r2, r3
  400412:	4603      	mov	r3, r0
  400414:	807b      	strh	r3, [r7, #2]
  400416:	460b      	mov	r3, r1
  400418:	707b      	strb	r3, [r7, #1]
  40041a:	4613      	mov	r3, r2
  40041c:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
  40041e:	f643 2398 	movw	r3, #15000	; 0x3a98
  400422:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400424:	e006      	b.n	400434 <spi_write+0x30>
		if (!timeout--) {
  400426:	68fb      	ldr	r3, [r7, #12]
  400428:	1e5a      	subs	r2, r3, #1
  40042a:	60fa      	str	r2, [r7, #12]
  40042c:	2b00      	cmp	r3, #0
  40042e:	d101      	bne.n	400434 <spi_write+0x30>
			return SPI_ERROR_TIMEOUT;
  400430:	2301      	movs	r3, #1
  400432:	e020      	b.n	400476 <spi_write+0x72>
	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400434:	687b      	ldr	r3, [r7, #4]
  400436:	691b      	ldr	r3, [r3, #16]
  400438:	f003 0302 	and.w	r3, r3, #2
  40043c:	2b00      	cmp	r3, #0
  40043e:	d0f2      	beq.n	400426 <spi_write+0x22>
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400440:	6878      	ldr	r0, [r7, #4]
  400442:	4b0f      	ldr	r3, [pc, #60]	; (400480 <spi_write+0x7c>)
  400444:	4798      	blx	r3
  400446:	4603      	mov	r3, r0
  400448:	2b00      	cmp	r3, #0
  40044a:	d00e      	beq.n	40046a <spi_write+0x66>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40044c:	887a      	ldrh	r2, [r7, #2]
  40044e:	787b      	ldrb	r3, [r7, #1]
  400450:	041b      	lsls	r3, r3, #16
  400452:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  400456:	4313      	orrs	r3, r2
  400458:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
  40045a:	783b      	ldrb	r3, [r7, #0]
  40045c:	2b00      	cmp	r3, #0
  40045e:	d006      	beq.n	40046e <spi_write+0x6a>
			value |= SPI_TDR_LASTXFER;
  400460:	68bb      	ldr	r3, [r7, #8]
  400462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400466:	60bb      	str	r3, [r7, #8]
  400468:	e001      	b.n	40046e <spi_write+0x6a>
		}
	} else {
		value = SPI_TDR_TD(us_data);
  40046a:	887b      	ldrh	r3, [r7, #2]
  40046c:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
  40046e:	687b      	ldr	r3, [r7, #4]
  400470:	68ba      	ldr	r2, [r7, #8]
  400472:	60da      	str	r2, [r3, #12]

	return SPI_OK;
  400474:	2300      	movs	r3, #0
}
  400476:	4618      	mov	r0, r3
  400478:	3710      	adds	r7, #16
  40047a:	46bd      	mov	sp, r7
  40047c:	bd80      	pop	{r7, pc}
  40047e:	bf00      	nop
  400480:	00400351 	.word	0x00400351

00400484 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
  400484:	b480      	push	{r7}
  400486:	b085      	sub	sp, #20
  400488:	af00      	add	r7, sp, #0
  40048a:	60f8      	str	r0, [r7, #12]
  40048c:	60b9      	str	r1, [r7, #8]
  40048e:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
  400490:	687b      	ldr	r3, [r7, #4]
  400492:	2b00      	cmp	r3, #0
  400494:	d00c      	beq.n	4004b0 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400496:	68fb      	ldr	r3, [r7, #12]
  400498:	68ba      	ldr	r2, [r7, #8]
  40049a:	320c      	adds	r2, #12
  40049c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4004a0:	f043 0101 	orr.w	r1, r3, #1
  4004a4:	68fb      	ldr	r3, [r7, #12]
  4004a6:	68ba      	ldr	r2, [r7, #8]
  4004a8:	320c      	adds	r2, #12
  4004aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
  4004ae:	e00b      	b.n	4004c8 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4004b0:	68fb      	ldr	r3, [r7, #12]
  4004b2:	68ba      	ldr	r2, [r7, #8]
  4004b4:	320c      	adds	r2, #12
  4004b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4004ba:	f023 0101 	bic.w	r1, r3, #1
  4004be:	68fb      	ldr	r3, [r7, #12]
  4004c0:	68ba      	ldr	r2, [r7, #8]
  4004c2:	320c      	adds	r2, #12
  4004c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4004c8:	bf00      	nop
  4004ca:	3714      	adds	r7, #20
  4004cc:	46bd      	mov	sp, r7
  4004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004d2:	4770      	bx	lr

004004d4 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
  4004d4:	b480      	push	{r7}
  4004d6:	b085      	sub	sp, #20
  4004d8:	af00      	add	r7, sp, #0
  4004da:	60f8      	str	r0, [r7, #12]
  4004dc:	60b9      	str	r1, [r7, #8]
  4004de:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
  4004e0:	687b      	ldr	r3, [r7, #4]
  4004e2:	2b00      	cmp	r3, #0
  4004e4:	d00c      	beq.n	400500 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4004e6:	68fb      	ldr	r3, [r7, #12]
  4004e8:	68ba      	ldr	r2, [r7, #8]
  4004ea:	320c      	adds	r2, #12
  4004ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4004f0:	f043 0102 	orr.w	r1, r3, #2
  4004f4:	68fb      	ldr	r3, [r7, #12]
  4004f6:	68ba      	ldr	r2, [r7, #8]
  4004f8:	320c      	adds	r2, #12
  4004fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
  4004fe:	e00b      	b.n	400518 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400500:	68fb      	ldr	r3, [r7, #12]
  400502:	68ba      	ldr	r2, [r7, #8]
  400504:	320c      	adds	r2, #12
  400506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40050a:	f023 0102 	bic.w	r1, r3, #2
  40050e:	68fb      	ldr	r3, [r7, #12]
  400510:	68ba      	ldr	r2, [r7, #8]
  400512:	320c      	adds	r2, #12
  400514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400518:	bf00      	nop
  40051a:	3714      	adds	r7, #20
  40051c:	46bd      	mov	sp, r7
  40051e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400522:	4770      	bx	lr

00400524 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
  400524:	b480      	push	{r7}
  400526:	b085      	sub	sp, #20
  400528:	af00      	add	r7, sp, #0
  40052a:	60f8      	str	r0, [r7, #12]
  40052c:	60b9      	str	r1, [r7, #8]
  40052e:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400530:	687b      	ldr	r3, [r7, #4]
  400532:	2b04      	cmp	r3, #4
  400534:	d118      	bne.n	400568 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400536:	68fb      	ldr	r3, [r7, #12]
  400538:	68ba      	ldr	r2, [r7, #8]
  40053a:	320c      	adds	r2, #12
  40053c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400540:	f023 0108 	bic.w	r1, r3, #8
  400544:	68fb      	ldr	r3, [r7, #12]
  400546:	68ba      	ldr	r2, [r7, #8]
  400548:	320c      	adds	r2, #12
  40054a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40054e:	68fb      	ldr	r3, [r7, #12]
  400550:	68ba      	ldr	r2, [r7, #8]
  400552:	320c      	adds	r2, #12
  400554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400558:	f043 0104 	orr.w	r1, r3, #4
  40055c:	68fb      	ldr	r3, [r7, #12]
  40055e:	68ba      	ldr	r2, [r7, #8]
  400560:	320c      	adds	r2, #12
  400562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
	}
}
  400566:	e02a      	b.n	4005be <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400568:	687b      	ldr	r3, [r7, #4]
  40056a:	2b00      	cmp	r3, #0
  40056c:	d118      	bne.n	4005a0 <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40056e:	68fb      	ldr	r3, [r7, #12]
  400570:	68ba      	ldr	r2, [r7, #8]
  400572:	320c      	adds	r2, #12
  400574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400578:	f023 0108 	bic.w	r1, r3, #8
  40057c:	68fb      	ldr	r3, [r7, #12]
  40057e:	68ba      	ldr	r2, [r7, #8]
  400580:	320c      	adds	r2, #12
  400582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400586:	68fb      	ldr	r3, [r7, #12]
  400588:	68ba      	ldr	r2, [r7, #8]
  40058a:	320c      	adds	r2, #12
  40058c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400590:	f023 0104 	bic.w	r1, r3, #4
  400594:	68fb      	ldr	r3, [r7, #12]
  400596:	68ba      	ldr	r2, [r7, #8]
  400598:	320c      	adds	r2, #12
  40059a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40059e:	e00e      	b.n	4005be <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4005a0:	687b      	ldr	r3, [r7, #4]
  4005a2:	2b08      	cmp	r3, #8
  4005a4:	d10b      	bne.n	4005be <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4005a6:	68fb      	ldr	r3, [r7, #12]
  4005a8:	68ba      	ldr	r2, [r7, #8]
  4005aa:	320c      	adds	r2, #12
  4005ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4005b0:	f043 0108 	orr.w	r1, r3, #8
  4005b4:	68fb      	ldr	r3, [r7, #12]
  4005b6:	68ba      	ldr	r2, [r7, #8]
  4005b8:	320c      	adds	r2, #12
  4005ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4005be:	bf00      	nop
  4005c0:	3714      	adds	r7, #20
  4005c2:	46bd      	mov	sp, r7
  4005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005c8:	4770      	bx	lr

004005ca <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4005ca:	b480      	push	{r7}
  4005cc:	b085      	sub	sp, #20
  4005ce:	af00      	add	r7, sp, #0
  4005d0:	60f8      	str	r0, [r7, #12]
  4005d2:	60b9      	str	r1, [r7, #8]
  4005d4:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4005d6:	68fb      	ldr	r3, [r7, #12]
  4005d8:	68ba      	ldr	r2, [r7, #8]
  4005da:	320c      	adds	r2, #12
  4005dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4005e0:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
  4005e4:	68fb      	ldr	r3, [r7, #12]
  4005e6:	68ba      	ldr	r2, [r7, #8]
  4005e8:	320c      	adds	r2, #12
  4005ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4005ee:	68fb      	ldr	r3, [r7, #12]
  4005f0:	68ba      	ldr	r2, [r7, #8]
  4005f2:	320c      	adds	r2, #12
  4005f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  4005f8:	687b      	ldr	r3, [r7, #4]
  4005fa:	ea42 0103 	orr.w	r1, r2, r3
  4005fe:	68fb      	ldr	r3, [r7, #12]
  400600:	68ba      	ldr	r2, [r7, #8]
  400602:	320c      	adds	r2, #12
  400604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400608:	bf00      	nop
  40060a:	3714      	adds	r7, #20
  40060c:	46bd      	mov	sp, r7
  40060e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400612:	4770      	bx	lr

00400614 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
  400614:	b480      	push	{r7}
  400616:	b085      	sub	sp, #20
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
  40061c:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
  40061e:	683a      	ldr	r2, [r7, #0]
  400620:	687b      	ldr	r3, [r7, #4]
  400622:	4413      	add	r3, r2
  400624:	1e5a      	subs	r2, r3, #1
  400626:	687b      	ldr	r3, [r7, #4]
  400628:	fbb2 f3f3 	udiv	r3, r2, r3
  40062c:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40062e:	68fb      	ldr	r3, [r7, #12]
  400630:	2b00      	cmp	r3, #0
  400632:	dd02      	ble.n	40063a <spi_calc_baudrate_div+0x26>
  400634:	68fb      	ldr	r3, [r7, #12]
  400636:	2bff      	cmp	r3, #255	; 0xff
  400638:	dd02      	ble.n	400640 <spi_calc_baudrate_div+0x2c>
		return -1;
  40063a:	f04f 33ff 	mov.w	r3, #4294967295
  40063e:	e001      	b.n	400644 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
  400640:	68fb      	ldr	r3, [r7, #12]
  400642:	b21b      	sxth	r3, r3
}
  400644:	4618      	mov	r0, r3
  400646:	3714      	adds	r7, #20
  400648:	46bd      	mov	sp, r7
  40064a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40064e:	4770      	bx	lr

00400650 <spi_set_baudrate_div>:
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  400650:	b480      	push	{r7}
  400652:	b085      	sub	sp, #20
  400654:	af00      	add	r7, sp, #0
  400656:	60f8      	str	r0, [r7, #12]
  400658:	60b9      	str	r1, [r7, #8]
  40065a:	4613      	mov	r3, r2
  40065c:	71fb      	strb	r3, [r7, #7]
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  40065e:	79fb      	ldrb	r3, [r7, #7]
  400660:	2b00      	cmp	r3, #0
  400662:	d102      	bne.n	40066a <spi_set_baudrate_div+0x1a>
        return -1;
  400664:	f04f 33ff 	mov.w	r3, #4294967295
  400668:	e01b      	b.n	4006a2 <spi_set_baudrate_div+0x52>

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40066a:	68fb      	ldr	r3, [r7, #12]
  40066c:	68ba      	ldr	r2, [r7, #8]
  40066e:	320c      	adds	r2, #12
  400670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400674:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
  400678:	68fb      	ldr	r3, [r7, #12]
  40067a:	68ba      	ldr	r2, [r7, #8]
  40067c:	320c      	adds	r2, #12
  40067e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	68ba      	ldr	r2, [r7, #8]
  400686:	320c      	adds	r2, #12
  400688:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  40068c:	79fb      	ldrb	r3, [r7, #7]
  40068e:	021b      	lsls	r3, r3, #8
  400690:	b29b      	uxth	r3, r3
  400692:	ea42 0103 	orr.w	r1, r2, r3
  400696:	68fb      	ldr	r3, [r7, #12]
  400698:	68ba      	ldr	r2, [r7, #8]
  40069a:	320c      	adds	r2, #12
  40069c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return 0;
  4006a0:	2300      	movs	r3, #0
}
  4006a2:	4618      	mov	r0, r3
  4006a4:	3714      	adds	r7, #20
  4006a6:	46bd      	mov	sp, r7
  4006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006ac:	4770      	bx	lr
	...

004006b0 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
  4006b0:	b480      	push	{r7}
  4006b2:	b083      	sub	sp, #12
  4006b4:	af00      	add	r7, sp, #0
  4006b6:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
  4006b8:	4a04      	ldr	r2, [pc, #16]	; (4006cc <gfx_mono_set_framebuffer+0x1c>)
  4006ba:	687b      	ldr	r3, [r7, #4]
  4006bc:	6013      	str	r3, [r2, #0]
}
  4006be:	bf00      	nop
  4006c0:	370c      	adds	r7, #12
  4006c2:	46bd      	mov	sp, r7
  4006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006c8:	4770      	bx	lr
  4006ca:	bf00      	nop
  4006cc:	204009f0 	.word	0x204009f0

004006d0 <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
  4006d0:	b480      	push	{r7}
  4006d2:	b083      	sub	sp, #12
  4006d4:	af00      	add	r7, sp, #0
  4006d6:	4603      	mov	r3, r0
  4006d8:	71fb      	strb	r3, [r7, #7]
  4006da:	460b      	mov	r3, r1
  4006dc:	71bb      	strb	r3, [r7, #6]
  4006de:	4613      	mov	r3, r2
  4006e0:	717b      	strb	r3, [r7, #5]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  4006e2:	4b08      	ldr	r3, [pc, #32]	; (400704 <gfx_mono_framebuffer_put_byte+0x34>)
  4006e4:	681a      	ldr	r2, [r3, #0]
  4006e6:	79fb      	ldrb	r3, [r7, #7]
  4006e8:	01db      	lsls	r3, r3, #7
  4006ea:	4619      	mov	r1, r3
  4006ec:	79bb      	ldrb	r3, [r7, #6]
  4006ee:	440b      	add	r3, r1
  4006f0:	4413      	add	r3, r2
  4006f2:	797a      	ldrb	r2, [r7, #5]
  4006f4:	701a      	strb	r2, [r3, #0]
}
  4006f6:	bf00      	nop
  4006f8:	370c      	adds	r7, #12
  4006fa:	46bd      	mov	sp, r7
  4006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400700:	4770      	bx	lr
  400702:	bf00      	nop
  400704:	204009f0 	.word	0x204009f0

00400708 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
  400708:	b480      	push	{r7}
  40070a:	b083      	sub	sp, #12
  40070c:	af00      	add	r7, sp, #0
  40070e:	4603      	mov	r3, r0
  400710:	460a      	mov	r2, r1
  400712:	71fb      	strb	r3, [r7, #7]
  400714:	4613      	mov	r3, r2
  400716:	71bb      	strb	r3, [r7, #6]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400718:	4b07      	ldr	r3, [pc, #28]	; (400738 <gfx_mono_framebuffer_get_byte+0x30>)
  40071a:	681a      	ldr	r2, [r3, #0]
  40071c:	79fb      	ldrb	r3, [r7, #7]
  40071e:	01db      	lsls	r3, r3, #7
  400720:	4619      	mov	r1, r3
  400722:	79bb      	ldrb	r3, [r7, #6]
  400724:	440b      	add	r3, r1
  400726:	4413      	add	r3, r2
  400728:	781b      	ldrb	r3, [r3, #0]
}
  40072a:	4618      	mov	r0, r3
  40072c:	370c      	adds	r7, #12
  40072e:	46bd      	mov	sp, r7
  400730:	f85d 7b04 	ldr.w	r7, [sp], #4
  400734:	4770      	bx	lr
  400736:	bf00      	nop
  400738:	204009f0 	.word	0x204009f0

0040073c <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  40073c:	b590      	push	{r4, r7, lr}
  40073e:	b085      	sub	sp, #20
  400740:	af00      	add	r7, sp, #0
  400742:	4604      	mov	r4, r0
  400744:	4608      	mov	r0, r1
  400746:	4611      	mov	r1, r2
  400748:	461a      	mov	r2, r3
  40074a:	4623      	mov	r3, r4
  40074c:	71fb      	strb	r3, [r7, #7]
  40074e:	4603      	mov	r3, r0
  400750:	71bb      	strb	r3, [r7, #6]
  400752:	460b      	mov	r3, r1
  400754:	717b      	strb	r3, [r7, #5]
  400756:	4613      	mov	r3, r2
  400758:	713b      	strb	r3, [r7, #4]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  40075a:	79fa      	ldrb	r2, [r7, #7]
  40075c:	797b      	ldrb	r3, [r7, #5]
  40075e:	4413      	add	r3, r2
  400760:	2b80      	cmp	r3, #128	; 0x80
  400762:	dd06      	ble.n	400772 <gfx_mono_generic_draw_horizontal_line+0x36>
		length = GFX_MONO_LCD_WIDTH - x;
  400764:	79fb      	ldrb	r3, [r7, #7]
  400766:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
  40076a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
  40076e:	3380      	adds	r3, #128	; 0x80
  400770:	717b      	strb	r3, [r7, #5]
	}

	page = y / 8;
  400772:	79bb      	ldrb	r3, [r7, #6]
  400774:	08db      	lsrs	r3, r3, #3
  400776:	73fb      	strb	r3, [r7, #15]
	pixelmask = (1 << (y - (page * 8)));
  400778:	79ba      	ldrb	r2, [r7, #6]
  40077a:	7bfb      	ldrb	r3, [r7, #15]
  40077c:	00db      	lsls	r3, r3, #3
  40077e:	1ad3      	subs	r3, r2, r3
  400780:	2201      	movs	r2, #1
  400782:	fa02 f303 	lsl.w	r3, r2, r3
  400786:	73bb      	strb	r3, [r7, #14]

	if (length == 0) {
  400788:	797b      	ldrb	r3, [r7, #5]
  40078a:	2b00      	cmp	r3, #0
  40078c:	d066      	beq.n	40085c <gfx_mono_generic_draw_horizontal_line+0x120>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  40078e:	793b      	ldrb	r3, [r7, #4]
  400790:	2b01      	cmp	r3, #1
  400792:	d01c      	beq.n	4007ce <gfx_mono_generic_draw_horizontal_line+0x92>
  400794:	2b02      	cmp	r3, #2
  400796:	d05b      	beq.n	400850 <gfx_mono_generic_draw_horizontal_line+0x114>
  400798:	2b00      	cmp	r3, #0
  40079a:	d03b      	beq.n	400814 <gfx_mono_generic_draw_horizontal_line+0xd8>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
  40079c:	e05f      	b.n	40085e <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  40079e:	79fa      	ldrb	r2, [r7, #7]
  4007a0:	797b      	ldrb	r3, [r7, #5]
  4007a2:	4413      	add	r3, r2
  4007a4:	b2da      	uxtb	r2, r3
  4007a6:	7bfb      	ldrb	r3, [r7, #15]
  4007a8:	4611      	mov	r1, r2
  4007aa:	4618      	mov	r0, r3
  4007ac:	4b2d      	ldr	r3, [pc, #180]	; (400864 <gfx_mono_generic_draw_horizontal_line+0x128>)
  4007ae:	4798      	blx	r3
  4007b0:	4603      	mov	r3, r0
  4007b2:	737b      	strb	r3, [r7, #13]
			temp |= pixelmask;
  4007b4:	7b7a      	ldrb	r2, [r7, #13]
  4007b6:	7bbb      	ldrb	r3, [r7, #14]
  4007b8:	4313      	orrs	r3, r2
  4007ba:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  4007bc:	79fa      	ldrb	r2, [r7, #7]
  4007be:	797b      	ldrb	r3, [r7, #5]
  4007c0:	4413      	add	r3, r2
  4007c2:	b2d9      	uxtb	r1, r3
  4007c4:	7b7a      	ldrb	r2, [r7, #13]
  4007c6:	7bf8      	ldrb	r0, [r7, #15]
  4007c8:	2300      	movs	r3, #0
  4007ca:	4c27      	ldr	r4, [pc, #156]	; (400868 <gfx_mono_generic_draw_horizontal_line+0x12c>)
  4007cc:	47a0      	blx	r4
		while (length-- > 0) {
  4007ce:	797b      	ldrb	r3, [r7, #5]
  4007d0:	1e5a      	subs	r2, r3, #1
  4007d2:	717a      	strb	r2, [r7, #5]
  4007d4:	2b00      	cmp	r3, #0
  4007d6:	d1e2      	bne.n	40079e <gfx_mono_generic_draw_horizontal_line+0x62>
		break;
  4007d8:	e041      	b.n	40085e <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  4007da:	79fa      	ldrb	r2, [r7, #7]
  4007dc:	797b      	ldrb	r3, [r7, #5]
  4007de:	4413      	add	r3, r2
  4007e0:	b2da      	uxtb	r2, r3
  4007e2:	7bfb      	ldrb	r3, [r7, #15]
  4007e4:	4611      	mov	r1, r2
  4007e6:	4618      	mov	r0, r3
  4007e8:	4b1e      	ldr	r3, [pc, #120]	; (400864 <gfx_mono_generic_draw_horizontal_line+0x128>)
  4007ea:	4798      	blx	r3
  4007ec:	4603      	mov	r3, r0
  4007ee:	737b      	strb	r3, [r7, #13]
			temp &= ~pixelmask;
  4007f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
  4007f4:	43db      	mvns	r3, r3
  4007f6:	b25a      	sxtb	r2, r3
  4007f8:	f997 300d 	ldrsb.w	r3, [r7, #13]
  4007fc:	4013      	ands	r3, r2
  4007fe:	b25b      	sxtb	r3, r3
  400800:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  400802:	79fa      	ldrb	r2, [r7, #7]
  400804:	797b      	ldrb	r3, [r7, #5]
  400806:	4413      	add	r3, r2
  400808:	b2d9      	uxtb	r1, r3
  40080a:	7b7a      	ldrb	r2, [r7, #13]
  40080c:	7bf8      	ldrb	r0, [r7, #15]
  40080e:	2300      	movs	r3, #0
  400810:	4c15      	ldr	r4, [pc, #84]	; (400868 <gfx_mono_generic_draw_horizontal_line+0x12c>)
  400812:	47a0      	blx	r4
		while (length-- > 0) {
  400814:	797b      	ldrb	r3, [r7, #5]
  400816:	1e5a      	subs	r2, r3, #1
  400818:	717a      	strb	r2, [r7, #5]
  40081a:	2b00      	cmp	r3, #0
  40081c:	d1dd      	bne.n	4007da <gfx_mono_generic_draw_horizontal_line+0x9e>
		break;
  40081e:	e01e      	b.n	40085e <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  400820:	79fa      	ldrb	r2, [r7, #7]
  400822:	797b      	ldrb	r3, [r7, #5]
  400824:	4413      	add	r3, r2
  400826:	b2da      	uxtb	r2, r3
  400828:	7bfb      	ldrb	r3, [r7, #15]
  40082a:	4611      	mov	r1, r2
  40082c:	4618      	mov	r0, r3
  40082e:	4b0d      	ldr	r3, [pc, #52]	; (400864 <gfx_mono_generic_draw_horizontal_line+0x128>)
  400830:	4798      	blx	r3
  400832:	4603      	mov	r3, r0
  400834:	737b      	strb	r3, [r7, #13]
			temp ^= pixelmask;
  400836:	7b7a      	ldrb	r2, [r7, #13]
  400838:	7bbb      	ldrb	r3, [r7, #14]
  40083a:	4053      	eors	r3, r2
  40083c:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  40083e:	79fa      	ldrb	r2, [r7, #7]
  400840:	797b      	ldrb	r3, [r7, #5]
  400842:	4413      	add	r3, r2
  400844:	b2d9      	uxtb	r1, r3
  400846:	7b7a      	ldrb	r2, [r7, #13]
  400848:	7bf8      	ldrb	r0, [r7, #15]
  40084a:	2300      	movs	r3, #0
  40084c:	4c06      	ldr	r4, [pc, #24]	; (400868 <gfx_mono_generic_draw_horizontal_line+0x12c>)
  40084e:	47a0      	blx	r4
		while (length-- > 0) {
  400850:	797b      	ldrb	r3, [r7, #5]
  400852:	1e5a      	subs	r2, r3, #1
  400854:	717a      	strb	r2, [r7, #5]
  400856:	2b00      	cmp	r3, #0
  400858:	d1e2      	bne.n	400820 <gfx_mono_generic_draw_horizontal_line+0xe4>
		break;
  40085a:	e000      	b.n	40085e <gfx_mono_generic_draw_horizontal_line+0x122>
		return;
  40085c:	bf00      	nop
	}
}
  40085e:	3714      	adds	r7, #20
  400860:	46bd      	mov	sp, r7
  400862:	bd90      	pop	{r4, r7, pc}
  400864:	00400c79 	.word	0x00400c79
  400868:	00400bf5 	.word	0x00400bf5

0040086c <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  40086c:	b590      	push	{r4, r7, lr}
  40086e:	b083      	sub	sp, #12
  400870:	af00      	add	r7, sp, #0
  400872:	4604      	mov	r4, r0
  400874:	4608      	mov	r0, r1
  400876:	4611      	mov	r1, r2
  400878:	461a      	mov	r2, r3
  40087a:	4623      	mov	r3, r4
  40087c:	71fb      	strb	r3, [r7, #7]
  40087e:	4603      	mov	r3, r0
  400880:	71bb      	strb	r3, [r7, #6]
  400882:	460b      	mov	r3, r1
  400884:	717b      	strb	r3, [r7, #5]
  400886:	4613      	mov	r3, r2
  400888:	713b      	strb	r3, [r7, #4]
	if (height == 0) {
  40088a:	793b      	ldrb	r3, [r7, #4]
  40088c:	2b00      	cmp	r3, #0
  40088e:	d00f      	beq.n	4008b0 <gfx_mono_generic_draw_filled_rect+0x44>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
  400890:	e008      	b.n	4008a4 <gfx_mono_generic_draw_filled_rect+0x38>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  400892:	79ba      	ldrb	r2, [r7, #6]
  400894:	793b      	ldrb	r3, [r7, #4]
  400896:	4413      	add	r3, r2
  400898:	b2d9      	uxtb	r1, r3
  40089a:	7e3b      	ldrb	r3, [r7, #24]
  40089c:	797a      	ldrb	r2, [r7, #5]
  40089e:	79f8      	ldrb	r0, [r7, #7]
  4008a0:	4c05      	ldr	r4, [pc, #20]	; (4008b8 <gfx_mono_generic_draw_filled_rect+0x4c>)
  4008a2:	47a0      	blx	r4
	while (height-- > 0) {
  4008a4:	793b      	ldrb	r3, [r7, #4]
  4008a6:	1e5a      	subs	r2, r3, #1
  4008a8:	713a      	strb	r2, [r7, #4]
  4008aa:	2b00      	cmp	r3, #0
  4008ac:	d1f1      	bne.n	400892 <gfx_mono_generic_draw_filled_rect+0x26>
  4008ae:	e000      	b.n	4008b2 <gfx_mono_generic_draw_filled_rect+0x46>
		return;
  4008b0:	bf00      	nop
	}
}
  4008b2:	370c      	adds	r7, #12
  4008b4:	46bd      	mov	sp, r7
  4008b6:	bd90      	pop	{r4, r7, pc}
  4008b8:	0040073d 	.word	0x0040073d

004008bc <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
  4008bc:	b580      	push	{r7, lr}
  4008be:	b086      	sub	sp, #24
  4008c0:	af00      	add	r7, sp, #0
  4008c2:	603b      	str	r3, [r7, #0]
  4008c4:	4603      	mov	r3, r0
  4008c6:	71fb      	strb	r3, [r7, #7]
  4008c8:	460b      	mov	r3, r1
  4008ca:	71bb      	strb	r3, [r7, #6]
  4008cc:	4613      	mov	r3, r2
  4008ce:	717b      	strb	r3, [r7, #5]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
  4008d0:	79bb      	ldrb	r3, [r7, #6]
  4008d2:	743b      	strb	r3, [r7, #16]
	gfx_coord_t inc_y = y;
  4008d4:	797b      	ldrb	r3, [r7, #5]
  4008d6:	73fb      	strb	r3, [r7, #15]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  4008d8:	683b      	ldr	r3, [r7, #0]
  4008da:	7a1b      	ldrb	r3, [r3, #8]
  4008dc:	08db      	lsrs	r3, r3, #3
  4008de:	74fb      	strb	r3, [r7, #19]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  4008e0:	683b      	ldr	r3, [r7, #0]
  4008e2:	7a1b      	ldrb	r3, [r3, #8]
  4008e4:	f003 0307 	and.w	r3, r3, #7
  4008e8:	b2db      	uxtb	r3, r3
  4008ea:	2b00      	cmp	r3, #0
  4008ec:	d002      	beq.n	4008f4 <gfx_mono_draw_char_progmem+0x38>
		char_row_size++;
  4008ee:	7cfb      	ldrb	r3, [r7, #19]
  4008f0:	3301      	adds	r3, #1
  4008f2:	74fb      	strb	r3, [r7, #19]
	}

	glyph_data_offset = char_row_size * font->height *
  4008f4:	7cfb      	ldrb	r3, [r7, #19]
  4008f6:	b29a      	uxth	r2, r3
  4008f8:	683b      	ldr	r3, [r7, #0]
  4008fa:	7a5b      	ldrb	r3, [r3, #9]
  4008fc:	b29b      	uxth	r3, r3
  4008fe:	fb12 f303 	smulbb	r3, r2, r3
  400902:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
  400904:	79fb      	ldrb	r3, [r7, #7]
  400906:	6839      	ldr	r1, [r7, #0]
  400908:	7a89      	ldrb	r1, [r1, #10]
  40090a:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
  40090c:	b29b      	uxth	r3, r3
  40090e:	fb12 f303 	smulbb	r3, r2, r3
  400912:	81bb      	strh	r3, [r7, #12]
	glyph_data = font->data.progmem + glyph_data_offset;
  400914:	683b      	ldr	r3, [r7, #0]
  400916:	685a      	ldr	r2, [r3, #4]
  400918:	89bb      	ldrh	r3, [r7, #12]
  40091a:	4413      	add	r3, r2
  40091c:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
  40091e:	683b      	ldr	r3, [r7, #0]
  400920:	7a5b      	ldrb	r3, [r3, #9]
  400922:	74bb      	strb	r3, [r7, #18]

	do {
		uint8_t glyph_byte = 0;
  400924:	2300      	movs	r3, #0
  400926:	73bb      	strb	r3, [r7, #14]
		uint8_t pixelsToDraw = font->width;
  400928:	683b      	ldr	r3, [r7, #0]
  40092a:	7a1b      	ldrb	r3, [r3, #8]
  40092c:	72fb      	strb	r3, [r7, #11]

		for (i = 0; i < pixelsToDraw; i++) {
  40092e:	2300      	movs	r3, #0
  400930:	747b      	strb	r3, [r7, #17]
  400932:	e01e      	b.n	400972 <gfx_mono_draw_char_progmem+0xb6>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400934:	7c7b      	ldrb	r3, [r7, #17]
  400936:	f003 0307 	and.w	r3, r3, #7
  40093a:	b2db      	uxtb	r3, r3
  40093c:	2b00      	cmp	r3, #0
  40093e:	d105      	bne.n	40094c <gfx_mono_draw_char_progmem+0x90>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400940:	697b      	ldr	r3, [r7, #20]
  400942:	781b      	ldrb	r3, [r3, #0]
  400944:	73bb      	strb	r3, [r7, #14]
				glyph_data++;
  400946:	697b      	ldr	r3, [r7, #20]
  400948:	3301      	adds	r3, #1
  40094a:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
  40094c:	f997 300e 	ldrsb.w	r3, [r7, #14]
  400950:	2b00      	cmp	r3, #0
  400952:	da05      	bge.n	400960 <gfx_mono_draw_char_progmem+0xa4>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400954:	7bf9      	ldrb	r1, [r7, #15]
  400956:	7c3b      	ldrb	r3, [r7, #16]
  400958:	2201      	movs	r2, #1
  40095a:	4618      	mov	r0, r3
  40095c:	4b0e      	ldr	r3, [pc, #56]	; (400998 <gfx_mono_draw_char_progmem+0xdc>)
  40095e:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
  400960:	7c3b      	ldrb	r3, [r7, #16]
  400962:	3301      	adds	r3, #1
  400964:	743b      	strb	r3, [r7, #16]
			glyph_byte <<= 1;
  400966:	7bbb      	ldrb	r3, [r7, #14]
  400968:	005b      	lsls	r3, r3, #1
  40096a:	73bb      	strb	r3, [r7, #14]
		for (i = 0; i < pixelsToDraw; i++) {
  40096c:	7c7b      	ldrb	r3, [r7, #17]
  40096e:	3301      	adds	r3, #1
  400970:	747b      	strb	r3, [r7, #17]
  400972:	7c7a      	ldrb	r2, [r7, #17]
  400974:	7afb      	ldrb	r3, [r7, #11]
  400976:	429a      	cmp	r2, r3
  400978:	d3dc      	bcc.n	400934 <gfx_mono_draw_char_progmem+0x78>
		}

		inc_y += 1;
  40097a:	7bfb      	ldrb	r3, [r7, #15]
  40097c:	3301      	adds	r3, #1
  40097e:	73fb      	strb	r3, [r7, #15]
		inc_x = x;
  400980:	79bb      	ldrb	r3, [r7, #6]
  400982:	743b      	strb	r3, [r7, #16]
		rows_left--;
  400984:	7cbb      	ldrb	r3, [r7, #18]
  400986:	3b01      	subs	r3, #1
  400988:	74bb      	strb	r3, [r7, #18]
	} while (rows_left > 0);
  40098a:	7cbb      	ldrb	r3, [r7, #18]
  40098c:	2b00      	cmp	r3, #0
  40098e:	d1c9      	bne.n	400924 <gfx_mono_draw_char_progmem+0x68>
}
  400990:	bf00      	nop
  400992:	3718      	adds	r7, #24
  400994:	46bd      	mov	sp, r7
  400996:	bd80      	pop	{r7, pc}
  400998:	00400b59 	.word	0x00400b59

0040099c <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  40099c:	b590      	push	{r4, r7, lr}
  40099e:	b085      	sub	sp, #20
  4009a0:	af02      	add	r7, sp, #8
  4009a2:	603b      	str	r3, [r7, #0]
  4009a4:	4603      	mov	r3, r0
  4009a6:	71fb      	strb	r3, [r7, #7]
  4009a8:	460b      	mov	r3, r1
  4009aa:	71bb      	strb	r3, [r7, #6]
  4009ac:	4613      	mov	r3, r2
  4009ae:	717b      	strb	r3, [r7, #5]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  4009b0:	683b      	ldr	r3, [r7, #0]
  4009b2:	7a1a      	ldrb	r2, [r3, #8]
  4009b4:	683b      	ldr	r3, [r7, #0]
  4009b6:	7a5c      	ldrb	r4, [r3, #9]
  4009b8:	7979      	ldrb	r1, [r7, #5]
  4009ba:	79b8      	ldrb	r0, [r7, #6]
  4009bc:	2300      	movs	r3, #0
  4009be:	9300      	str	r3, [sp, #0]
  4009c0:	4623      	mov	r3, r4
  4009c2:	4c09      	ldr	r4, [pc, #36]	; (4009e8 <gfx_mono_draw_char+0x4c>)
  4009c4:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
  4009c6:	683b      	ldr	r3, [r7, #0]
  4009c8:	781b      	ldrb	r3, [r3, #0]
  4009ca:	2b00      	cmp	r3, #0
  4009cc:	d000      	beq.n	4009d0 <gfx_mono_draw_char+0x34>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
  4009ce:	e006      	b.n	4009de <gfx_mono_draw_char+0x42>
		gfx_mono_draw_char_progmem(c, x, y, font);
  4009d0:	797a      	ldrb	r2, [r7, #5]
  4009d2:	79b9      	ldrb	r1, [r7, #6]
  4009d4:	79f8      	ldrb	r0, [r7, #7]
  4009d6:	683b      	ldr	r3, [r7, #0]
  4009d8:	4c04      	ldr	r4, [pc, #16]	; (4009ec <gfx_mono_draw_char+0x50>)
  4009da:	47a0      	blx	r4
		break;
  4009dc:	bf00      	nop
	}
}
  4009de:	bf00      	nop
  4009e0:	370c      	adds	r7, #12
  4009e2:	46bd      	mov	sp, r7
  4009e4:	bd90      	pop	{r4, r7, pc}
  4009e6:	bf00      	nop
  4009e8:	0040086d 	.word	0x0040086d
  4009ec:	004008bd 	.word	0x004008bd

004009f0 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  4009f0:	b590      	push	{r4, r7, lr}
  4009f2:	b087      	sub	sp, #28
  4009f4:	af00      	add	r7, sp, #0
  4009f6:	60f8      	str	r0, [r7, #12]
  4009f8:	607b      	str	r3, [r7, #4]
  4009fa:	460b      	mov	r3, r1
  4009fc:	72fb      	strb	r3, [r7, #11]
  4009fe:	4613      	mov	r3, r2
  400a00:	72bb      	strb	r3, [r7, #10]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
  400a02:	7afb      	ldrb	r3, [r7, #11]
  400a04:	75fb      	strb	r3, [r7, #23]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
  400a06:	68fb      	ldr	r3, [r7, #12]
  400a08:	781b      	ldrb	r3, [r3, #0]
  400a0a:	2b0a      	cmp	r3, #10
  400a0c:	d109      	bne.n	400a22 <gfx_mono_draw_string+0x32>
			x = start_of_string_position_x;
  400a0e:	7dfb      	ldrb	r3, [r7, #23]
  400a10:	72fb      	strb	r3, [r7, #11]
			y += font->height + 1;
  400a12:	687b      	ldr	r3, [r7, #4]
  400a14:	7a5a      	ldrb	r2, [r3, #9]
  400a16:	7abb      	ldrb	r3, [r7, #10]
  400a18:	4413      	add	r3, r2
  400a1a:	b2db      	uxtb	r3, r3
  400a1c:	3301      	adds	r3, #1
  400a1e:	72bb      	strb	r3, [r7, #10]
  400a20:	e00f      	b.n	400a42 <gfx_mono_draw_string+0x52>
		} else if (*str == '\r') {
  400a22:	68fb      	ldr	r3, [r7, #12]
  400a24:	781b      	ldrb	r3, [r3, #0]
  400a26:	2b0d      	cmp	r3, #13
  400a28:	d00b      	beq.n	400a42 <gfx_mono_draw_string+0x52>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400a2a:	68fb      	ldr	r3, [r7, #12]
  400a2c:	7818      	ldrb	r0, [r3, #0]
  400a2e:	7aba      	ldrb	r2, [r7, #10]
  400a30:	7af9      	ldrb	r1, [r7, #11]
  400a32:	687b      	ldr	r3, [r7, #4]
  400a34:	4c08      	ldr	r4, [pc, #32]	; (400a58 <gfx_mono_draw_string+0x68>)
  400a36:	47a0      	blx	r4
			x += font->width;
  400a38:	687b      	ldr	r3, [r7, #4]
  400a3a:	7a1a      	ldrb	r2, [r3, #8]
  400a3c:	7afb      	ldrb	r3, [r7, #11]
  400a3e:	4413      	add	r3, r2
  400a40:	72fb      	strb	r3, [r7, #11]
		}
	} while (*(++str));
  400a42:	68fb      	ldr	r3, [r7, #12]
  400a44:	3301      	adds	r3, #1
  400a46:	60fb      	str	r3, [r7, #12]
  400a48:	68fb      	ldr	r3, [r7, #12]
  400a4a:	781b      	ldrb	r3, [r3, #0]
  400a4c:	2b00      	cmp	r3, #0
  400a4e:	d1da      	bne.n	400a06 <gfx_mono_draw_string+0x16>
}
  400a50:	bf00      	nop
  400a52:	371c      	adds	r7, #28
  400a54:	46bd      	mov	sp, r7
  400a56:	bd90      	pop	{r4, r7, pc}
  400a58:	0040099d 	.word	0x0040099d

00400a5c <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
  400a5c:	b580      	push	{r7, lr}
  400a5e:	b082      	sub	sp, #8
  400a60:	af00      	add	r7, sp, #0
  400a62:	4603      	mov	r3, r0
  400a64:	71fb      	strb	r3, [r7, #7]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400a66:	79fb      	ldrb	r3, [r7, #7]
  400a68:	f003 030f 	and.w	r3, r3, #15
  400a6c:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400a6e:	79fb      	ldrb	r3, [r7, #7]
  400a70:	f063 034f 	orn	r3, r3, #79	; 0x4f
  400a74:	b2db      	uxtb	r3, r3
  400a76:	4618      	mov	r0, r3
  400a78:	4b02      	ldr	r3, [pc, #8]	; (400a84 <ssd1306_set_page_address+0x28>)
  400a7a:	4798      	blx	r3
	
}
  400a7c:	bf00      	nop
  400a7e:	3708      	adds	r7, #8
  400a80:	46bd      	mov	sp, r7
  400a82:	bd80      	pop	{r7, pc}
  400a84:	00401361 	.word	0x00401361

00400a88 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
  400a88:	b580      	push	{r7, lr}
  400a8a:	b082      	sub	sp, #8
  400a8c:	af00      	add	r7, sp, #0
  400a8e:	4603      	mov	r3, r0
  400a90:	71fb      	strb	r3, [r7, #7]
	// Make sure the address is 7 bits
	address &= 0x7F;
  400a92:	79fb      	ldrb	r3, [r7, #7]
  400a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  400a98:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400a9a:	79fb      	ldrb	r3, [r7, #7]
  400a9c:	091b      	lsrs	r3, r3, #4
  400a9e:	b2db      	uxtb	r3, r3
  400aa0:	f043 0310 	orr.w	r3, r3, #16
  400aa4:	b2db      	uxtb	r3, r3
  400aa6:	4618      	mov	r0, r3
  400aa8:	4b06      	ldr	r3, [pc, #24]	; (400ac4 <ssd1306_set_column_address+0x3c>)
  400aaa:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400aac:	79fb      	ldrb	r3, [r7, #7]
  400aae:	f003 030f 	and.w	r3, r3, #15
  400ab2:	b2db      	uxtb	r3, r3
  400ab4:	4618      	mov	r0, r3
  400ab6:	4b03      	ldr	r3, [pc, #12]	; (400ac4 <ssd1306_set_column_address+0x3c>)
  400ab8:	4798      	blx	r3
}
  400aba:	bf00      	nop
  400abc:	3708      	adds	r7, #8
  400abe:	46bd      	mov	sp, r7
  400ac0:	bd80      	pop	{r7, pc}
  400ac2:	bf00      	nop
  400ac4:	00401361 	.word	0x00401361

00400ac8 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
  400ac8:	b580      	push	{r7, lr}
  400aca:	b082      	sub	sp, #8
  400acc:	af00      	add	r7, sp, #0
  400ace:	4603      	mov	r3, r0
  400ad0:	71fb      	strb	r3, [r7, #7]
	// Make sure address is 6 bits
	address &= 0x3F;
  400ad2:	79fb      	ldrb	r3, [r7, #7]
  400ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  400ad8:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400ada:	79fb      	ldrb	r3, [r7, #7]
  400adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400ae0:	b2db      	uxtb	r3, r3
  400ae2:	4618      	mov	r0, r3
  400ae4:	4b02      	ldr	r3, [pc, #8]	; (400af0 <ssd1306_set_display_start_line_address+0x28>)
  400ae6:	4798      	blx	r3
}
  400ae8:	bf00      	nop
  400aea:	3708      	adds	r7, #8
  400aec:	46bd      	mov	sp, r7
  400aee:	bd80      	pop	{r7, pc}
  400af0:	00401361 	.word	0x00401361

00400af4 <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
  400af4:	b590      	push	{r4, r7, lr}
  400af6:	b083      	sub	sp, #12
  400af8:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
  400afa:	4812      	ldr	r0, [pc, #72]	; (400b44 <gfx_mono_ssd1306_init+0x50>)
  400afc:	4b12      	ldr	r3, [pc, #72]	; (400b48 <gfx_mono_ssd1306_init+0x54>)
  400afe:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
  400b00:	4b12      	ldr	r3, [pc, #72]	; (400b4c <gfx_mono_ssd1306_init+0x58>)
  400b02:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
  400b04:	2000      	movs	r0, #0
  400b06:	4b12      	ldr	r3, [pc, #72]	; (400b50 <gfx_mono_ssd1306_init+0x5c>)
  400b08:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400b0a:	2300      	movs	r3, #0
  400b0c:	71fb      	strb	r3, [r7, #7]
  400b0e:	e012      	b.n	400b36 <gfx_mono_ssd1306_init+0x42>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400b10:	2300      	movs	r3, #0
  400b12:	71bb      	strb	r3, [r7, #6]
  400b14:	e008      	b.n	400b28 <gfx_mono_ssd1306_init+0x34>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400b16:	79b9      	ldrb	r1, [r7, #6]
  400b18:	79f8      	ldrb	r0, [r7, #7]
  400b1a:	2301      	movs	r3, #1
  400b1c:	2200      	movs	r2, #0
  400b1e:	4c0d      	ldr	r4, [pc, #52]	; (400b54 <gfx_mono_ssd1306_init+0x60>)
  400b20:	47a0      	blx	r4
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400b22:	79bb      	ldrb	r3, [r7, #6]
  400b24:	3301      	adds	r3, #1
  400b26:	71bb      	strb	r3, [r7, #6]
  400b28:	f997 3006 	ldrsb.w	r3, [r7, #6]
  400b2c:	2b00      	cmp	r3, #0
  400b2e:	daf2      	bge.n	400b16 <gfx_mono_ssd1306_init+0x22>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400b30:	79fb      	ldrb	r3, [r7, #7]
  400b32:	3301      	adds	r3, #1
  400b34:	71fb      	strb	r3, [r7, #7]
  400b36:	79fb      	ldrb	r3, [r7, #7]
  400b38:	2b03      	cmp	r3, #3
  400b3a:	d9e9      	bls.n	400b10 <gfx_mono_ssd1306_init+0x1c>
		}
	}
}
  400b3c:	bf00      	nop
  400b3e:	370c      	adds	r7, #12
  400b40:	46bd      	mov	sp, r7
  400b42:	bd90      	pop	{r4, r7, pc}
  400b44:	204009f4 	.word	0x204009f4
  400b48:	004006b1 	.word	0x004006b1
  400b4c:	004012b1 	.word	0x004012b1
  400b50:	00400ac9 	.word	0x00400ac9
  400b54:	00400bf5 	.word	0x00400bf5

00400b58 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
  400b58:	b590      	push	{r4, r7, lr}
  400b5a:	b085      	sub	sp, #20
  400b5c:	af00      	add	r7, sp, #0
  400b5e:	4603      	mov	r3, r0
  400b60:	71fb      	strb	r3, [r7, #7]
  400b62:	460b      	mov	r3, r1
  400b64:	71bb      	strb	r3, [r7, #6]
  400b66:	4613      	mov	r3, r2
  400b68:	717b      	strb	r3, [r7, #5]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b6e:	2b00      	cmp	r3, #0
  400b70:	db38      	blt.n	400be4 <gfx_mono_ssd1306_draw_pixel+0x8c>
  400b72:	79bb      	ldrb	r3, [r7, #6]
  400b74:	2b1f      	cmp	r3, #31
  400b76:	d835      	bhi.n	400be4 <gfx_mono_ssd1306_draw_pixel+0x8c>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400b78:	79bb      	ldrb	r3, [r7, #6]
  400b7a:	08db      	lsrs	r3, r3, #3
  400b7c:	73bb      	strb	r3, [r7, #14]
	pixel_mask = (1 << (y - (page * 8)));
  400b7e:	79ba      	ldrb	r2, [r7, #6]
  400b80:	7bbb      	ldrb	r3, [r7, #14]
  400b82:	00db      	lsls	r3, r3, #3
  400b84:	1ad3      	subs	r3, r2, r3
  400b86:	2201      	movs	r2, #1
  400b88:	fa02 f303 	lsl.w	r3, r2, r3
  400b8c:	737b      	strb	r3, [r7, #13]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
  400b8e:	79fa      	ldrb	r2, [r7, #7]
  400b90:	7bbb      	ldrb	r3, [r7, #14]
  400b92:	4611      	mov	r1, r2
  400b94:	4618      	mov	r0, r3
  400b96:	4b15      	ldr	r3, [pc, #84]	; (400bec <gfx_mono_ssd1306_draw_pixel+0x94>)
  400b98:	4798      	blx	r3
  400b9a:	4603      	mov	r3, r0
  400b9c:	73fb      	strb	r3, [r7, #15]

	switch (color) {
  400b9e:	797b      	ldrb	r3, [r7, #5]
  400ba0:	2b01      	cmp	r3, #1
  400ba2:	d004      	beq.n	400bae <gfx_mono_ssd1306_draw_pixel+0x56>
  400ba4:	2b02      	cmp	r3, #2
  400ba6:	d011      	beq.n	400bcc <gfx_mono_ssd1306_draw_pixel+0x74>
  400ba8:	2b00      	cmp	r3, #0
  400baa:	d005      	beq.n	400bb8 <gfx_mono_ssd1306_draw_pixel+0x60>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
  400bac:	e013      	b.n	400bd6 <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value |= pixel_mask;
  400bae:	7bfa      	ldrb	r2, [r7, #15]
  400bb0:	7b7b      	ldrb	r3, [r7, #13]
  400bb2:	4313      	orrs	r3, r2
  400bb4:	73fb      	strb	r3, [r7, #15]
		break;
  400bb6:	e00e      	b.n	400bd6 <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value &= ~pixel_mask;
  400bb8:	f997 300d 	ldrsb.w	r3, [r7, #13]
  400bbc:	43db      	mvns	r3, r3
  400bbe:	b25a      	sxtb	r2, r3
  400bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
  400bc4:	4013      	ands	r3, r2
  400bc6:	b25b      	sxtb	r3, r3
  400bc8:	73fb      	strb	r3, [r7, #15]
		break;
  400bca:	e004      	b.n	400bd6 <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value ^= pixel_mask;
  400bcc:	7bfa      	ldrb	r2, [r7, #15]
  400bce:	7b7b      	ldrb	r3, [r7, #13]
  400bd0:	4053      	eors	r3, r2
  400bd2:	73fb      	strb	r3, [r7, #15]
		break;
  400bd4:	bf00      	nop
	}

	gfx_mono_put_byte(page, x, pixel_value);
  400bd6:	7bfa      	ldrb	r2, [r7, #15]
  400bd8:	79f9      	ldrb	r1, [r7, #7]
  400bda:	7bb8      	ldrb	r0, [r7, #14]
  400bdc:	2300      	movs	r3, #0
  400bde:	4c04      	ldr	r4, [pc, #16]	; (400bf0 <gfx_mono_ssd1306_draw_pixel+0x98>)
  400be0:	47a0      	blx	r4
  400be2:	e000      	b.n	400be6 <gfx_mono_ssd1306_draw_pixel+0x8e>
		return;
  400be4:	bf00      	nop
}
  400be6:	3714      	adds	r7, #20
  400be8:	46bd      	mov	sp, r7
  400bea:	bd90      	pop	{r4, r7, pc}
  400bec:	00400c79 	.word	0x00400c79
  400bf0:	00400bf5 	.word	0x00400bf5

00400bf4 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400bf4:	b590      	push	{r4, r7, lr}
  400bf6:	b083      	sub	sp, #12
  400bf8:	af00      	add	r7, sp, #0
  400bfa:	4604      	mov	r4, r0
  400bfc:	4608      	mov	r0, r1
  400bfe:	4611      	mov	r1, r2
  400c00:	461a      	mov	r2, r3
  400c02:	4623      	mov	r3, r4
  400c04:	71fb      	strb	r3, [r7, #7]
  400c06:	4603      	mov	r3, r0
  400c08:	71bb      	strb	r3, [r7, #6]
  400c0a:	460b      	mov	r3, r1
  400c0c:	717b      	strb	r3, [r7, #5]
  400c0e:	4613      	mov	r3, r2
  400c10:	713b      	strb	r3, [r7, #4]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400c12:	793b      	ldrb	r3, [r7, #4]
  400c14:	f083 0301 	eor.w	r3, r3, #1
  400c18:	b2db      	uxtb	r3, r3
  400c1a:	2b00      	cmp	r3, #0
  400c1c:	d00a      	beq.n	400c34 <gfx_mono_ssd1306_put_byte+0x40>
  400c1e:	79ba      	ldrb	r2, [r7, #6]
  400c20:	79fb      	ldrb	r3, [r7, #7]
  400c22:	4611      	mov	r1, r2
  400c24:	4618      	mov	r0, r3
  400c26:	4b0f      	ldr	r3, [pc, #60]	; (400c64 <gfx_mono_ssd1306_put_byte+0x70>)
  400c28:	4798      	blx	r3
  400c2a:	4603      	mov	r3, r0
  400c2c:	461a      	mov	r2, r3
  400c2e:	797b      	ldrb	r3, [r7, #5]
  400c30:	4293      	cmp	r3, r2
  400c32:	d012      	beq.n	400c5a <gfx_mono_ssd1306_put_byte+0x66>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400c34:	797a      	ldrb	r2, [r7, #5]
  400c36:	79b9      	ldrb	r1, [r7, #6]
  400c38:	79fb      	ldrb	r3, [r7, #7]
  400c3a:	4618      	mov	r0, r3
  400c3c:	4b0a      	ldr	r3, [pc, #40]	; (400c68 <gfx_mono_ssd1306_put_byte+0x74>)
  400c3e:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
  400c40:	79fb      	ldrb	r3, [r7, #7]
  400c42:	4618      	mov	r0, r3
  400c44:	4b09      	ldr	r3, [pc, #36]	; (400c6c <gfx_mono_ssd1306_put_byte+0x78>)
  400c46:	4798      	blx	r3
	ssd1306_set_column_address(column);
  400c48:	79bb      	ldrb	r3, [r7, #6]
  400c4a:	4618      	mov	r0, r3
  400c4c:	4b08      	ldr	r3, [pc, #32]	; (400c70 <gfx_mono_ssd1306_put_byte+0x7c>)
  400c4e:	4798      	blx	r3

	ssd1306_write_data(data);
  400c50:	797b      	ldrb	r3, [r7, #5]
  400c52:	4618      	mov	r0, r3
  400c54:	4b07      	ldr	r3, [pc, #28]	; (400c74 <gfx_mono_ssd1306_put_byte+0x80>)
  400c56:	4798      	blx	r3
  400c58:	e000      	b.n	400c5c <gfx_mono_ssd1306_put_byte+0x68>
		return;
  400c5a:	bf00      	nop
}
  400c5c:	370c      	adds	r7, #12
  400c5e:	46bd      	mov	sp, r7
  400c60:	bd90      	pop	{r4, r7, pc}
  400c62:	bf00      	nop
  400c64:	00400709 	.word	0x00400709
  400c68:	004006d1 	.word	0x004006d1
  400c6c:	00400a5d 	.word	0x00400a5d
  400c70:	00400a89 	.word	0x00400a89
  400c74:	00401405 	.word	0x00401405

00400c78 <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
  400c78:	b580      	push	{r7, lr}
  400c7a:	b082      	sub	sp, #8
  400c7c:	af00      	add	r7, sp, #0
  400c7e:	4603      	mov	r3, r0
  400c80:	460a      	mov	r2, r1
  400c82:	71fb      	strb	r3, [r7, #7]
  400c84:	4613      	mov	r3, r2
  400c86:	71bb      	strb	r3, [r7, #6]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400c88:	79ba      	ldrb	r2, [r7, #6]
  400c8a:	79fb      	ldrb	r3, [r7, #7]
  400c8c:	4611      	mov	r1, r2
  400c8e:	4618      	mov	r0, r3
  400c90:	4b03      	ldr	r3, [pc, #12]	; (400ca0 <gfx_mono_ssd1306_get_byte+0x28>)
  400c92:	4798      	blx	r3
  400c94:	4603      	mov	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400c96:	4618      	mov	r0, r3
  400c98:	3708      	adds	r7, #8
  400c9a:	46bd      	mov	sp, r7
  400c9c:	bd80      	pop	{r7, pc}
  400c9e:	bf00      	nop
  400ca0:	00400709 	.word	0x00400709

00400ca4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400ca4:	b480      	push	{r7}
  400ca6:	b083      	sub	sp, #12
  400ca8:	af00      	add	r7, sp, #0
  400caa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400cac:	687b      	ldr	r3, [r7, #4]
  400cae:	2b07      	cmp	r3, #7
  400cb0:	d825      	bhi.n	400cfe <osc_get_rate+0x5a>
  400cb2:	a201      	add	r2, pc, #4	; (adr r2, 400cb8 <osc_get_rate+0x14>)
  400cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400cb8:	00400cd9 	.word	0x00400cd9
  400cbc:	00400cdf 	.word	0x00400cdf
  400cc0:	00400ce5 	.word	0x00400ce5
  400cc4:	00400ceb 	.word	0x00400ceb
  400cc8:	00400cef 	.word	0x00400cef
  400ccc:	00400cf3 	.word	0x00400cf3
  400cd0:	00400cf7 	.word	0x00400cf7
  400cd4:	00400cfb 	.word	0x00400cfb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400cd8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400cdc:	e010      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ce2:	e00d      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ce8:	e00a      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400cea:	4b08      	ldr	r3, [pc, #32]	; (400d0c <osc_get_rate+0x68>)
  400cec:	e008      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400cee:	4b08      	ldr	r3, [pc, #32]	; (400d10 <osc_get_rate+0x6c>)
  400cf0:	e006      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400cf2:	4b08      	ldr	r3, [pc, #32]	; (400d14 <osc_get_rate+0x70>)
  400cf4:	e004      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400cf6:	4b07      	ldr	r3, [pc, #28]	; (400d14 <osc_get_rate+0x70>)
  400cf8:	e002      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400cfa:	4b06      	ldr	r3, [pc, #24]	; (400d14 <osc_get_rate+0x70>)
  400cfc:	e000      	b.n	400d00 <osc_get_rate+0x5c>
	}

	return 0;
  400cfe:	2300      	movs	r3, #0
}
  400d00:	4618      	mov	r0, r3
  400d02:	370c      	adds	r7, #12
  400d04:	46bd      	mov	sp, r7
  400d06:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d0a:	4770      	bx	lr
  400d0c:	003d0900 	.word	0x003d0900
  400d10:	007a1200 	.word	0x007a1200
  400d14:	00b71b00 	.word	0x00b71b00

00400d18 <sysclk_get_main_hz>:
{
  400d18:	b580      	push	{r7, lr}
  400d1a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400d1c:	2006      	movs	r0, #6
  400d1e:	4b05      	ldr	r3, [pc, #20]	; (400d34 <sysclk_get_main_hz+0x1c>)
  400d20:	4798      	blx	r3
  400d22:	4602      	mov	r2, r0
  400d24:	4613      	mov	r3, r2
  400d26:	009b      	lsls	r3, r3, #2
  400d28:	4413      	add	r3, r2
  400d2a:	009a      	lsls	r2, r3, #2
  400d2c:	4413      	add	r3, r2
}
  400d2e:	4618      	mov	r0, r3
  400d30:	bd80      	pop	{r7, pc}
  400d32:	bf00      	nop
  400d34:	00400ca5 	.word	0x00400ca5

00400d38 <sysclk_get_cpu_hz>:
{
  400d38:	b580      	push	{r7, lr}
  400d3a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400d3c:	4b02      	ldr	r3, [pc, #8]	; (400d48 <sysclk_get_cpu_hz+0x10>)
  400d3e:	4798      	blx	r3
  400d40:	4603      	mov	r3, r0
}
  400d42:	4618      	mov	r0, r3
  400d44:	bd80      	pop	{r7, pc}
  400d46:	bf00      	nop
  400d48:	00400d19 	.word	0x00400d19

00400d4c <sysclk_get_peripheral_hz>:
{
  400d4c:	b580      	push	{r7, lr}
  400d4e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400d50:	4b02      	ldr	r3, [pc, #8]	; (400d5c <sysclk_get_peripheral_hz+0x10>)
  400d52:	4798      	blx	r3
  400d54:	4603      	mov	r3, r0
  400d56:	085b      	lsrs	r3, r3, #1
}
  400d58:	4618      	mov	r0, r3
  400d5a:	bd80      	pop	{r7, pc}
  400d5c:	00400d19 	.word	0x00400d19

00400d60 <ioport_enable_pin>:
 * IOPORT_CREATE_PIN().
 *
 * \param pin  IOPORT pin to enable
 */
static inline void ioport_enable_pin(ioport_pin_t pin)
{
  400d60:	b480      	push	{r7}
  400d62:	b089      	sub	sp, #36	; 0x24
  400d64:	af00      	add	r7, sp, #0
  400d66:	6078      	str	r0, [r7, #4]
  400d68:	687b      	ldr	r3, [r7, #4]
  400d6a:	61fb      	str	r3, [r7, #28]
  400d6c:	69fb      	ldr	r3, [r7, #28]
  400d6e:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400d70:	69bb      	ldr	r3, [r7, #24]
  400d72:	095a      	lsrs	r2, r3, #5
  400d74:	69fb      	ldr	r3, [r7, #28]
  400d76:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400d78:	697b      	ldr	r3, [r7, #20]
  400d7a:	f003 031f 	and.w	r3, r3, #31
  400d7e:	2101      	movs	r1, #1
  400d80:	fa01 f303 	lsl.w	r3, r1, r3
  400d84:	613a      	str	r2, [r7, #16]
  400d86:	60fb      	str	r3, [r7, #12]
  400d88:	693b      	ldr	r3, [r7, #16]
  400d8a:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400d8c:	68ba      	ldr	r2, [r7, #8]
  400d8e:	4b06      	ldr	r3, [pc, #24]	; (400da8 <ioport_enable_pin+0x48>)
  400d90:	4413      	add	r3, r2
  400d92:	025b      	lsls	r3, r3, #9
  400d94:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400d96:	68fb      	ldr	r3, [r7, #12]
  400d98:	6013      	str	r3, [r2, #0]
	arch_ioport_enable_pin(pin);
}
  400d9a:	bf00      	nop
  400d9c:	3724      	adds	r7, #36	; 0x24
  400d9e:	46bd      	mov	sp, r7
  400da0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400da4:	4770      	bx	lr
  400da6:	bf00      	nop
  400da8:	00200707 	.word	0x00200707

00400dac <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400dac:	b480      	push	{r7}
  400dae:	b08d      	sub	sp, #52	; 0x34
  400db0:	af00      	add	r7, sp, #0
  400db2:	6078      	str	r0, [r7, #4]
  400db4:	6039      	str	r1, [r7, #0]
  400db6:	687b      	ldr	r3, [r7, #4]
  400db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  400dba:	683b      	ldr	r3, [r7, #0]
  400dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  400dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400dc0:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  400dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400dc4:	095a      	lsrs	r2, r3, #5
  400dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400dc8:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400dca:	6a3b      	ldr	r3, [r7, #32]
  400dcc:	f003 031f 	and.w	r3, r3, #31
  400dd0:	2101      	movs	r1, #1
  400dd2:	fa01 f303 	lsl.w	r3, r1, r3
  400dd6:	61fa      	str	r2, [r7, #28]
  400dd8:	61bb      	str	r3, [r7, #24]
  400dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400ddc:	617b      	str	r3, [r7, #20]
  400dde:	69fb      	ldr	r3, [r7, #28]
  400de0:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400de2:	693a      	ldr	r2, [r7, #16]
  400de4:	4b37      	ldr	r3, [pc, #220]	; (400ec4 <ioport_set_pin_mode+0x118>)
  400de6:	4413      	add	r3, r2
  400de8:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400dea:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400dec:	697b      	ldr	r3, [r7, #20]
  400dee:	f003 0308 	and.w	r3, r3, #8
  400df2:	2b00      	cmp	r3, #0
  400df4:	d003      	beq.n	400dfe <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  400df6:	68fb      	ldr	r3, [r7, #12]
  400df8:	69ba      	ldr	r2, [r7, #24]
  400dfa:	665a      	str	r2, [r3, #100]	; 0x64
  400dfc:	e002      	b.n	400e04 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  400dfe:	68fb      	ldr	r3, [r7, #12]
  400e00:	69ba      	ldr	r2, [r7, #24]
  400e02:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  400e04:	697b      	ldr	r3, [r7, #20]
  400e06:	f003 0310 	and.w	r3, r3, #16
  400e0a:	2b00      	cmp	r3, #0
  400e0c:	d004      	beq.n	400e18 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  400e0e:	68fb      	ldr	r3, [r7, #12]
  400e10:	69ba      	ldr	r2, [r7, #24]
  400e12:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400e16:	e003      	b.n	400e20 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  400e18:	68fb      	ldr	r3, [r7, #12]
  400e1a:	69ba      	ldr	r2, [r7, #24]
  400e1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400e20:	697b      	ldr	r3, [r7, #20]
  400e22:	f003 0320 	and.w	r3, r3, #32
  400e26:	2b00      	cmp	r3, #0
  400e28:	d003      	beq.n	400e32 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  400e2a:	68fb      	ldr	r3, [r7, #12]
  400e2c:	69ba      	ldr	r2, [r7, #24]
  400e2e:	651a      	str	r2, [r3, #80]	; 0x50
  400e30:	e002      	b.n	400e38 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  400e32:	68fb      	ldr	r3, [r7, #12]
  400e34:	69ba      	ldr	r2, [r7, #24]
  400e36:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400e38:	697b      	ldr	r3, [r7, #20]
  400e3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400e3e:	2b00      	cmp	r3, #0
  400e40:	d003      	beq.n	400e4a <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  400e42:	68fb      	ldr	r3, [r7, #12]
  400e44:	69ba      	ldr	r2, [r7, #24]
  400e46:	621a      	str	r2, [r3, #32]
  400e48:	e002      	b.n	400e50 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  400e4a:	68fb      	ldr	r3, [r7, #12]
  400e4c:	69ba      	ldr	r2, [r7, #24]
  400e4e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400e50:	697b      	ldr	r3, [r7, #20]
  400e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400e56:	2b00      	cmp	r3, #0
  400e58:	d004      	beq.n	400e64 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400e5a:	68fb      	ldr	r3, [r7, #12]
  400e5c:	69ba      	ldr	r2, [r7, #24]
  400e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400e62:	e003      	b.n	400e6c <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400e64:	68fb      	ldr	r3, [r7, #12]
  400e66:	69ba      	ldr	r2, [r7, #24]
  400e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400e6c:	697b      	ldr	r3, [r7, #20]
  400e6e:	f003 0301 	and.w	r3, r3, #1
  400e72:	2b00      	cmp	r3, #0
  400e74:	d006      	beq.n	400e84 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  400e76:	68fb      	ldr	r3, [r7, #12]
  400e78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e7a:	69bb      	ldr	r3, [r7, #24]
  400e7c:	431a      	orrs	r2, r3
  400e7e:	68fb      	ldr	r3, [r7, #12]
  400e80:	671a      	str	r2, [r3, #112]	; 0x70
  400e82:	e006      	b.n	400e92 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400e84:	68fb      	ldr	r3, [r7, #12]
  400e86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e88:	69bb      	ldr	r3, [r7, #24]
  400e8a:	43db      	mvns	r3, r3
  400e8c:	401a      	ands	r2, r3
  400e8e:	68fb      	ldr	r3, [r7, #12]
  400e90:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400e92:	697b      	ldr	r3, [r7, #20]
  400e94:	f003 0302 	and.w	r3, r3, #2
  400e98:	2b00      	cmp	r3, #0
  400e9a:	d006      	beq.n	400eaa <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400e9c:	68fb      	ldr	r3, [r7, #12]
  400e9e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400ea0:	69bb      	ldr	r3, [r7, #24]
  400ea2:	431a      	orrs	r2, r3
  400ea4:	68fb      	ldr	r3, [r7, #12]
  400ea6:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400ea8:	e006      	b.n	400eb8 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400eaa:	68fb      	ldr	r3, [r7, #12]
  400eac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400eae:	69bb      	ldr	r3, [r7, #24]
  400eb0:	43db      	mvns	r3, r3
  400eb2:	401a      	ands	r2, r3
  400eb4:	68fb      	ldr	r3, [r7, #12]
  400eb6:	675a      	str	r2, [r3, #116]	; 0x74
  400eb8:	bf00      	nop
  400eba:	3734      	adds	r7, #52	; 0x34
  400ebc:	46bd      	mov	sp, r7
  400ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ec2:	4770      	bx	lr
  400ec4:	00200707 	.word	0x00200707

00400ec8 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400ec8:	b480      	push	{r7}
  400eca:	b08d      	sub	sp, #52	; 0x34
  400ecc:	af00      	add	r7, sp, #0
  400ece:	6078      	str	r0, [r7, #4]
  400ed0:	460b      	mov	r3, r1
  400ed2:	70fb      	strb	r3, [r7, #3]
  400ed4:	687b      	ldr	r3, [r7, #4]
  400ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  400ed8:	78fb      	ldrb	r3, [r7, #3]
  400eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400ee0:	627b      	str	r3, [r7, #36]	; 0x24
  400ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400ee4:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  400ee6:	6a3b      	ldr	r3, [r7, #32]
  400ee8:	095b      	lsrs	r3, r3, #5
  400eea:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400eec:	69fa      	ldr	r2, [r7, #28]
  400eee:	4b17      	ldr	r3, [pc, #92]	; (400f4c <ioport_set_pin_dir+0x84>)
  400ef0:	4413      	add	r3, r2
  400ef2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400ef4:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  400ef6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400efa:	2b01      	cmp	r3, #1
  400efc:	d109      	bne.n	400f12 <ioport_set_pin_dir+0x4a>
  400efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400f00:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400f02:	697b      	ldr	r3, [r7, #20]
  400f04:	f003 031f 	and.w	r3, r3, #31
  400f08:	2201      	movs	r2, #1
  400f0a:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400f0c:	69bb      	ldr	r3, [r7, #24]
  400f0e:	611a      	str	r2, [r3, #16]
  400f10:	e00c      	b.n	400f2c <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  400f12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400f16:	2b00      	cmp	r3, #0
  400f18:	d108      	bne.n	400f2c <ioport_set_pin_dir+0x64>
  400f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400f1c:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400f1e:	693b      	ldr	r3, [r7, #16]
  400f20:	f003 031f 	and.w	r3, r3, #31
  400f24:	2201      	movs	r2, #1
  400f26:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400f28:	69bb      	ldr	r3, [r7, #24]
  400f2a:	615a      	str	r2, [r3, #20]
  400f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400f2e:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400f30:	68fb      	ldr	r3, [r7, #12]
  400f32:	f003 031f 	and.w	r3, r3, #31
  400f36:	2201      	movs	r2, #1
  400f38:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400f3a:	69bb      	ldr	r3, [r7, #24]
  400f3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400f40:	bf00      	nop
  400f42:	3734      	adds	r7, #52	; 0x34
  400f44:	46bd      	mov	sp, r7
  400f46:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f4a:	4770      	bx	lr
  400f4c:	00200707 	.word	0x00200707

00400f50 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400f50:	b480      	push	{r7}
  400f52:	b08b      	sub	sp, #44	; 0x2c
  400f54:	af00      	add	r7, sp, #0
  400f56:	6078      	str	r0, [r7, #4]
  400f58:	460b      	mov	r3, r1
  400f5a:	70fb      	strb	r3, [r7, #3]
  400f5c:	687b      	ldr	r3, [r7, #4]
  400f5e:	627b      	str	r3, [r7, #36]	; 0x24
  400f60:	78fb      	ldrb	r3, [r7, #3]
  400f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400f68:	61fb      	str	r3, [r7, #28]
  400f6a:	69fb      	ldr	r3, [r7, #28]
  400f6c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  400f6e:	69bb      	ldr	r3, [r7, #24]
  400f70:	095b      	lsrs	r3, r3, #5
  400f72:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400f74:	697a      	ldr	r2, [r7, #20]
  400f76:	4b10      	ldr	r3, [pc, #64]	; (400fb8 <ioport_set_pin_level+0x68>)
  400f78:	4413      	add	r3, r2
  400f7a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400f7c:	613b      	str	r3, [r7, #16]

	if (level) {
  400f7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400f82:	2b00      	cmp	r3, #0
  400f84:	d009      	beq.n	400f9a <ioport_set_pin_level+0x4a>
  400f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400f88:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400f8a:	68fb      	ldr	r3, [r7, #12]
  400f8c:	f003 031f 	and.w	r3, r3, #31
  400f90:	2201      	movs	r2, #1
  400f92:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400f94:	693b      	ldr	r3, [r7, #16]
  400f96:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400f98:	e008      	b.n	400fac <ioport_set_pin_level+0x5c>
  400f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400f9c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  400f9e:	68bb      	ldr	r3, [r7, #8]
  400fa0:	f003 031f 	and.w	r3, r3, #31
  400fa4:	2201      	movs	r2, #1
  400fa6:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400fa8:	693b      	ldr	r3, [r7, #16]
  400faa:	635a      	str	r2, [r3, #52]	; 0x34
  400fac:	bf00      	nop
  400fae:	372c      	adds	r7, #44	; 0x2c
  400fb0:	46bd      	mov	sp, r7
  400fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fb6:	4770      	bx	lr
  400fb8:	00200707 	.word	0x00200707

00400fbc <spi_reset>:
{
  400fbc:	b480      	push	{r7}
  400fbe:	b083      	sub	sp, #12
  400fc0:	af00      	add	r7, sp, #0
  400fc2:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400fc4:	687b      	ldr	r3, [r7, #4]
  400fc6:	2280      	movs	r2, #128	; 0x80
  400fc8:	601a      	str	r2, [r3, #0]
}
  400fca:	bf00      	nop
  400fcc:	370c      	adds	r7, #12
  400fce:	46bd      	mov	sp, r7
  400fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fd4:	4770      	bx	lr

00400fd6 <spi_enable>:
{
  400fd6:	b480      	push	{r7}
  400fd8:	b083      	sub	sp, #12
  400fda:	af00      	add	r7, sp, #0
  400fdc:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400fde:	687b      	ldr	r3, [r7, #4]
  400fe0:	2201      	movs	r2, #1
  400fe2:	601a      	str	r2, [r3, #0]
}
  400fe4:	bf00      	nop
  400fe6:	370c      	adds	r7, #12
  400fe8:	46bd      	mov	sp, r7
  400fea:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fee:	4770      	bx	lr

00400ff0 <spi_disable>:
{
  400ff0:	b480      	push	{r7}
  400ff2:	b083      	sub	sp, #12
  400ff4:	af00      	add	r7, sp, #0
  400ff6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400ff8:	687b      	ldr	r3, [r7, #4]
  400ffa:	2202      	movs	r2, #2
  400ffc:	601a      	str	r2, [r3, #0]
}
  400ffe:	bf00      	nop
  401000:	370c      	adds	r7, #12
  401002:	46bd      	mov	sp, r7
  401004:	f85d 7b04 	ldr.w	r7, [sp], #4
  401008:	4770      	bx	lr

0040100a <spi_set_master_mode>:
{
  40100a:	b480      	push	{r7}
  40100c:	b083      	sub	sp, #12
  40100e:	af00      	add	r7, sp, #0
  401010:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  401012:	687b      	ldr	r3, [r7, #4]
  401014:	685b      	ldr	r3, [r3, #4]
  401016:	f043 0201 	orr.w	r2, r3, #1
  40101a:	687b      	ldr	r3, [r7, #4]
  40101c:	605a      	str	r2, [r3, #4]
}
  40101e:	bf00      	nop
  401020:	370c      	adds	r7, #12
  401022:	46bd      	mov	sp, r7
  401024:	f85d 7b04 	ldr.w	r7, [sp], #4
  401028:	4770      	bx	lr

0040102a <spi_set_fixed_peripheral_select>:
{
  40102a:	b480      	push	{r7}
  40102c:	b083      	sub	sp, #12
  40102e:	af00      	add	r7, sp, #0
  401030:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PS);
  401032:	687b      	ldr	r3, [r7, #4]
  401034:	685b      	ldr	r3, [r3, #4]
  401036:	f023 0202 	bic.w	r2, r3, #2
  40103a:	687b      	ldr	r3, [r7, #4]
  40103c:	605a      	str	r2, [r3, #4]
}
  40103e:	bf00      	nop
  401040:	370c      	adds	r7, #12
  401042:	46bd      	mov	sp, r7
  401044:	f85d 7b04 	ldr.w	r7, [sp], #4
  401048:	4770      	bx	lr

0040104a <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
  40104a:	b480      	push	{r7}
  40104c:	b083      	sub	sp, #12
  40104e:	af00      	add	r7, sp, #0
  401050:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  401052:	687b      	ldr	r3, [r7, #4]
  401054:	685b      	ldr	r3, [r3, #4]
  401056:	f043 0210 	orr.w	r2, r3, #16
  40105a:	687b      	ldr	r3, [r7, #4]
  40105c:	605a      	str	r2, [r3, #4]
}
  40105e:	bf00      	nop
  401060:	370c      	adds	r7, #12
  401062:	46bd      	mov	sp, r7
  401064:	f85d 7b04 	ldr.w	r7, [sp], #4
  401068:	4770      	bx	lr

0040106a <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
  40106a:	b480      	push	{r7}
  40106c:	b083      	sub	sp, #12
  40106e:	af00      	add	r7, sp, #0
  401070:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  401072:	687b      	ldr	r3, [r7, #4]
  401074:	685b      	ldr	r3, [r3, #4]
  401076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  40107a:	687b      	ldr	r3, [r7, #4]
  40107c:	605a      	str	r2, [r3, #4]
}
  40107e:	bf00      	nop
  401080:	370c      	adds	r7, #12
  401082:	46bd      	mov	sp, r7
  401084:	f85d 7b04 	ldr.w	r7, [sp], #4
  401088:	4770      	bx	lr
	...

0040108c <ssd1306_hard_reset>:
{
  40108c:	b580      	push	{r7, lr}
  40108e:	b082      	sub	sp, #8
  401090:	af00      	add	r7, sp, #0
	uint32_t delay_10us = 10 * (sysclk_get_cpu_hz()/1000000);
  401092:	4b0f      	ldr	r3, [pc, #60]	; (4010d0 <ssd1306_hard_reset+0x44>)
  401094:	4798      	blx	r3
  401096:	4602      	mov	r2, r0
  401098:	4b0e      	ldr	r3, [pc, #56]	; (4010d4 <ssd1306_hard_reset+0x48>)
  40109a:	fba3 2302 	umull	r2, r3, r3, r2
  40109e:	0c9a      	lsrs	r2, r3, #18
  4010a0:	4613      	mov	r3, r2
  4010a2:	009b      	lsls	r3, r3, #2
  4010a4:	4413      	add	r3, r2
  4010a6:	005b      	lsls	r3, r3, #1
  4010a8:	607b      	str	r3, [r7, #4]
	ioport_set_pin_level(SSD1306_RES_PIN, false);
  4010aa:	2100      	movs	r1, #0
  4010ac:	2051      	movs	r0, #81	; 0x51
  4010ae:	4b0a      	ldr	r3, [pc, #40]	; (4010d8 <ssd1306_hard_reset+0x4c>)
  4010b0:	4798      	blx	r3
	delay_cycles(delay_10us); // At lest 10us
  4010b2:	6878      	ldr	r0, [r7, #4]
  4010b4:	4b09      	ldr	r3, [pc, #36]	; (4010dc <ssd1306_hard_reset+0x50>)
  4010b6:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  4010b8:	2101      	movs	r1, #1
  4010ba:	2051      	movs	r0, #81	; 0x51
  4010bc:	4b06      	ldr	r3, [pc, #24]	; (4010d8 <ssd1306_hard_reset+0x4c>)
  4010be:	4798      	blx	r3
	delay_cycles(delay_10us); // At lest 10us
  4010c0:	6878      	ldr	r0, [r7, #4]
  4010c2:	4b06      	ldr	r3, [pc, #24]	; (4010dc <ssd1306_hard_reset+0x50>)
  4010c4:	4798      	blx	r3
}
  4010c6:	bf00      	nop
  4010c8:	3708      	adds	r7, #8
  4010ca:	46bd      	mov	sp, r7
  4010cc:	bd80      	pop	{r7, pc}
  4010ce:	bf00      	nop
  4010d0:	00400d39 	.word	0x00400d39
  4010d4:	431bde83 	.word	0x431bde83
  4010d8:	00400f51 	.word	0x00400f51
  4010dc:	20400001 	.word	0x20400001

004010e0 <ssd1306_display_on>:
 * \brief Turn the OLED display on
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
  4010e0:	b580      	push	{r7, lr}
  4010e2:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  4010e4:	20af      	movs	r0, #175	; 0xaf
  4010e6:	4b02      	ldr	r3, [pc, #8]	; (4010f0 <ssd1306_display_on+0x10>)
  4010e8:	4798      	blx	r3
}
  4010ea:	bf00      	nop
  4010ec:	bd80      	pop	{r7, pc}
  4010ee:	bf00      	nop
  4010f0:	00401361 	.word	0x00401361

004010f4 <ssd1306_set_contrast>:
 * \param contrast a number between 0 and 0xFF
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
  4010f4:	b580      	push	{r7, lr}
  4010f6:	b082      	sub	sp, #8
  4010f8:	af00      	add	r7, sp, #0
  4010fa:	4603      	mov	r3, r0
  4010fc:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  4010fe:	2081      	movs	r0, #129	; 0x81
  401100:	4b05      	ldr	r3, [pc, #20]	; (401118 <ssd1306_set_contrast+0x24>)
  401102:	4798      	blx	r3
	ssd1306_write_command(contrast);
  401104:	79fb      	ldrb	r3, [r7, #7]
  401106:	4618      	mov	r0, r3
  401108:	4b03      	ldr	r3, [pc, #12]	; (401118 <ssd1306_set_contrast+0x24>)
  40110a:	4798      	blx	r3
	return contrast;
  40110c:	79fb      	ldrb	r3, [r7, #7]
}
  40110e:	4618      	mov	r0, r3
  401110:	3708      	adds	r7, #8
  401112:	46bd      	mov	sp, r7
  401114:	bd80      	pop	{r7, pc}
  401116:	bf00      	nop
  401118:	00401361 	.word	0x00401361

0040111c <ssd1306_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
  40111c:	b580      	push	{r7, lr}
  40111e:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  401120:	20a6      	movs	r0, #166	; 0xa6
  401122:	4b02      	ldr	r3, [pc, #8]	; (40112c <ssd1306_display_invert_disable+0x10>)
  401124:	4798      	blx	r3
}
  401126:	bf00      	nop
  401128:	bd80      	pop	{r7, pc}
  40112a:	bf00      	nop
  40112c:	00401361 	.word	0x00401361

00401130 <ssd1306_interface_init>:
#define SPI_MOSI_MASK 21
#define SPI_CLK_MASK 22


static void ssd1306_interface_init(void)
{
  401130:	b590      	push	{r4, r7, lr}
  401132:	b083      	sub	sp, #12
  401134:	af00      	add	r7, sp, #0
	
	ioport_set_pin_dir(SSD1306_RES_PIN, IOPORT_DIR_OUTPUT);
  401136:	2101      	movs	r1, #1
  401138:	2051      	movs	r0, #81	; 0x51
  40113a:	4b46      	ldr	r3, [pc, #280]	; (401254 <ssd1306_interface_init+0x124>)
  40113c:	4798      	blx	r3
	ioport_set_pin_dir(SSD1306_DC_PIN, IOPORT_DIR_OUTPUT);
  40113e:	2101      	movs	r1, #1
  401140:	2023      	movs	r0, #35	; 0x23
  401142:	4b44      	ldr	r3, [pc, #272]	; (401254 <ssd1306_interface_init+0x124>)
  401144:	4798      	blx	r3
	ioport_set_pin_mode(SSD1306_RES_PIN, IOPORT_MODE_PULLUP);
  401146:	2108      	movs	r1, #8
  401148:	2051      	movs	r0, #81	; 0x51
  40114a:	4b43      	ldr	r3, [pc, #268]	; (401258 <ssd1306_interface_init+0x128>)
  40114c:	4798      	blx	r3
	ioport_set_pin_mode(SSD1306_DC_PIN, IOPORT_MODE_PULLUP);
  40114e:	2108      	movs	r1, #8
  401150:	2023      	movs	r0, #35	; 0x23
  401152:	4b41      	ldr	r3, [pc, #260]	; (401258 <ssd1306_interface_init+0x128>)
  401154:	4798      	blx	r3
	ioport_enable_pin(SSD1306_DC_PIN);
  401156:	2023      	movs	r0, #35	; 0x23
  401158:	4b40      	ldr	r3, [pc, #256]	; (40125c <ssd1306_interface_init+0x12c>)
  40115a:	4798      	blx	r3
	ioport_enable_pin(SSD1306_RES_PIN);
  40115c:	2051      	movs	r0, #81	; 0x51
  40115e:	4b3f      	ldr	r3, [pc, #252]	; (40125c <ssd1306_interface_init+0x12c>)
  401160:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_DC_PIN, true);
  401162:	2101      	movs	r1, #1
  401164:	2023      	movs	r0, #35	; 0x23
  401166:	4b3e      	ldr	r3, [pc, #248]	; (401260 <ssd1306_interface_init+0x130>)
  401168:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  40116a:	2101      	movs	r1, #1
  40116c:	2051      	movs	r0, #81	; 0x51
  40116e:	4b3c      	ldr	r3, [pc, #240]	; (401260 <ssd1306_interface_init+0x130>)
  401170:	4798      	blx	r3
	
	
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  401172:	2300      	movs	r3, #0
  401174:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401178:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40117c:	4839      	ldr	r0, [pc, #228]	; (401264 <ssd1306_interface_init+0x134>)
  40117e:	4c3a      	ldr	r4, [pc, #232]	; (401268 <ssd1306_interface_init+0x138>)
  401180:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  401182:	2300      	movs	r3, #0
  401184:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401188:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40118c:	4835      	ldr	r0, [pc, #212]	; (401264 <ssd1306_interface_init+0x134>)
  40118e:	4c36      	ldr	r4, [pc, #216]	; (401268 <ssd1306_interface_init+0x138>)
  401190:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  401192:	2300      	movs	r3, #0
  401194:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401198:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40119c:	4831      	ldr	r0, [pc, #196]	; (401264 <ssd1306_interface_init+0x134>)
  40119e:	4c32      	ldr	r4, [pc, #200]	; (401268 <ssd1306_interface_init+0x138>)
  4011a0:	47a0      	blx	r4
	
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4011a2:	2300      	movs	r3, #0
  4011a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4011a8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4011ac:	482d      	ldr	r0, [pc, #180]	; (401264 <ssd1306_interface_init+0x134>)
  4011ae:	4c2e      	ldr	r4, [pc, #184]	; (401268 <ssd1306_interface_init+0x138>)
  4011b0:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4011b2:	2300      	movs	r3, #0
  4011b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4011b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4011bc:	4829      	ldr	r0, [pc, #164]	; (401264 <ssd1306_interface_init+0x134>)
  4011be:	4c2a      	ldr	r4, [pc, #168]	; (401268 <ssd1306_interface_init+0x138>)
  4011c0:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4011c2:	2300      	movs	r3, #0
  4011c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4011c8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4011cc:	4825      	ldr	r0, [pc, #148]	; (401264 <ssd1306_interface_init+0x134>)
  4011ce:	4c26      	ldr	r4, [pc, #152]	; (401268 <ssd1306_interface_init+0x138>)
  4011d0:	47a0      	blx	r4
		
		spi_disable(SPI0);
  4011d2:	4826      	ldr	r0, [pc, #152]	; (40126c <ssd1306_interface_init+0x13c>)
  4011d4:	4b26      	ldr	r3, [pc, #152]	; (401270 <ssd1306_interface_init+0x140>)
  4011d6:	4798      	blx	r3
		spi_reset(SPI0);
  4011d8:	4824      	ldr	r0, [pc, #144]	; (40126c <ssd1306_interface_init+0x13c>)
  4011da:	4b26      	ldr	r3, [pc, #152]	; (401274 <ssd1306_interface_init+0x144>)
  4011dc:	4798      	blx	r3
		spi_set_master_mode(SPI0);
  4011de:	4823      	ldr	r0, [pc, #140]	; (40126c <ssd1306_interface_init+0x13c>)
  4011e0:	4b25      	ldr	r3, [pc, #148]	; (401278 <ssd1306_interface_init+0x148>)
  4011e2:	4798      	blx	r3
		//spi_set_transfer_delay(SPI0, 1, 40, 30);
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  4011e4:	2208      	movs	r2, #8
  4011e6:	2101      	movs	r1, #1
  4011e8:	4820      	ldr	r0, [pc, #128]	; (40126c <ssd1306_interface_init+0x13c>)
  4011ea:	4b24      	ldr	r3, [pc, #144]	; (40127c <ssd1306_interface_init+0x14c>)
  4011ec:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  4011ee:	2200      	movs	r2, #0
  4011f0:	2101      	movs	r1, #1
  4011f2:	481e      	ldr	r0, [pc, #120]	; (40126c <ssd1306_interface_init+0x13c>)
  4011f4:	4b22      	ldr	r3, [pc, #136]	; (401280 <ssd1306_interface_init+0x150>)
  4011f6:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  4011f8:	2200      	movs	r2, #0
  4011fa:	2101      	movs	r1, #1
  4011fc:	481b      	ldr	r0, [pc, #108]	; (40126c <ssd1306_interface_init+0x13c>)
  4011fe:	4b21      	ldr	r3, [pc, #132]	; (401284 <ssd1306_interface_init+0x154>)
  401200:	4798      	blx	r3
		spi_set_fixed_peripheral_select(SPI0);
  401202:	481a      	ldr	r0, [pc, #104]	; (40126c <ssd1306_interface_init+0x13c>)
  401204:	4b20      	ldr	r3, [pc, #128]	; (401288 <ssd1306_interface_init+0x158>)
  401206:	4798      	blx	r3
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  401208:	2200      	movs	r2, #0
  40120a:	2101      	movs	r1, #1
  40120c:	4817      	ldr	r0, [pc, #92]	; (40126c <ssd1306_interface_init+0x13c>)
  40120e:	4b1f      	ldr	r3, [pc, #124]	; (40128c <ssd1306_interface_init+0x15c>)
  401210:	4798      	blx	r3
		spi_disable_loopback(SPI0);
  401212:	4816      	ldr	r0, [pc, #88]	; (40126c <ssd1306_interface_init+0x13c>)
  401214:	4b1e      	ldr	r3, [pc, #120]	; (401290 <ssd1306_interface_init+0x160>)
  401216:	4798      	blx	r3

		spi_disable_mode_fault_detect(SPI0);
  401218:	4814      	ldr	r0, [pc, #80]	; (40126c <ssd1306_interface_init+0x13c>)
  40121a:	4b1e      	ldr	r3, [pc, #120]	; (401294 <ssd1306_interface_init+0x164>)
  40121c:	4798      	blx	r3
		int div = spi_calc_baudrate_div(1000000, sysclk_get_peripheral_hz());
  40121e:	4b1e      	ldr	r3, [pc, #120]	; (401298 <ssd1306_interface_init+0x168>)
  401220:	4798      	blx	r3
  401222:	4603      	mov	r3, r0
  401224:	4619      	mov	r1, r3
  401226:	481d      	ldr	r0, [pc, #116]	; (40129c <ssd1306_interface_init+0x16c>)
  401228:	4b1d      	ldr	r3, [pc, #116]	; (4012a0 <ssd1306_interface_init+0x170>)
  40122a:	4798      	blx	r3
  40122c:	4603      	mov	r3, r0
  40122e:	607b      	str	r3, [r7, #4]
		spi_set_baudrate_div(SPI0,1, div);
  401230:	687b      	ldr	r3, [r7, #4]
  401232:	b2db      	uxtb	r3, r3
  401234:	461a      	mov	r2, r3
  401236:	2101      	movs	r1, #1
  401238:	480c      	ldr	r0, [pc, #48]	; (40126c <ssd1306_interface_init+0x13c>)
  40123a:	4b1a      	ldr	r3, [pc, #104]	; (4012a4 <ssd1306_interface_init+0x174>)
  40123c:	4798      	blx	r3
		spi_enable_clock(SPI0);
  40123e:	480b      	ldr	r0, [pc, #44]	; (40126c <ssd1306_interface_init+0x13c>)
  401240:	4b19      	ldr	r3, [pc, #100]	; (4012a8 <ssd1306_interface_init+0x178>)
  401242:	4798      	blx	r3
		
		spi_enable(SPI0);
  401244:	4809      	ldr	r0, [pc, #36]	; (40126c <ssd1306_interface_init+0x13c>)
  401246:	4b19      	ldr	r3, [pc, #100]	; (4012ac <ssd1306_interface_init+0x17c>)
  401248:	4798      	blx	r3
}
  40124a:	bf00      	nop
  40124c:	370c      	adds	r7, #12
  40124e:	46bd      	mov	sp, r7
  401250:	bd90      	pop	{r4, r7, pc}
  401252:	bf00      	nop
  401254:	00400ec9 	.word	0x00400ec9
  401258:	00400dad 	.word	0x00400dad
  40125c:	00400d61 	.word	0x00400d61
  401260:	00400f51 	.word	0x00400f51
  401264:	400e1400 	.word	0x400e1400
  401268:	00401f49 	.word	0x00401f49
  40126c:	40008000 	.word	0x40008000
  401270:	00400ff1 	.word	0x00400ff1
  401274:	00400fbd 	.word	0x00400fbd
  401278:	0040100b 	.word	0x0040100b
  40127c:	00400525 	.word	0x00400525
  401280:	00400485 	.word	0x00400485
  401284:	004004d5 	.word	0x004004d5
  401288:	0040102b 	.word	0x0040102b
  40128c:	004005cb 	.word	0x004005cb
  401290:	0040106b 	.word	0x0040106b
  401294:	0040104b 	.word	0x0040104b
  401298:	00400d4d 	.word	0x00400d4d
  40129c:	000f4240 	.word	0x000f4240
  4012a0:	00400615 	.word	0x00400615
  4012a4:	00400651 	.word	0x00400651
  4012a8:	00400395 	.word	0x00400395
  4012ac:	00400fd7 	.word	0x00400fd7

004012b0 <ssd1306_init>:
 a
 a
 a
 */
void ssd1306_init(void)
{
  4012b0:	b580      	push	{r7, lr}
  4012b2:	af00      	add	r7, sp, #0
	// Initialize delay routine
	delay_init();

	// Initialize the interface
	ssd1306_interface_init();
  4012b4:	4b23      	ldr	r3, [pc, #140]	; (401344 <ssd1306_init+0x94>)
  4012b6:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
  4012b8:	4b23      	ldr	r3, [pc, #140]	; (401348 <ssd1306_init+0x98>)
  4012ba:	4798      	blx	r3

	// Set the reset pin to the default state
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  4012bc:	2101      	movs	r1, #1
  4012be:	2051      	movs	r0, #81	; 0x51
  4012c0:	4b22      	ldr	r3, [pc, #136]	; (40134c <ssd1306_init+0x9c>)
  4012c2:	4798      	blx	r3
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  4012c4:	20a8      	movs	r0, #168	; 0xa8
  4012c6:	4b22      	ldr	r3, [pc, #136]	; (401350 <ssd1306_init+0xa0>)
  4012c8:	4798      	blx	r3
	ssd1306_write_command(0x1F);
  4012ca:	201f      	movs	r0, #31
  4012cc:	4b20      	ldr	r3, [pc, #128]	; (401350 <ssd1306_init+0xa0>)
  4012ce:	4798      	blx	r3

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  4012d0:	20d3      	movs	r0, #211	; 0xd3
  4012d2:	4b1f      	ldr	r3, [pc, #124]	; (401350 <ssd1306_init+0xa0>)
  4012d4:	4798      	blx	r3
	ssd1306_write_command(0x00);
  4012d6:	2000      	movs	r0, #0
  4012d8:	4b1d      	ldr	r3, [pc, #116]	; (401350 <ssd1306_init+0xa0>)
  4012da:	4798      	blx	r3

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  4012dc:	2040      	movs	r0, #64	; 0x40
  4012de:	4b1c      	ldr	r3, [pc, #112]	; (401350 <ssd1306_init+0xa0>)
  4012e0:	4798      	blx	r3

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  4012e2:	20a1      	movs	r0, #161	; 0xa1
  4012e4:	4b1a      	ldr	r3, [pc, #104]	; (401350 <ssd1306_init+0xa0>)
  4012e6:	4798      	blx	r3

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  4012e8:	20c8      	movs	r0, #200	; 0xc8
  4012ea:	4b19      	ldr	r3, [pc, #100]	; (401350 <ssd1306_init+0xa0>)
  4012ec:	4798      	blx	r3

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  4012ee:	20da      	movs	r0, #218	; 0xda
  4012f0:	4b17      	ldr	r3, [pc, #92]	; (401350 <ssd1306_init+0xa0>)
  4012f2:	4798      	blx	r3
	ssd1306_write_command(0x02);
  4012f4:	2002      	movs	r0, #2
  4012f6:	4b16      	ldr	r3, [pc, #88]	; (401350 <ssd1306_init+0xa0>)
  4012f8:	4798      	blx	r3

	ssd1306_set_contrast(0x8F);
  4012fa:	208f      	movs	r0, #143	; 0x8f
  4012fc:	4b15      	ldr	r3, [pc, #84]	; (401354 <ssd1306_init+0xa4>)
  4012fe:	4798      	blx	r3

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  401300:	20a4      	movs	r0, #164	; 0xa4
  401302:	4b13      	ldr	r3, [pc, #76]	; (401350 <ssd1306_init+0xa0>)
  401304:	4798      	blx	r3

	ssd1306_display_invert_disable();
  401306:	4b14      	ldr	r3, [pc, #80]	; (401358 <ssd1306_init+0xa8>)
  401308:	4798      	blx	r3

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  40130a:	20d5      	movs	r0, #213	; 0xd5
  40130c:	4b10      	ldr	r3, [pc, #64]	; (401350 <ssd1306_init+0xa0>)
  40130e:	4798      	blx	r3
	ssd1306_write_command(0x80);
  401310:	2080      	movs	r0, #128	; 0x80
  401312:	4b0f      	ldr	r3, [pc, #60]	; (401350 <ssd1306_init+0xa0>)
  401314:	4798      	blx	r3

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  401316:	208d      	movs	r0, #141	; 0x8d
  401318:	4b0d      	ldr	r3, [pc, #52]	; (401350 <ssd1306_init+0xa0>)
  40131a:	4798      	blx	r3
	ssd1306_write_command(0x14);
  40131c:	2014      	movs	r0, #20
  40131e:	4b0c      	ldr	r3, [pc, #48]	; (401350 <ssd1306_init+0xa0>)
  401320:	4798      	blx	r3

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  401322:	20db      	movs	r0, #219	; 0xdb
  401324:	4b0a      	ldr	r3, [pc, #40]	; (401350 <ssd1306_init+0xa0>)
  401326:	4798      	blx	r3
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  401328:	2040      	movs	r0, #64	; 0x40
  40132a:	4b09      	ldr	r3, [pc, #36]	; (401350 <ssd1306_init+0xa0>)
  40132c:	4798      	blx	r3

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  40132e:	20d9      	movs	r0, #217	; 0xd9
  401330:	4b07      	ldr	r3, [pc, #28]	; (401350 <ssd1306_init+0xa0>)
  401332:	4798      	blx	r3
	ssd1306_write_command(0xF1);
  401334:	20f1      	movs	r0, #241	; 0xf1
  401336:	4b06      	ldr	r3, [pc, #24]	; (401350 <ssd1306_init+0xa0>)
  401338:	4798      	blx	r3

	
	ssd1306_display_on();
  40133a:	4b08      	ldr	r3, [pc, #32]	; (40135c <ssd1306_init+0xac>)
  40133c:	4798      	blx	r3
}
  40133e:	bf00      	nop
  401340:	bd80      	pop	{r7, pc}
  401342:	bf00      	nop
  401344:	00401131 	.word	0x00401131
  401348:	0040108d 	.word	0x0040108d
  40134c:	00400f51 	.word	0x00400f51
  401350:	00401361 	.word	0x00401361
  401354:	004010f5 	.word	0x004010f5
  401358:	0040111d 	.word	0x0040111d
  40135c:	004010e1 	.word	0x004010e1

00401360 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  401360:	b5f0      	push	{r4, r5, r6, r7, lr}
  401362:	b083      	sub	sp, #12
  401364:	af00      	add	r7, sp, #0
  401366:	4603      	mov	r3, r0
  401368:	71fb      	strb	r3, [r7, #7]
	ioport_set_pin_level(SSD1306_DC_PIN, false);
  40136a:	2100      	movs	r1, #0
  40136c:	2023      	movs	r0, #35	; 0x23
  40136e:	4b1c      	ldr	r3, [pc, #112]	; (4013e0 <ssd1306_write_command+0x80>)
  401370:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  401372:	2101      	movs	r1, #1
  401374:	481b      	ldr	r0, [pc, #108]	; (4013e4 <ssd1306_write_command+0x84>)
  401376:	4b1c      	ldr	r3, [pc, #112]	; (4013e8 <ssd1306_write_command+0x88>)
  401378:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  40137a:	79fb      	ldrb	r3, [r7, #7]
  40137c:	b299      	uxth	r1, r3
  40137e:	2301      	movs	r3, #1
  401380:	2201      	movs	r2, #1
  401382:	4818      	ldr	r0, [pc, #96]	; (4013e4 <ssd1306_write_command+0x84>)
  401384:	4c19      	ldr	r4, [pc, #100]	; (4013ec <ssd1306_write_command+0x8c>)
  401386:	47a0      	blx	r4
	delay_us(10);
  401388:	4b19      	ldr	r3, [pc, #100]	; (4013f0 <ssd1306_write_command+0x90>)
  40138a:	4798      	blx	r3
  40138c:	4603      	mov	r3, r0
  40138e:	4619      	mov	r1, r3
  401390:	f04f 0200 	mov.w	r2, #0
  401394:	460b      	mov	r3, r1
  401396:	4614      	mov	r4, r2
  401398:	00a6      	lsls	r6, r4, #2
  40139a:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  40139e:	009d      	lsls	r5, r3, #2
  4013a0:	462b      	mov	r3, r5
  4013a2:	4634      	mov	r4, r6
  4013a4:	185b      	adds	r3, r3, r1
  4013a6:	eb44 0402 	adc.w	r4, r4, r2
  4013aa:	18db      	adds	r3, r3, r3
  4013ac:	eb44 0404 	adc.w	r4, r4, r4
  4013b0:	4619      	mov	r1, r3
  4013b2:	4622      	mov	r2, r4
  4013b4:	4b0f      	ldr	r3, [pc, #60]	; (4013f4 <ssd1306_write_command+0x94>)
  4013b6:	f04f 0400 	mov.w	r4, #0
  4013ba:	18cd      	adds	r5, r1, r3
  4013bc:	eb42 0604 	adc.w	r6, r2, r4
  4013c0:	4628      	mov	r0, r5
  4013c2:	4631      	mov	r1, r6
  4013c4:	4c0c      	ldr	r4, [pc, #48]	; (4013f8 <ssd1306_write_command+0x98>)
  4013c6:	4a0d      	ldr	r2, [pc, #52]	; (4013fc <ssd1306_write_command+0x9c>)
  4013c8:	f04f 0300 	mov.w	r3, #0
  4013cc:	47a0      	blx	r4
  4013ce:	4603      	mov	r3, r0
  4013d0:	460c      	mov	r4, r1
  4013d2:	4618      	mov	r0, r3
  4013d4:	4b0a      	ldr	r3, [pc, #40]	; (401400 <ssd1306_write_command+0xa0>)
  4013d6:	4798      	blx	r3
}
  4013d8:	bf00      	nop
  4013da:	370c      	adds	r7, #12
  4013dc:	46bd      	mov	sp, r7
  4013de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4013e0:	00400f51 	.word	0x00400f51
  4013e4:	40008000 	.word	0x40008000
  4013e8:	004003d1 	.word	0x004003d1
  4013ec:	00400405 	.word	0x00400405
  4013f0:	00400d39 	.word	0x00400d39
  4013f4:	005a83df 	.word	0x005a83df
  4013f8:	00403199 	.word	0x00403199
  4013fc:	005a83e0 	.word	0x005a83e0
  401400:	20400001 	.word	0x20400001

00401404 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  401404:	b5f0      	push	{r4, r5, r6, r7, lr}
  401406:	b083      	sub	sp, #12
  401408:	af00      	add	r7, sp, #0
  40140a:	4603      	mov	r3, r0
  40140c:	71fb      	strb	r3, [r7, #7]
	ioport_set_pin_level(SSD1306_DC_PIN, true);
  40140e:	2101      	movs	r1, #1
  401410:	2023      	movs	r0, #35	; 0x23
  401412:	4b1c      	ldr	r3, [pc, #112]	; (401484 <ssd1306_write_data+0x80>)
  401414:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  401416:	2101      	movs	r1, #1
  401418:	481b      	ldr	r0, [pc, #108]	; (401488 <ssd1306_write_data+0x84>)
  40141a:	4b1c      	ldr	r3, [pc, #112]	; (40148c <ssd1306_write_data+0x88>)
  40141c:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  40141e:	79fb      	ldrb	r3, [r7, #7]
  401420:	b299      	uxth	r1, r3
  401422:	2301      	movs	r3, #1
  401424:	2201      	movs	r2, #1
  401426:	4818      	ldr	r0, [pc, #96]	; (401488 <ssd1306_write_data+0x84>)
  401428:	4c19      	ldr	r4, [pc, #100]	; (401490 <ssd1306_write_data+0x8c>)
  40142a:	47a0      	blx	r4
	delay_us(10);
  40142c:	4b19      	ldr	r3, [pc, #100]	; (401494 <ssd1306_write_data+0x90>)
  40142e:	4798      	blx	r3
  401430:	4603      	mov	r3, r0
  401432:	4619      	mov	r1, r3
  401434:	f04f 0200 	mov.w	r2, #0
  401438:	460b      	mov	r3, r1
  40143a:	4614      	mov	r4, r2
  40143c:	00a6      	lsls	r6, r4, #2
  40143e:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  401442:	009d      	lsls	r5, r3, #2
  401444:	462b      	mov	r3, r5
  401446:	4634      	mov	r4, r6
  401448:	185b      	adds	r3, r3, r1
  40144a:	eb44 0402 	adc.w	r4, r4, r2
  40144e:	18db      	adds	r3, r3, r3
  401450:	eb44 0404 	adc.w	r4, r4, r4
  401454:	4619      	mov	r1, r3
  401456:	4622      	mov	r2, r4
  401458:	4b0f      	ldr	r3, [pc, #60]	; (401498 <ssd1306_write_data+0x94>)
  40145a:	f04f 0400 	mov.w	r4, #0
  40145e:	18cd      	adds	r5, r1, r3
  401460:	eb42 0604 	adc.w	r6, r2, r4
  401464:	4628      	mov	r0, r5
  401466:	4631      	mov	r1, r6
  401468:	4c0c      	ldr	r4, [pc, #48]	; (40149c <ssd1306_write_data+0x98>)
  40146a:	4a0d      	ldr	r2, [pc, #52]	; (4014a0 <ssd1306_write_data+0x9c>)
  40146c:	f04f 0300 	mov.w	r3, #0
  401470:	47a0      	blx	r4
  401472:	4603      	mov	r3, r0
  401474:	460c      	mov	r4, r1
  401476:	4618      	mov	r0, r3
  401478:	4b0a      	ldr	r3, [pc, #40]	; (4014a4 <ssd1306_write_data+0xa0>)
  40147a:	4798      	blx	r3
}
  40147c:	bf00      	nop
  40147e:	370c      	adds	r7, #12
  401480:	46bd      	mov	sp, r7
  401482:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401484:	00400f51 	.word	0x00400f51
  401488:	40008000 	.word	0x40008000
  40148c:	004003d1 	.word	0x004003d1
  401490:	00400405 	.word	0x00400405
  401494:	00400d39 	.word	0x00400d39
  401498:	005a83df 	.word	0x005a83df
  40149c:	00403199 	.word	0x00403199
  4014a0:	005a83e0 	.word	0x005a83e0
  4014a4:	20400001 	.word	0x20400001

004014a8 <osc_enable>:
{
  4014a8:	b580      	push	{r7, lr}
  4014aa:	b082      	sub	sp, #8
  4014ac:	af00      	add	r7, sp, #0
  4014ae:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4014b0:	687b      	ldr	r3, [r7, #4]
  4014b2:	2b07      	cmp	r3, #7
  4014b4:	d831      	bhi.n	40151a <osc_enable+0x72>
  4014b6:	a201      	add	r2, pc, #4	; (adr r2, 4014bc <osc_enable+0x14>)
  4014b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4014bc:	00401519 	.word	0x00401519
  4014c0:	004014dd 	.word	0x004014dd
  4014c4:	004014e5 	.word	0x004014e5
  4014c8:	004014ed 	.word	0x004014ed
  4014cc:	004014f5 	.word	0x004014f5
  4014d0:	004014fd 	.word	0x004014fd
  4014d4:	00401505 	.word	0x00401505
  4014d8:	0040150f 	.word	0x0040150f
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4014dc:	2000      	movs	r0, #0
  4014de:	4b11      	ldr	r3, [pc, #68]	; (401524 <osc_enable+0x7c>)
  4014e0:	4798      	blx	r3
		break;
  4014e2:	e01a      	b.n	40151a <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4014e4:	2001      	movs	r0, #1
  4014e6:	4b0f      	ldr	r3, [pc, #60]	; (401524 <osc_enable+0x7c>)
  4014e8:	4798      	blx	r3
		break;
  4014ea:	e016      	b.n	40151a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4014ec:	2000      	movs	r0, #0
  4014ee:	4b0e      	ldr	r3, [pc, #56]	; (401528 <osc_enable+0x80>)
  4014f0:	4798      	blx	r3
		break;
  4014f2:	e012      	b.n	40151a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4014f4:	2010      	movs	r0, #16
  4014f6:	4b0c      	ldr	r3, [pc, #48]	; (401528 <osc_enable+0x80>)
  4014f8:	4798      	blx	r3
		break;
  4014fa:	e00e      	b.n	40151a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4014fc:	2020      	movs	r0, #32
  4014fe:	4b0a      	ldr	r3, [pc, #40]	; (401528 <osc_enable+0x80>)
  401500:	4798      	blx	r3
		break;
  401502:	e00a      	b.n	40151a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401504:	213e      	movs	r1, #62	; 0x3e
  401506:	2000      	movs	r0, #0
  401508:	4b08      	ldr	r3, [pc, #32]	; (40152c <osc_enable+0x84>)
  40150a:	4798      	blx	r3
		break;
  40150c:	e005      	b.n	40151a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40150e:	213e      	movs	r1, #62	; 0x3e
  401510:	2001      	movs	r0, #1
  401512:	4b06      	ldr	r3, [pc, #24]	; (40152c <osc_enable+0x84>)
  401514:	4798      	blx	r3
		break;
  401516:	e000      	b.n	40151a <osc_enable+0x72>
		break;
  401518:	bf00      	nop
}
  40151a:	bf00      	nop
  40151c:	3708      	adds	r7, #8
  40151e:	46bd      	mov	sp, r7
  401520:	bd80      	pop	{r7, pc}
  401522:	bf00      	nop
  401524:	004023b5 	.word	0x004023b5
  401528:	00402421 	.word	0x00402421
  40152c:	00402491 	.word	0x00402491

00401530 <osc_is_ready>:
{
  401530:	b580      	push	{r7, lr}
  401532:	b082      	sub	sp, #8
  401534:	af00      	add	r7, sp, #0
  401536:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401538:	687b      	ldr	r3, [r7, #4]
  40153a:	2b07      	cmp	r3, #7
  40153c:	d826      	bhi.n	40158c <osc_is_ready+0x5c>
  40153e:	a201      	add	r2, pc, #4	; (adr r2, 401544 <osc_is_ready+0x14>)
  401540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401544:	00401565 	.word	0x00401565
  401548:	00401569 	.word	0x00401569
  40154c:	00401569 	.word	0x00401569
  401550:	0040157b 	.word	0x0040157b
  401554:	0040157b 	.word	0x0040157b
  401558:	0040157b 	.word	0x0040157b
  40155c:	0040157b 	.word	0x0040157b
  401560:	0040157b 	.word	0x0040157b
		return 1;
  401564:	2301      	movs	r3, #1
  401566:	e012      	b.n	40158e <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  401568:	4b0b      	ldr	r3, [pc, #44]	; (401598 <osc_is_ready+0x68>)
  40156a:	4798      	blx	r3
  40156c:	4603      	mov	r3, r0
  40156e:	2b00      	cmp	r3, #0
  401570:	bf14      	ite	ne
  401572:	2301      	movne	r3, #1
  401574:	2300      	moveq	r3, #0
  401576:	b2db      	uxtb	r3, r3
  401578:	e009      	b.n	40158e <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  40157a:	4b08      	ldr	r3, [pc, #32]	; (40159c <osc_is_ready+0x6c>)
  40157c:	4798      	blx	r3
  40157e:	4603      	mov	r3, r0
  401580:	2b00      	cmp	r3, #0
  401582:	bf14      	ite	ne
  401584:	2301      	movne	r3, #1
  401586:	2300      	moveq	r3, #0
  401588:	b2db      	uxtb	r3, r3
  40158a:	e000      	b.n	40158e <osc_is_ready+0x5e>
	return 0;
  40158c:	2300      	movs	r3, #0
}
  40158e:	4618      	mov	r0, r3
  401590:	3708      	adds	r7, #8
  401592:	46bd      	mov	sp, r7
  401594:	bd80      	pop	{r7, pc}
  401596:	bf00      	nop
  401598:	004023ed 	.word	0x004023ed
  40159c:	00402509 	.word	0x00402509

004015a0 <osc_get_rate>:
{
  4015a0:	b480      	push	{r7}
  4015a2:	b083      	sub	sp, #12
  4015a4:	af00      	add	r7, sp, #0
  4015a6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4015a8:	687b      	ldr	r3, [r7, #4]
  4015aa:	2b07      	cmp	r3, #7
  4015ac:	d825      	bhi.n	4015fa <osc_get_rate+0x5a>
  4015ae:	a201      	add	r2, pc, #4	; (adr r2, 4015b4 <osc_get_rate+0x14>)
  4015b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4015b4:	004015d5 	.word	0x004015d5
  4015b8:	004015db 	.word	0x004015db
  4015bc:	004015e1 	.word	0x004015e1
  4015c0:	004015e7 	.word	0x004015e7
  4015c4:	004015eb 	.word	0x004015eb
  4015c8:	004015ef 	.word	0x004015ef
  4015cc:	004015f3 	.word	0x004015f3
  4015d0:	004015f7 	.word	0x004015f7
		return OSC_SLCK_32K_RC_HZ;
  4015d4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4015d8:	e010      	b.n	4015fc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4015da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4015de:	e00d      	b.n	4015fc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4015e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4015e4:	e00a      	b.n	4015fc <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4015e6:	4b08      	ldr	r3, [pc, #32]	; (401608 <osc_get_rate+0x68>)
  4015e8:	e008      	b.n	4015fc <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4015ea:	4b08      	ldr	r3, [pc, #32]	; (40160c <osc_get_rate+0x6c>)
  4015ec:	e006      	b.n	4015fc <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4015ee:	4b08      	ldr	r3, [pc, #32]	; (401610 <osc_get_rate+0x70>)
  4015f0:	e004      	b.n	4015fc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4015f2:	4b07      	ldr	r3, [pc, #28]	; (401610 <osc_get_rate+0x70>)
  4015f4:	e002      	b.n	4015fc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4015f6:	4b06      	ldr	r3, [pc, #24]	; (401610 <osc_get_rate+0x70>)
  4015f8:	e000      	b.n	4015fc <osc_get_rate+0x5c>
	return 0;
  4015fa:	2300      	movs	r3, #0
}
  4015fc:	4618      	mov	r0, r3
  4015fe:	370c      	adds	r7, #12
  401600:	46bd      	mov	sp, r7
  401602:	f85d 7b04 	ldr.w	r7, [sp], #4
  401606:	4770      	bx	lr
  401608:	003d0900 	.word	0x003d0900
  40160c:	007a1200 	.word	0x007a1200
  401610:	00b71b00 	.word	0x00b71b00

00401614 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401614:	b580      	push	{r7, lr}
  401616:	b082      	sub	sp, #8
  401618:	af00      	add	r7, sp, #0
  40161a:	4603      	mov	r3, r0
  40161c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40161e:	bf00      	nop
  401620:	79fb      	ldrb	r3, [r7, #7]
  401622:	4618      	mov	r0, r3
  401624:	4b05      	ldr	r3, [pc, #20]	; (40163c <osc_wait_ready+0x28>)
  401626:	4798      	blx	r3
  401628:	4603      	mov	r3, r0
  40162a:	f083 0301 	eor.w	r3, r3, #1
  40162e:	b2db      	uxtb	r3, r3
  401630:	2b00      	cmp	r3, #0
  401632:	d1f5      	bne.n	401620 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  401634:	bf00      	nop
  401636:	3708      	adds	r7, #8
  401638:	46bd      	mov	sp, r7
  40163a:	bd80      	pop	{r7, pc}
  40163c:	00401531 	.word	0x00401531

00401640 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  401640:	b580      	push	{r7, lr}
  401642:	b086      	sub	sp, #24
  401644:	af00      	add	r7, sp, #0
  401646:	60f8      	str	r0, [r7, #12]
  401648:	607a      	str	r2, [r7, #4]
  40164a:	603b      	str	r3, [r7, #0]
  40164c:	460b      	mov	r3, r1
  40164e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  401650:	687b      	ldr	r3, [r7, #4]
  401652:	2b00      	cmp	r3, #0
  401654:	d107      	bne.n	401666 <pll_config_init+0x26>
  401656:	683b      	ldr	r3, [r7, #0]
  401658:	2b00      	cmp	r3, #0
  40165a:	d104      	bne.n	401666 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  40165c:	68fb      	ldr	r3, [r7, #12]
  40165e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  401662:	601a      	str	r2, [r3, #0]
  401664:	e019      	b.n	40169a <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  401666:	7afb      	ldrb	r3, [r7, #11]
  401668:	4618      	mov	r0, r3
  40166a:	4b0e      	ldr	r3, [pc, #56]	; (4016a4 <pll_config_init+0x64>)
  40166c:	4798      	blx	r3
  40166e:	4602      	mov	r2, r0
  401670:	687b      	ldr	r3, [r7, #4]
  401672:	fbb2 f3f3 	udiv	r3, r2, r3
  401676:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  401678:	697b      	ldr	r3, [r7, #20]
  40167a:	683a      	ldr	r2, [r7, #0]
  40167c:	fb02 f303 	mul.w	r3, r2, r3
  401680:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  401682:	683b      	ldr	r3, [r7, #0]
  401684:	3b01      	subs	r3, #1
  401686:	041a      	lsls	r2, r3, #16
  401688:	4b07      	ldr	r3, [pc, #28]	; (4016a8 <pll_config_init+0x68>)
  40168a:	4013      	ands	r3, r2
  40168c:	687a      	ldr	r2, [r7, #4]
  40168e:	b2d2      	uxtb	r2, r2
  401690:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  401692:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  401696:	68fb      	ldr	r3, [r7, #12]
  401698:	601a      	str	r2, [r3, #0]
	}
}
  40169a:	bf00      	nop
  40169c:	3718      	adds	r7, #24
  40169e:	46bd      	mov	sp, r7
  4016a0:	bd80      	pop	{r7, pc}
  4016a2:	bf00      	nop
  4016a4:	004015a1 	.word	0x004015a1
  4016a8:	07ff0000 	.word	0x07ff0000

004016ac <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4016ac:	b580      	push	{r7, lr}
  4016ae:	b082      	sub	sp, #8
  4016b0:	af00      	add	r7, sp, #0
  4016b2:	6078      	str	r0, [r7, #4]
  4016b4:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4016b6:	683b      	ldr	r3, [r7, #0]
  4016b8:	2b00      	cmp	r3, #0
  4016ba:	d108      	bne.n	4016ce <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4016bc:	4b09      	ldr	r3, [pc, #36]	; (4016e4 <pll_enable+0x38>)
  4016be:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4016c0:	4a09      	ldr	r2, [pc, #36]	; (4016e8 <pll_enable+0x3c>)
  4016c2:	687b      	ldr	r3, [r7, #4]
  4016c4:	681b      	ldr	r3, [r3, #0]
  4016c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4016ca:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4016cc:	e005      	b.n	4016da <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4016ce:	4a06      	ldr	r2, [pc, #24]	; (4016e8 <pll_enable+0x3c>)
  4016d0:	687b      	ldr	r3, [r7, #4]
  4016d2:	681b      	ldr	r3, [r3, #0]
  4016d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4016d8:	61d3      	str	r3, [r2, #28]
}
  4016da:	bf00      	nop
  4016dc:	3708      	adds	r7, #8
  4016de:	46bd      	mov	sp, r7
  4016e0:	bd80      	pop	{r7, pc}
  4016e2:	bf00      	nop
  4016e4:	00402525 	.word	0x00402525
  4016e8:	400e0600 	.word	0x400e0600

004016ec <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4016ec:	b580      	push	{r7, lr}
  4016ee:	b082      	sub	sp, #8
  4016f0:	af00      	add	r7, sp, #0
  4016f2:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4016f4:	687b      	ldr	r3, [r7, #4]
  4016f6:	2b00      	cmp	r3, #0
  4016f8:	d103      	bne.n	401702 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4016fa:	4b05      	ldr	r3, [pc, #20]	; (401710 <pll_is_locked+0x24>)
  4016fc:	4798      	blx	r3
  4016fe:	4603      	mov	r3, r0
  401700:	e002      	b.n	401708 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  401702:	4b04      	ldr	r3, [pc, #16]	; (401714 <pll_is_locked+0x28>)
  401704:	4798      	blx	r3
  401706:	4603      	mov	r3, r0
	}
}
  401708:	4618      	mov	r0, r3
  40170a:	3708      	adds	r7, #8
  40170c:	46bd      	mov	sp, r7
  40170e:	bd80      	pop	{r7, pc}
  401710:	00402541 	.word	0x00402541
  401714:	0040255d 	.word	0x0040255d

00401718 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  401718:	b580      	push	{r7, lr}
  40171a:	b082      	sub	sp, #8
  40171c:	af00      	add	r7, sp, #0
  40171e:	4603      	mov	r3, r0
  401720:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  401722:	79fb      	ldrb	r3, [r7, #7]
  401724:	3b03      	subs	r3, #3
  401726:	2b04      	cmp	r3, #4
  401728:	d808      	bhi.n	40173c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40172a:	79fb      	ldrb	r3, [r7, #7]
  40172c:	4618      	mov	r0, r3
  40172e:	4b06      	ldr	r3, [pc, #24]	; (401748 <pll_enable_source+0x30>)
  401730:	4798      	blx	r3
		osc_wait_ready(e_src);
  401732:	79fb      	ldrb	r3, [r7, #7]
  401734:	4618      	mov	r0, r3
  401736:	4b05      	ldr	r3, [pc, #20]	; (40174c <pll_enable_source+0x34>)
  401738:	4798      	blx	r3
		break;
  40173a:	e000      	b.n	40173e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  40173c:	bf00      	nop
	}
}
  40173e:	bf00      	nop
  401740:	3708      	adds	r7, #8
  401742:	46bd      	mov	sp, r7
  401744:	bd80      	pop	{r7, pc}
  401746:	bf00      	nop
  401748:	004014a9 	.word	0x004014a9
  40174c:	00401615 	.word	0x00401615

00401750 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  401750:	b580      	push	{r7, lr}
  401752:	b082      	sub	sp, #8
  401754:	af00      	add	r7, sp, #0
  401756:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401758:	bf00      	nop
  40175a:	6878      	ldr	r0, [r7, #4]
  40175c:	4b04      	ldr	r3, [pc, #16]	; (401770 <pll_wait_for_lock+0x20>)
  40175e:	4798      	blx	r3
  401760:	4603      	mov	r3, r0
  401762:	2b00      	cmp	r3, #0
  401764:	d0f9      	beq.n	40175a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  401766:	2300      	movs	r3, #0
}
  401768:	4618      	mov	r0, r3
  40176a:	3708      	adds	r7, #8
  40176c:	46bd      	mov	sp, r7
  40176e:	bd80      	pop	{r7, pc}
  401770:	004016ed 	.word	0x004016ed

00401774 <sysclk_get_main_hz>:
{
  401774:	b580      	push	{r7, lr}
  401776:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401778:	2006      	movs	r0, #6
  40177a:	4b05      	ldr	r3, [pc, #20]	; (401790 <sysclk_get_main_hz+0x1c>)
  40177c:	4798      	blx	r3
  40177e:	4602      	mov	r2, r0
  401780:	4613      	mov	r3, r2
  401782:	009b      	lsls	r3, r3, #2
  401784:	4413      	add	r3, r2
  401786:	009a      	lsls	r2, r3, #2
  401788:	4413      	add	r3, r2
}
  40178a:	4618      	mov	r0, r3
  40178c:	bd80      	pop	{r7, pc}
  40178e:	bf00      	nop
  401790:	004015a1 	.word	0x004015a1

00401794 <sysclk_get_cpu_hz>:
{
  401794:	b580      	push	{r7, lr}
  401796:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401798:	4b02      	ldr	r3, [pc, #8]	; (4017a4 <sysclk_get_cpu_hz+0x10>)
  40179a:	4798      	blx	r3
  40179c:	4603      	mov	r3, r0
}
  40179e:	4618      	mov	r0, r3
  4017a0:	bd80      	pop	{r7, pc}
  4017a2:	bf00      	nop
  4017a4:	00401775 	.word	0x00401775

004017a8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4017a8:	b590      	push	{r4, r7, lr}
  4017aa:	b083      	sub	sp, #12
  4017ac:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4017ae:	4813      	ldr	r0, [pc, #76]	; (4017fc <sysclk_init+0x54>)
  4017b0:	4b13      	ldr	r3, [pc, #76]	; (401800 <sysclk_init+0x58>)
  4017b2:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4017b4:	2006      	movs	r0, #6
  4017b6:	4b13      	ldr	r3, [pc, #76]	; (401804 <sysclk_init+0x5c>)
  4017b8:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4017ba:	1d38      	adds	r0, r7, #4
  4017bc:	2319      	movs	r3, #25
  4017be:	2201      	movs	r2, #1
  4017c0:	2106      	movs	r1, #6
  4017c2:	4c11      	ldr	r4, [pc, #68]	; (401808 <sysclk_init+0x60>)
  4017c4:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4017c6:	1d3b      	adds	r3, r7, #4
  4017c8:	2100      	movs	r1, #0
  4017ca:	4618      	mov	r0, r3
  4017cc:	4b0f      	ldr	r3, [pc, #60]	; (40180c <sysclk_init+0x64>)
  4017ce:	4798      	blx	r3
		pll_wait_for_lock(0);
  4017d0:	2000      	movs	r0, #0
  4017d2:	4b0f      	ldr	r3, [pc, #60]	; (401810 <sysclk_init+0x68>)
  4017d4:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4017d6:	2002      	movs	r0, #2
  4017d8:	4b0e      	ldr	r3, [pc, #56]	; (401814 <sysclk_init+0x6c>)
  4017da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4017dc:	2000      	movs	r0, #0
  4017de:	4b0e      	ldr	r3, [pc, #56]	; (401818 <sysclk_init+0x70>)
  4017e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4017e2:	4b0e      	ldr	r3, [pc, #56]	; (40181c <sysclk_init+0x74>)
  4017e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4017e6:	4b0e      	ldr	r3, [pc, #56]	; (401820 <sysclk_init+0x78>)
  4017e8:	4798      	blx	r3
  4017ea:	4603      	mov	r3, r0
  4017ec:	4618      	mov	r0, r3
  4017ee:	4b04      	ldr	r3, [pc, #16]	; (401800 <sysclk_init+0x58>)
  4017f0:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4017f2:	bf00      	nop
  4017f4:	370c      	adds	r7, #12
  4017f6:	46bd      	mov	sp, r7
  4017f8:	bd90      	pop	{r4, r7, pc}
  4017fa:	bf00      	nop
  4017fc:	11e1a300 	.word	0x11e1a300
  401800:	004028a5 	.word	0x004028a5
  401804:	00401719 	.word	0x00401719
  401808:	00401641 	.word	0x00401641
  40180c:	004016ad 	.word	0x004016ad
  401810:	00401751 	.word	0x00401751
  401814:	004022b5 	.word	0x004022b5
  401818:	00402331 	.word	0x00402331
  40181c:	0040273d 	.word	0x0040273d
  401820:	00401795 	.word	0x00401795

00401824 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  401824:	b480      	push	{r7}
  401826:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  401828:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40182c:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401830:	4b09      	ldr	r3, [pc, #36]	; (401858 <SCB_EnableICache+0x34>)
  401832:	2200      	movs	r2, #0
  401834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  401838:	4a07      	ldr	r2, [pc, #28]	; (401858 <SCB_EnableICache+0x34>)
  40183a:	4b07      	ldr	r3, [pc, #28]	; (401858 <SCB_EnableICache+0x34>)
  40183c:	695b      	ldr	r3, [r3, #20]
  40183e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  401842:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb");
  401844:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401848:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  40184c:	bf00      	nop
  40184e:	46bd      	mov	sp, r7
  401850:	f85d 7b04 	ldr.w	r7, [sp], #4
  401854:	4770      	bx	lr
  401856:	bf00      	nop
  401858:	e000ed00 	.word	0xe000ed00

0040185c <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  40185c:	b480      	push	{r7}
  40185e:	b08b      	sub	sp, #44	; 0x2c
  401860:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  401862:	4b26      	ldr	r3, [pc, #152]	; (4018fc <SCB_EnableDCache+0xa0>)
  401864:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  401868:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  40186a:	69fb      	ldr	r3, [r7, #28]
  40186c:	0b5b      	lsrs	r3, r3, #13
  40186e:	f3c3 030e 	ubfx	r3, r3, #0, #15
  401872:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401874:	69fb      	ldr	r3, [r7, #28]
  401876:	f003 0307 	and.w	r3, r3, #7
  40187a:	3304      	adds	r3, #4
  40187c:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  40187e:	69fb      	ldr	r3, [r7, #28]
  401880:	08db      	lsrs	r3, r3, #3
  401882:	f3c3 0309 	ubfx	r3, r3, #0, #10
  401886:	617b      	str	r3, [r7, #20]
  401888:	697b      	ldr	r3, [r7, #20]
  40188a:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40188c:	68bb      	ldr	r3, [r7, #8]
  40188e:	fab3 f383 	clz	r3, r3
  401892:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  401894:	687b      	ldr	r3, [r7, #4]
  401896:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  401898:	f003 031f 	and.w	r3, r3, #31
  40189c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb");
  40189e:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  4018a2:	697b      	ldr	r3, [r7, #20]
  4018a4:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  4018a6:	6a3a      	ldr	r2, [r7, #32]
  4018a8:	693b      	ldr	r3, [r7, #16]
  4018aa:	fa02 f303 	lsl.w	r3, r2, r3
  4018ae:	4619      	mov	r1, r3
  4018b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4018b2:	69bb      	ldr	r3, [r7, #24]
  4018b4:	fa02 f303 	lsl.w	r3, r2, r3
  4018b8:	430b      	orrs	r3, r1
  4018ba:	60fb      	str	r3, [r7, #12]
              SCB->DCISW = sw;
  4018bc:	4a0f      	ldr	r2, [pc, #60]	; (4018fc <SCB_EnableDCache+0xa0>)
  4018be:	68fb      	ldr	r3, [r7, #12]
  4018c0:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  4018c4:	6a3b      	ldr	r3, [r7, #32]
  4018c6:	1e5a      	subs	r2, r3, #1
  4018c8:	623a      	str	r2, [r7, #32]
  4018ca:	2b00      	cmp	r3, #0
  4018cc:	d1eb      	bne.n	4018a6 <SCB_EnableDCache+0x4a>
        } while(sets--);
  4018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4018d0:	1e5a      	subs	r2, r3, #1
  4018d2:	627a      	str	r2, [r7, #36]	; 0x24
  4018d4:	2b00      	cmp	r3, #0
  4018d6:	d1e4      	bne.n	4018a2 <SCB_EnableDCache+0x46>
  4018d8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4018dc:	4a07      	ldr	r2, [pc, #28]	; (4018fc <SCB_EnableDCache+0xa0>)
  4018de:	4b07      	ldr	r3, [pc, #28]	; (4018fc <SCB_EnableDCache+0xa0>)
  4018e0:	695b      	ldr	r3, [r3, #20]
  4018e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4018e6:	6153      	str	r3, [r2, #20]
  4018e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4018ec:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  4018f0:	bf00      	nop
  4018f2:	372c      	adds	r7, #44	; 0x2c
  4018f4:	46bd      	mov	sp, r7
  4018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018fa:	4770      	bx	lr
  4018fc:	e000ed00 	.word	0xe000ed00

00401900 <sysclk_enable_peripheral_clock>:
{
  401900:	b580      	push	{r7, lr}
  401902:	b082      	sub	sp, #8
  401904:	af00      	add	r7, sp, #0
  401906:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401908:	6878      	ldr	r0, [r7, #4]
  40190a:	4b03      	ldr	r3, [pc, #12]	; (401918 <sysclk_enable_peripheral_clock+0x18>)
  40190c:	4798      	blx	r3
}
  40190e:	bf00      	nop
  401910:	3708      	adds	r7, #8
  401912:	46bd      	mov	sp, r7
  401914:	bd80      	pop	{r7, pc}
  401916:	bf00      	nop
  401918:	00402579 	.word	0x00402579

0040191c <ioport_init>:
{
  40191c:	b580      	push	{r7, lr}
  40191e:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  401920:	200a      	movs	r0, #10
  401922:	4b08      	ldr	r3, [pc, #32]	; (401944 <ioport_init+0x28>)
  401924:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  401926:	200b      	movs	r0, #11
  401928:	4b06      	ldr	r3, [pc, #24]	; (401944 <ioport_init+0x28>)
  40192a:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
  40192c:	200c      	movs	r0, #12
  40192e:	4b05      	ldr	r3, [pc, #20]	; (401944 <ioport_init+0x28>)
  401930:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
  401932:	2010      	movs	r0, #16
  401934:	4b03      	ldr	r3, [pc, #12]	; (401944 <ioport_init+0x28>)
  401936:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
  401938:	2011      	movs	r0, #17
  40193a:	4b02      	ldr	r3, [pc, #8]	; (401944 <ioport_init+0x28>)
  40193c:	4798      	blx	r3
}
  40193e:	bf00      	nop
  401940:	bd80      	pop	{r7, pc}
  401942:	bf00      	nop
  401944:	00401901 	.word	0x00401901

00401948 <ioport_set_pin_mode>:
{
  401948:	b480      	push	{r7}
  40194a:	b08d      	sub	sp, #52	; 0x34
  40194c:	af00      	add	r7, sp, #0
  40194e:	6078      	str	r0, [r7, #4]
  401950:	6039      	str	r1, [r7, #0]
  401952:	687b      	ldr	r3, [r7, #4]
  401954:	62fb      	str	r3, [r7, #44]	; 0x2c
  401956:	683b      	ldr	r3, [r7, #0]
  401958:	62bb      	str	r3, [r7, #40]	; 0x28
  40195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40195c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401960:	095a      	lsrs	r2, r3, #5
  401962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401964:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401966:	6a3b      	ldr	r3, [r7, #32]
  401968:	f003 031f 	and.w	r3, r3, #31
  40196c:	2101      	movs	r1, #1
  40196e:	fa01 f303 	lsl.w	r3, r1, r3
  401972:	61fa      	str	r2, [r7, #28]
  401974:	61bb      	str	r3, [r7, #24]
  401976:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401978:	617b      	str	r3, [r7, #20]
  40197a:	69fb      	ldr	r3, [r7, #28]
  40197c:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40197e:	693a      	ldr	r2, [r7, #16]
  401980:	4b37      	ldr	r3, [pc, #220]	; (401a60 <ioport_set_pin_mode+0x118>)
  401982:	4413      	add	r3, r2
  401984:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  401986:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  401988:	697b      	ldr	r3, [r7, #20]
  40198a:	f003 0308 	and.w	r3, r3, #8
  40198e:	2b00      	cmp	r3, #0
  401990:	d003      	beq.n	40199a <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  401992:	68fb      	ldr	r3, [r7, #12]
  401994:	69ba      	ldr	r2, [r7, #24]
  401996:	665a      	str	r2, [r3, #100]	; 0x64
  401998:	e002      	b.n	4019a0 <ioport_set_pin_mode+0x58>
		base->PIO_PUDR = mask;
  40199a:	68fb      	ldr	r3, [r7, #12]
  40199c:	69ba      	ldr	r2, [r7, #24]
  40199e:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  4019a0:	697b      	ldr	r3, [r7, #20]
  4019a2:	f003 0310 	and.w	r3, r3, #16
  4019a6:	2b00      	cmp	r3, #0
  4019a8:	d004      	beq.n	4019b4 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4019aa:	68fb      	ldr	r3, [r7, #12]
  4019ac:	69ba      	ldr	r2, [r7, #24]
  4019ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4019b2:	e003      	b.n	4019bc <ioport_set_pin_mode+0x74>
		base->PIO_PPDDR = mask;
  4019b4:	68fb      	ldr	r3, [r7, #12]
  4019b6:	69ba      	ldr	r2, [r7, #24]
  4019b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4019bc:	697b      	ldr	r3, [r7, #20]
  4019be:	f003 0320 	and.w	r3, r3, #32
  4019c2:	2b00      	cmp	r3, #0
  4019c4:	d003      	beq.n	4019ce <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  4019c6:	68fb      	ldr	r3, [r7, #12]
  4019c8:	69ba      	ldr	r2, [r7, #24]
  4019ca:	651a      	str	r2, [r3, #80]	; 0x50
  4019cc:	e002      	b.n	4019d4 <ioport_set_pin_mode+0x8c>
		base->PIO_MDDR = mask;
  4019ce:	68fb      	ldr	r3, [r7, #12]
  4019d0:	69ba      	ldr	r2, [r7, #24]
  4019d2:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4019d4:	697b      	ldr	r3, [r7, #20]
  4019d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4019da:	2b00      	cmp	r3, #0
  4019dc:	d003      	beq.n	4019e6 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  4019de:	68fb      	ldr	r3, [r7, #12]
  4019e0:	69ba      	ldr	r2, [r7, #24]
  4019e2:	621a      	str	r2, [r3, #32]
  4019e4:	e002      	b.n	4019ec <ioport_set_pin_mode+0xa4>
		base->PIO_IFDR = mask;
  4019e6:	68fb      	ldr	r3, [r7, #12]
  4019e8:	69ba      	ldr	r2, [r7, #24]
  4019ea:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  4019ec:	697b      	ldr	r3, [r7, #20]
  4019ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4019f2:	2b00      	cmp	r3, #0
  4019f4:	d004      	beq.n	401a00 <ioport_set_pin_mode+0xb8>
		base->PIO_IFSCER = mask;
  4019f6:	68fb      	ldr	r3, [r7, #12]
  4019f8:	69ba      	ldr	r2, [r7, #24]
  4019fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4019fe:	e003      	b.n	401a08 <ioport_set_pin_mode+0xc0>
		base->PIO_IFSCDR = mask;
  401a00:	68fb      	ldr	r3, [r7, #12]
  401a02:	69ba      	ldr	r2, [r7, #24]
  401a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401a08:	697b      	ldr	r3, [r7, #20]
  401a0a:	f003 0301 	and.w	r3, r3, #1
  401a0e:	2b00      	cmp	r3, #0
  401a10:	d006      	beq.n	401a20 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  401a12:	68fb      	ldr	r3, [r7, #12]
  401a14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401a16:	69bb      	ldr	r3, [r7, #24]
  401a18:	431a      	orrs	r2, r3
  401a1a:	68fb      	ldr	r3, [r7, #12]
  401a1c:	671a      	str	r2, [r3, #112]	; 0x70
  401a1e:	e006      	b.n	401a2e <ioport_set_pin_mode+0xe6>
		base->PIO_ABCDSR[0] &= ~mask;
  401a20:	68fb      	ldr	r3, [r7, #12]
  401a22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401a24:	69bb      	ldr	r3, [r7, #24]
  401a26:	43db      	mvns	r3, r3
  401a28:	401a      	ands	r2, r3
  401a2a:	68fb      	ldr	r3, [r7, #12]
  401a2c:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  401a2e:	697b      	ldr	r3, [r7, #20]
  401a30:	f003 0302 	and.w	r3, r3, #2
  401a34:	2b00      	cmp	r3, #0
  401a36:	d006      	beq.n	401a46 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  401a38:	68fb      	ldr	r3, [r7, #12]
  401a3a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401a3c:	69bb      	ldr	r3, [r7, #24]
  401a3e:	431a      	orrs	r2, r3
  401a40:	68fb      	ldr	r3, [r7, #12]
  401a42:	675a      	str	r2, [r3, #116]	; 0x74
}
  401a44:	e006      	b.n	401a54 <ioport_set_pin_mode+0x10c>
		base->PIO_ABCDSR[1] &= ~mask;
  401a46:	68fb      	ldr	r3, [r7, #12]
  401a48:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401a4a:	69bb      	ldr	r3, [r7, #24]
  401a4c:	43db      	mvns	r3, r3
  401a4e:	401a      	ands	r2, r3
  401a50:	68fb      	ldr	r3, [r7, #12]
  401a52:	675a      	str	r2, [r3, #116]	; 0x74
  401a54:	bf00      	nop
  401a56:	3734      	adds	r7, #52	; 0x34
  401a58:	46bd      	mov	sp, r7
  401a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a5e:	4770      	bx	lr
  401a60:	00200707 	.word	0x00200707

00401a64 <ioport_set_pin_dir>:
{
  401a64:	b480      	push	{r7}
  401a66:	b08d      	sub	sp, #52	; 0x34
  401a68:	af00      	add	r7, sp, #0
  401a6a:	6078      	str	r0, [r7, #4]
  401a6c:	460b      	mov	r3, r1
  401a6e:	70fb      	strb	r3, [r7, #3]
  401a70:	687b      	ldr	r3, [r7, #4]
  401a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  401a74:	78fb      	ldrb	r3, [r7, #3]
  401a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401a7c:	627b      	str	r3, [r7, #36]	; 0x24
  401a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401a80:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  401a82:	6a3b      	ldr	r3, [r7, #32]
  401a84:	095b      	lsrs	r3, r3, #5
  401a86:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401a88:	69fa      	ldr	r2, [r7, #28]
  401a8a:	4b17      	ldr	r3, [pc, #92]	; (401ae8 <ioport_set_pin_dir+0x84>)
  401a8c:	4413      	add	r3, r2
  401a8e:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401a90:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  401a92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401a96:	2b01      	cmp	r3, #1
  401a98:	d109      	bne.n	401aae <ioport_set_pin_dir+0x4a>
  401a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401a9c:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401a9e:	697b      	ldr	r3, [r7, #20]
  401aa0:	f003 031f 	and.w	r3, r3, #31
  401aa4:	2201      	movs	r2, #1
  401aa6:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401aa8:	69bb      	ldr	r3, [r7, #24]
  401aaa:	611a      	str	r2, [r3, #16]
  401aac:	e00c      	b.n	401ac8 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  401aae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401ab2:	2b00      	cmp	r3, #0
  401ab4:	d108      	bne.n	401ac8 <ioport_set_pin_dir+0x64>
  401ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401ab8:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401aba:	693b      	ldr	r3, [r7, #16]
  401abc:	f003 031f 	and.w	r3, r3, #31
  401ac0:	2201      	movs	r2, #1
  401ac2:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401ac4:	69bb      	ldr	r3, [r7, #24]
  401ac6:	615a      	str	r2, [r3, #20]
  401ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401aca:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401acc:	68fb      	ldr	r3, [r7, #12]
  401ace:	f003 031f 	and.w	r3, r3, #31
  401ad2:	2201      	movs	r2, #1
  401ad4:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401ad6:	69bb      	ldr	r3, [r7, #24]
  401ad8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  401adc:	bf00      	nop
  401ade:	3734      	adds	r7, #52	; 0x34
  401ae0:	46bd      	mov	sp, r7
  401ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ae6:	4770      	bx	lr
  401ae8:	00200707 	.word	0x00200707

00401aec <ioport_set_pin_level>:
{
  401aec:	b480      	push	{r7}
  401aee:	b08b      	sub	sp, #44	; 0x2c
  401af0:	af00      	add	r7, sp, #0
  401af2:	6078      	str	r0, [r7, #4]
  401af4:	460b      	mov	r3, r1
  401af6:	70fb      	strb	r3, [r7, #3]
  401af8:	687b      	ldr	r3, [r7, #4]
  401afa:	627b      	str	r3, [r7, #36]	; 0x24
  401afc:	78fb      	ldrb	r3, [r7, #3]
  401afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b04:	61fb      	str	r3, [r7, #28]
  401b06:	69fb      	ldr	r3, [r7, #28]
  401b08:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401b0a:	69bb      	ldr	r3, [r7, #24]
  401b0c:	095b      	lsrs	r3, r3, #5
  401b0e:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401b10:	697a      	ldr	r2, [r7, #20]
  401b12:	4b10      	ldr	r3, [pc, #64]	; (401b54 <ioport_set_pin_level+0x68>)
  401b14:	4413      	add	r3, r2
  401b16:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401b18:	613b      	str	r3, [r7, #16]
	if (level) {
  401b1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401b1e:	2b00      	cmp	r3, #0
  401b20:	d009      	beq.n	401b36 <ioport_set_pin_level+0x4a>
  401b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b24:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401b26:	68fb      	ldr	r3, [r7, #12]
  401b28:	f003 031f 	and.w	r3, r3, #31
  401b2c:	2201      	movs	r2, #1
  401b2e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401b30:	693b      	ldr	r3, [r7, #16]
  401b32:	631a      	str	r2, [r3, #48]	; 0x30
}
  401b34:	e008      	b.n	401b48 <ioport_set_pin_level+0x5c>
  401b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b38:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401b3a:	68bb      	ldr	r3, [r7, #8]
  401b3c:	f003 031f 	and.w	r3, r3, #31
  401b40:	2201      	movs	r2, #1
  401b42:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401b44:	693b      	ldr	r3, [r7, #16]
  401b46:	635a      	str	r2, [r3, #52]	; 0x34
  401b48:	bf00      	nop
  401b4a:	372c      	adds	r7, #44	; 0x2c
  401b4c:	46bd      	mov	sp, r7
  401b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b52:	4770      	bx	lr
  401b54:	00200707 	.word	0x00200707

00401b58 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  401b58:	b480      	push	{r7}
  401b5a:	b08d      	sub	sp, #52	; 0x34
  401b5c:	af00      	add	r7, sp, #0
  401b5e:	6078      	str	r0, [r7, #4]
  401b60:	460b      	mov	r3, r1
  401b62:	70fb      	strb	r3, [r7, #3]
  401b64:	687b      	ldr	r3, [r7, #4]
  401b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  401b68:	78fb      	ldrb	r3, [r7, #3]
  401b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b70:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  401b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b74:	095a      	lsrs	r2, r3, #5
  401b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b78:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401b7a:	6a3b      	ldr	r3, [r7, #32]
  401b7c:	f003 031f 	and.w	r3, r3, #31
  401b80:	2101      	movs	r1, #1
  401b82:	fa01 f303 	lsl.w	r3, r1, r3
  401b86:	61fa      	str	r2, [r7, #28]
  401b88:	61bb      	str	r3, [r7, #24]
  401b8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401b8e:	75fb      	strb	r3, [r7, #23]
  401b90:	69fb      	ldr	r3, [r7, #28]
  401b92:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401b94:	693a      	ldr	r2, [r7, #16]
  401b96:	4b23      	ldr	r3, [pc, #140]	; (401c24 <ioport_set_pin_sense_mode+0xcc>)
  401b98:	4413      	add	r3, r2
  401b9a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  401b9c:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  401b9e:	7dfb      	ldrb	r3, [r7, #23]
  401ba0:	3b01      	subs	r3, #1
  401ba2:	2b03      	cmp	r3, #3
  401ba4:	d82e      	bhi.n	401c04 <ioport_set_pin_sense_mode+0xac>
  401ba6:	a201      	add	r2, pc, #4	; (adr r2, 401bac <ioport_set_pin_sense_mode+0x54>)
  401ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401bac:	00401be1 	.word	0x00401be1
  401bb0:	00401bf3 	.word	0x00401bf3
  401bb4:	00401bbd 	.word	0x00401bbd
  401bb8:	00401bcf 	.word	0x00401bcf
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  401bbc:	68fb      	ldr	r3, [r7, #12]
  401bbe:	69ba      	ldr	r2, [r7, #24]
  401bc0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  401bc4:	68fb      	ldr	r3, [r7, #12]
  401bc6:	69ba      	ldr	r2, [r7, #24]
  401bc8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401bcc:	e01f      	b.n	401c0e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  401bce:	68fb      	ldr	r3, [r7, #12]
  401bd0:	69ba      	ldr	r2, [r7, #24]
  401bd2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  401bd6:	68fb      	ldr	r3, [r7, #12]
  401bd8:	69ba      	ldr	r2, [r7, #24]
  401bda:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401bde:	e016      	b.n	401c0e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  401be0:	68fb      	ldr	r3, [r7, #12]
  401be2:	69ba      	ldr	r2, [r7, #24]
  401be4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  401be8:	68fb      	ldr	r3, [r7, #12]
  401bea:	69ba      	ldr	r2, [r7, #24]
  401bec:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401bf0:	e00d      	b.n	401c0e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401bf2:	68fb      	ldr	r3, [r7, #12]
  401bf4:	69ba      	ldr	r2, [r7, #24]
  401bf6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401bfa:	68fb      	ldr	r3, [r7, #12]
  401bfc:	69ba      	ldr	r2, [r7, #24]
  401bfe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401c02:	e004      	b.n	401c0e <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  401c04:	68fb      	ldr	r3, [r7, #12]
  401c06:	69ba      	ldr	r2, [r7, #24]
  401c08:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  401c0c:	e003      	b.n	401c16 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  401c0e:	68fb      	ldr	r3, [r7, #12]
  401c10:	69ba      	ldr	r2, [r7, #24]
  401c12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  401c16:	bf00      	nop
  401c18:	3734      	adds	r7, #52	; 0x34
  401c1a:	46bd      	mov	sp, r7
  401c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c20:	4770      	bx	lr
  401c22:	bf00      	nop
  401c24:	00200707 	.word	0x00200707

00401c28 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  401c28:	b480      	push	{r7}
  401c2a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
  401c2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401c30:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401c34:	4a0c      	ldr	r2, [pc, #48]	; (401c68 <tcm_disable+0x40>)
  401c36:	4b0c      	ldr	r3, [pc, #48]	; (401c68 <tcm_disable+0x40>)
  401c38:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  401c3c:	f023 0301 	bic.w	r3, r3, #1
  401c40:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401c44:	4a08      	ldr	r2, [pc, #32]	; (401c68 <tcm_disable+0x40>)
  401c46:	4b08      	ldr	r3, [pc, #32]	; (401c68 <tcm_disable+0x40>)
  401c48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  401c4c:	f023 0301 	bic.w	r3, r3, #1
  401c50:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  401c54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401c58:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  401c5c:	bf00      	nop
  401c5e:	46bd      	mov	sp, r7
  401c60:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c64:	4770      	bx	lr
  401c66:	bf00      	nop
  401c68:	e000ed00 	.word	0xe000ed00

00401c6c <board_init>:
#endif

void board_init(void)
{
  401c6c:	b580      	push	{r7, lr}
  401c6e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401c70:	4b13      	ldr	r3, [pc, #76]	; (401cc0 <board_init+0x54>)
  401c72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401c76:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  401c78:	4b12      	ldr	r3, [pc, #72]	; (401cc4 <board_init+0x58>)
  401c7a:	4798      	blx	r3
	SCB_EnableDCache();
  401c7c:	4b12      	ldr	r3, [pc, #72]	; (401cc8 <board_init+0x5c>)
  401c7e:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401c80:	4b12      	ldr	r3, [pc, #72]	; (401ccc <board_init+0x60>)
  401c82:	4a13      	ldr	r2, [pc, #76]	; (401cd0 <board_init+0x64>)
  401c84:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401c86:	4b11      	ldr	r3, [pc, #68]	; (401ccc <board_init+0x60>)
  401c88:	4a12      	ldr	r2, [pc, #72]	; (401cd4 <board_init+0x68>)
  401c8a:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  401c8c:	4b12      	ldr	r3, [pc, #72]	; (401cd8 <board_init+0x6c>)
  401c8e:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  401c90:	4b12      	ldr	r3, [pc, #72]	; (401cdc <board_init+0x70>)
  401c92:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  401c94:	2101      	movs	r1, #1
  401c96:	2048      	movs	r0, #72	; 0x48
  401c98:	4b11      	ldr	r3, [pc, #68]	; (401ce0 <board_init+0x74>)
  401c9a:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  401c9c:	2101      	movs	r1, #1
  401c9e:	2048      	movs	r0, #72	; 0x48
  401ca0:	4b10      	ldr	r3, [pc, #64]	; (401ce4 <board_init+0x78>)
  401ca2:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  401ca4:	2100      	movs	r1, #0
  401ca6:	200b      	movs	r0, #11
  401ca8:	4b0d      	ldr	r3, [pc, #52]	; (401ce0 <board_init+0x74>)
  401caa:	4798      	blx	r3
  401cac:	2188      	movs	r1, #136	; 0x88
  401cae:	200b      	movs	r0, #11
  401cb0:	4b0d      	ldr	r3, [pc, #52]	; (401ce8 <board_init+0x7c>)
  401cb2:	4798      	blx	r3
  401cb4:	2102      	movs	r1, #2
  401cb6:	200b      	movs	r0, #11
  401cb8:	4b0c      	ldr	r3, [pc, #48]	; (401cec <board_init+0x80>)
  401cba:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  401cbc:	bf00      	nop
  401cbe:	bd80      	pop	{r7, pc}
  401cc0:	400e1850 	.word	0x400e1850
  401cc4:	00401825 	.word	0x00401825
  401cc8:	0040185d 	.word	0x0040185d
  401ccc:	400e0c00 	.word	0x400e0c00
  401cd0:	5a00080c 	.word	0x5a00080c
  401cd4:	5a00070c 	.word	0x5a00070c
  401cd8:	00401c29 	.word	0x00401c29
  401cdc:	0040191d 	.word	0x0040191d
  401ce0:	00401a65 	.word	0x00401a65
  401ce4:	00401aed 	.word	0x00401aed
  401ce8:	00401949 	.word	0x00401949
  401cec:	00401b59 	.word	0x00401b59

00401cf0 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401cf0:	b480      	push	{r7}
  401cf2:	b085      	sub	sp, #20
  401cf4:	af00      	add	r7, sp, #0
  401cf6:	60f8      	str	r0, [r7, #12]
  401cf8:	60b9      	str	r1, [r7, #8]
  401cfa:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401cfc:	687b      	ldr	r3, [r7, #4]
  401cfe:	2b00      	cmp	r3, #0
  401d00:	d003      	beq.n	401d0a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401d02:	68fb      	ldr	r3, [r7, #12]
  401d04:	68ba      	ldr	r2, [r7, #8]
  401d06:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401d08:	e002      	b.n	401d10 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401d0a:	68fb      	ldr	r3, [r7, #12]
  401d0c:	68ba      	ldr	r2, [r7, #8]
  401d0e:	661a      	str	r2, [r3, #96]	; 0x60
}
  401d10:	bf00      	nop
  401d12:	3714      	adds	r7, #20
  401d14:	46bd      	mov	sp, r7
  401d16:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d1a:	4770      	bx	lr

00401d1c <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  401d1c:	b480      	push	{r7}
  401d1e:	b083      	sub	sp, #12
  401d20:	af00      	add	r7, sp, #0
  401d22:	6078      	str	r0, [r7, #4]
  401d24:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  401d26:	687b      	ldr	r3, [r7, #4]
  401d28:	683a      	ldr	r2, [r7, #0]
  401d2a:	631a      	str	r2, [r3, #48]	; 0x30
}
  401d2c:	bf00      	nop
  401d2e:	370c      	adds	r7, #12
  401d30:	46bd      	mov	sp, r7
  401d32:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d36:	4770      	bx	lr

00401d38 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  401d38:	b480      	push	{r7}
  401d3a:	b083      	sub	sp, #12
  401d3c:	af00      	add	r7, sp, #0
  401d3e:	6078      	str	r0, [r7, #4]
  401d40:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  401d42:	687b      	ldr	r3, [r7, #4]
  401d44:	683a      	ldr	r2, [r7, #0]
  401d46:	635a      	str	r2, [r3, #52]	; 0x34
}
  401d48:	bf00      	nop
  401d4a:	370c      	adds	r7, #12
  401d4c:	46bd      	mov	sp, r7
  401d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d52:	4770      	bx	lr

00401d54 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401d54:	b480      	push	{r7}
  401d56:	b087      	sub	sp, #28
  401d58:	af00      	add	r7, sp, #0
  401d5a:	60f8      	str	r0, [r7, #12]
  401d5c:	60b9      	str	r1, [r7, #8]
  401d5e:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401d60:	68fb      	ldr	r3, [r7, #12]
  401d62:	687a      	ldr	r2, [r7, #4]
  401d64:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401d66:	68bb      	ldr	r3, [r7, #8]
  401d68:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401d6c:	d04a      	beq.n	401e04 <pio_set_peripheral+0xb0>
  401d6e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401d72:	d808      	bhi.n	401d86 <pio_set_peripheral+0x32>
  401d74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401d78:	d016      	beq.n	401da8 <pio_set_peripheral+0x54>
  401d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401d7e:	d02c      	beq.n	401dda <pio_set_peripheral+0x86>
  401d80:	2b00      	cmp	r3, #0
  401d82:	d069      	beq.n	401e58 <pio_set_peripheral+0x104>
  401d84:	e064      	b.n	401e50 <pio_set_peripheral+0xfc>
  401d86:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401d8a:	d065      	beq.n	401e58 <pio_set_peripheral+0x104>
  401d8c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401d90:	d803      	bhi.n	401d9a <pio_set_peripheral+0x46>
  401d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401d96:	d04a      	beq.n	401e2e <pio_set_peripheral+0xda>
  401d98:	e05a      	b.n	401e50 <pio_set_peripheral+0xfc>
  401d9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401d9e:	d05b      	beq.n	401e58 <pio_set_peripheral+0x104>
  401da0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401da4:	d058      	beq.n	401e58 <pio_set_peripheral+0x104>
  401da6:	e053      	b.n	401e50 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401da8:	68fb      	ldr	r3, [r7, #12]
  401daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401dac:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401dae:	68fb      	ldr	r3, [r7, #12]
  401db0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401db2:	687b      	ldr	r3, [r7, #4]
  401db4:	43d9      	mvns	r1, r3
  401db6:	697b      	ldr	r3, [r7, #20]
  401db8:	400b      	ands	r3, r1
  401dba:	401a      	ands	r2, r3
  401dbc:	68fb      	ldr	r3, [r7, #12]
  401dbe:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401dc0:	68fb      	ldr	r3, [r7, #12]
  401dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401dc4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401dc6:	68fb      	ldr	r3, [r7, #12]
  401dc8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401dca:	687b      	ldr	r3, [r7, #4]
  401dcc:	43d9      	mvns	r1, r3
  401dce:	697b      	ldr	r3, [r7, #20]
  401dd0:	400b      	ands	r3, r1
  401dd2:	401a      	ands	r2, r3
  401dd4:	68fb      	ldr	r3, [r7, #12]
  401dd6:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401dd8:	e03a      	b.n	401e50 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401dda:	68fb      	ldr	r3, [r7, #12]
  401ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401dde:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401de0:	687a      	ldr	r2, [r7, #4]
  401de2:	697b      	ldr	r3, [r7, #20]
  401de4:	431a      	orrs	r2, r3
  401de6:	68fb      	ldr	r3, [r7, #12]
  401de8:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401dea:	68fb      	ldr	r3, [r7, #12]
  401dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401dee:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401df0:	68fb      	ldr	r3, [r7, #12]
  401df2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401df4:	687b      	ldr	r3, [r7, #4]
  401df6:	43d9      	mvns	r1, r3
  401df8:	697b      	ldr	r3, [r7, #20]
  401dfa:	400b      	ands	r3, r1
  401dfc:	401a      	ands	r2, r3
  401dfe:	68fb      	ldr	r3, [r7, #12]
  401e00:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401e02:	e025      	b.n	401e50 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e04:	68fb      	ldr	r3, [r7, #12]
  401e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401e08:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401e0a:	68fb      	ldr	r3, [r7, #12]
  401e0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401e0e:	687b      	ldr	r3, [r7, #4]
  401e10:	43d9      	mvns	r1, r3
  401e12:	697b      	ldr	r3, [r7, #20]
  401e14:	400b      	ands	r3, r1
  401e16:	401a      	ands	r2, r3
  401e18:	68fb      	ldr	r3, [r7, #12]
  401e1a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401e1c:	68fb      	ldr	r3, [r7, #12]
  401e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401e20:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401e22:	687a      	ldr	r2, [r7, #4]
  401e24:	697b      	ldr	r3, [r7, #20]
  401e26:	431a      	orrs	r2, r3
  401e28:	68fb      	ldr	r3, [r7, #12]
  401e2a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401e2c:	e010      	b.n	401e50 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e2e:	68fb      	ldr	r3, [r7, #12]
  401e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401e32:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401e34:	687a      	ldr	r2, [r7, #4]
  401e36:	697b      	ldr	r3, [r7, #20]
  401e38:	431a      	orrs	r2, r3
  401e3a:	68fb      	ldr	r3, [r7, #12]
  401e3c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401e3e:	68fb      	ldr	r3, [r7, #12]
  401e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401e42:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401e44:	687a      	ldr	r2, [r7, #4]
  401e46:	697b      	ldr	r3, [r7, #20]
  401e48:	431a      	orrs	r2, r3
  401e4a:	68fb      	ldr	r3, [r7, #12]
  401e4c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401e4e:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401e50:	68fb      	ldr	r3, [r7, #12]
  401e52:	687a      	ldr	r2, [r7, #4]
  401e54:	605a      	str	r2, [r3, #4]
  401e56:	e000      	b.n	401e5a <pio_set_peripheral+0x106>
		return;
  401e58:	bf00      	nop
}
  401e5a:	371c      	adds	r7, #28
  401e5c:	46bd      	mov	sp, r7
  401e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e62:	4770      	bx	lr

00401e64 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401e64:	b580      	push	{r7, lr}
  401e66:	b084      	sub	sp, #16
  401e68:	af00      	add	r7, sp, #0
  401e6a:	60f8      	str	r0, [r7, #12]
  401e6c:	60b9      	str	r1, [r7, #8]
  401e6e:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401e70:	68b9      	ldr	r1, [r7, #8]
  401e72:	68f8      	ldr	r0, [r7, #12]
  401e74:	4b19      	ldr	r3, [pc, #100]	; (401edc <pio_set_input+0x78>)
  401e76:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401e78:	687b      	ldr	r3, [r7, #4]
  401e7a:	f003 0301 	and.w	r3, r3, #1
  401e7e:	461a      	mov	r2, r3
  401e80:	68b9      	ldr	r1, [r7, #8]
  401e82:	68f8      	ldr	r0, [r7, #12]
  401e84:	4b16      	ldr	r3, [pc, #88]	; (401ee0 <pio_set_input+0x7c>)
  401e86:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401e88:	687b      	ldr	r3, [r7, #4]
  401e8a:	f003 030a 	and.w	r3, r3, #10
  401e8e:	2b00      	cmp	r3, #0
  401e90:	d003      	beq.n	401e9a <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  401e92:	68fb      	ldr	r3, [r7, #12]
  401e94:	68ba      	ldr	r2, [r7, #8]
  401e96:	621a      	str	r2, [r3, #32]
  401e98:	e002      	b.n	401ea0 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401e9a:	68fb      	ldr	r3, [r7, #12]
  401e9c:	68ba      	ldr	r2, [r7, #8]
  401e9e:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401ea0:	687b      	ldr	r3, [r7, #4]
  401ea2:	f003 0302 	and.w	r3, r3, #2
  401ea6:	2b00      	cmp	r3, #0
  401ea8:	d004      	beq.n	401eb4 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  401eaa:	68fb      	ldr	r3, [r7, #12]
  401eac:	68ba      	ldr	r2, [r7, #8]
  401eae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401eb2:	e008      	b.n	401ec6 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401eb4:	687b      	ldr	r3, [r7, #4]
  401eb6:	f003 0308 	and.w	r3, r3, #8
  401eba:	2b00      	cmp	r3, #0
  401ebc:	d003      	beq.n	401ec6 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401ebe:	68fb      	ldr	r3, [r7, #12]
  401ec0:	68ba      	ldr	r2, [r7, #8]
  401ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401ec6:	68fb      	ldr	r3, [r7, #12]
  401ec8:	68ba      	ldr	r2, [r7, #8]
  401eca:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401ecc:	68fb      	ldr	r3, [r7, #12]
  401ece:	68ba      	ldr	r2, [r7, #8]
  401ed0:	601a      	str	r2, [r3, #0]
}
  401ed2:	bf00      	nop
  401ed4:	3710      	adds	r7, #16
  401ed6:	46bd      	mov	sp, r7
  401ed8:	bd80      	pop	{r7, pc}
  401eda:	bf00      	nop
  401edc:	0040209d 	.word	0x0040209d
  401ee0:	00401cf1 	.word	0x00401cf1

00401ee4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401ee4:	b580      	push	{r7, lr}
  401ee6:	b084      	sub	sp, #16
  401ee8:	af00      	add	r7, sp, #0
  401eea:	60f8      	str	r0, [r7, #12]
  401eec:	60b9      	str	r1, [r7, #8]
  401eee:	607a      	str	r2, [r7, #4]
  401ef0:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  401ef2:	68b9      	ldr	r1, [r7, #8]
  401ef4:	68f8      	ldr	r0, [r7, #12]
  401ef6:	4b12      	ldr	r3, [pc, #72]	; (401f40 <pio_set_output+0x5c>)
  401ef8:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  401efa:	69ba      	ldr	r2, [r7, #24]
  401efc:	68b9      	ldr	r1, [r7, #8]
  401efe:	68f8      	ldr	r0, [r7, #12]
  401f00:	4b10      	ldr	r3, [pc, #64]	; (401f44 <pio_set_output+0x60>)
  401f02:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401f04:	683b      	ldr	r3, [r7, #0]
  401f06:	2b00      	cmp	r3, #0
  401f08:	d003      	beq.n	401f12 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401f0a:	68fb      	ldr	r3, [r7, #12]
  401f0c:	68ba      	ldr	r2, [r7, #8]
  401f0e:	651a      	str	r2, [r3, #80]	; 0x50
  401f10:	e002      	b.n	401f18 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401f12:	68fb      	ldr	r3, [r7, #12]
  401f14:	68ba      	ldr	r2, [r7, #8]
  401f16:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401f18:	687b      	ldr	r3, [r7, #4]
  401f1a:	2b00      	cmp	r3, #0
  401f1c:	d003      	beq.n	401f26 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401f1e:	68fb      	ldr	r3, [r7, #12]
  401f20:	68ba      	ldr	r2, [r7, #8]
  401f22:	631a      	str	r2, [r3, #48]	; 0x30
  401f24:	e002      	b.n	401f2c <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401f26:	68fb      	ldr	r3, [r7, #12]
  401f28:	68ba      	ldr	r2, [r7, #8]
  401f2a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401f2c:	68fb      	ldr	r3, [r7, #12]
  401f2e:	68ba      	ldr	r2, [r7, #8]
  401f30:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401f32:	68fb      	ldr	r3, [r7, #12]
  401f34:	68ba      	ldr	r2, [r7, #8]
  401f36:	601a      	str	r2, [r3, #0]
}
  401f38:	bf00      	nop
  401f3a:	3710      	adds	r7, #16
  401f3c:	46bd      	mov	sp, r7
  401f3e:	bd80      	pop	{r7, pc}
  401f40:	0040209d 	.word	0x0040209d
  401f44:	00401cf1 	.word	0x00401cf1

00401f48 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  401f48:	b590      	push	{r4, r7, lr}
  401f4a:	b087      	sub	sp, #28
  401f4c:	af02      	add	r7, sp, #8
  401f4e:	60f8      	str	r0, [r7, #12]
  401f50:	60b9      	str	r1, [r7, #8]
  401f52:	607a      	str	r2, [r7, #4]
  401f54:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  401f56:	68bb      	ldr	r3, [r7, #8]
  401f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401f5c:	d016      	beq.n	401f8c <pio_configure+0x44>
  401f5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401f62:	d809      	bhi.n	401f78 <pio_configure+0x30>
  401f64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401f68:	d010      	beq.n	401f8c <pio_configure+0x44>
  401f6a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401f6e:	d00d      	beq.n	401f8c <pio_configure+0x44>
  401f70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401f74:	d00a      	beq.n	401f8c <pio_configure+0x44>
  401f76:	e03d      	b.n	401ff4 <pio_configure+0xac>
  401f78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401f7c:	d01a      	beq.n	401fb4 <pio_configure+0x6c>
  401f7e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401f82:	d017      	beq.n	401fb4 <pio_configure+0x6c>
  401f84:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401f88:	d00e      	beq.n	401fa8 <pio_configure+0x60>
  401f8a:	e033      	b.n	401ff4 <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  401f8c:	687a      	ldr	r2, [r7, #4]
  401f8e:	68b9      	ldr	r1, [r7, #8]
  401f90:	68f8      	ldr	r0, [r7, #12]
  401f92:	4b1c      	ldr	r3, [pc, #112]	; (402004 <pio_configure+0xbc>)
  401f94:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  401f96:	683b      	ldr	r3, [r7, #0]
  401f98:	f003 0301 	and.w	r3, r3, #1
  401f9c:	461a      	mov	r2, r3
  401f9e:	6879      	ldr	r1, [r7, #4]
  401fa0:	68f8      	ldr	r0, [r7, #12]
  401fa2:	4b19      	ldr	r3, [pc, #100]	; (402008 <pio_configure+0xc0>)
  401fa4:	4798      	blx	r3
		break;
  401fa6:	e027      	b.n	401ff8 <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401fa8:	683a      	ldr	r2, [r7, #0]
  401faa:	6879      	ldr	r1, [r7, #4]
  401fac:	68f8      	ldr	r0, [r7, #12]
  401fae:	4b17      	ldr	r3, [pc, #92]	; (40200c <pio_configure+0xc4>)
  401fb0:	4798      	blx	r3
		break;
  401fb2:	e021      	b.n	401ff8 <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401fb4:	68bb      	ldr	r3, [r7, #8]
  401fb6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401fba:	bf0c      	ite	eq
  401fbc:	2301      	moveq	r3, #1
  401fbe:	2300      	movne	r3, #0
  401fc0:	b2db      	uxtb	r3, r3
  401fc2:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  401fc4:	683b      	ldr	r3, [r7, #0]
  401fc6:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401fca:	2b00      	cmp	r3, #0
  401fcc:	bf14      	ite	ne
  401fce:	2301      	movne	r3, #1
  401fd0:	2300      	moveq	r3, #0
  401fd2:	b2db      	uxtb	r3, r3
  401fd4:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  401fd6:	683b      	ldr	r3, [r7, #0]
  401fd8:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401fdc:	2b00      	cmp	r3, #0
  401fde:	bf14      	ite	ne
  401fe0:	2301      	movne	r3, #1
  401fe2:	2300      	moveq	r3, #0
  401fe4:	b2db      	uxtb	r3, r3
  401fe6:	9300      	str	r3, [sp, #0]
  401fe8:	460b      	mov	r3, r1
  401fea:	6879      	ldr	r1, [r7, #4]
  401fec:	68f8      	ldr	r0, [r7, #12]
  401fee:	4c08      	ldr	r4, [pc, #32]	; (402010 <pio_configure+0xc8>)
  401ff0:	47a0      	blx	r4
		break;
  401ff2:	e001      	b.n	401ff8 <pio_configure+0xb0>

	default:
		return 0;
  401ff4:	2300      	movs	r3, #0
  401ff6:	e000      	b.n	401ffa <pio_configure+0xb2>
	}

	return 1;
  401ff8:	2301      	movs	r3, #1
}
  401ffa:	4618      	mov	r0, r3
  401ffc:	3714      	adds	r7, #20
  401ffe:	46bd      	mov	sp, r7
  402000:	bd90      	pop	{r4, r7, pc}
  402002:	bf00      	nop
  402004:	00401d55 	.word	0x00401d55
  402008:	00401cf1 	.word	0x00401cf1
  40200c:	00401e65 	.word	0x00401e65
  402010:	00401ee5 	.word	0x00401ee5

00402014 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  402014:	b480      	push	{r7}
  402016:	b085      	sub	sp, #20
  402018:	af00      	add	r7, sp, #0
  40201a:	60f8      	str	r0, [r7, #12]
  40201c:	60b9      	str	r1, [r7, #8]
  40201e:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  402020:	687b      	ldr	r3, [r7, #4]
  402022:	f003 0310 	and.w	r3, r3, #16
  402026:	2b00      	cmp	r3, #0
  402028:	d020      	beq.n	40206c <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40202a:	68fb      	ldr	r3, [r7, #12]
  40202c:	68ba      	ldr	r2, [r7, #8]
  40202e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  402032:	687b      	ldr	r3, [r7, #4]
  402034:	f003 0320 	and.w	r3, r3, #32
  402038:	2b00      	cmp	r3, #0
  40203a:	d004      	beq.n	402046 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40203c:	68fb      	ldr	r3, [r7, #12]
  40203e:	68ba      	ldr	r2, [r7, #8]
  402040:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  402044:	e003      	b.n	40204e <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  402046:	68fb      	ldr	r3, [r7, #12]
  402048:	68ba      	ldr	r2, [r7, #8]
  40204a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40204e:	687b      	ldr	r3, [r7, #4]
  402050:	f003 0340 	and.w	r3, r3, #64	; 0x40
  402054:	2b00      	cmp	r3, #0
  402056:	d004      	beq.n	402062 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  402058:	68fb      	ldr	r3, [r7, #12]
  40205a:	68ba      	ldr	r2, [r7, #8]
  40205c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  402060:	e008      	b.n	402074 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  402062:	68fb      	ldr	r3, [r7, #12]
  402064:	68ba      	ldr	r2, [r7, #8]
  402066:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  40206a:	e003      	b.n	402074 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  40206c:	68fb      	ldr	r3, [r7, #12]
  40206e:	68ba      	ldr	r2, [r7, #8]
  402070:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  402074:	bf00      	nop
  402076:	3714      	adds	r7, #20
  402078:	46bd      	mov	sp, r7
  40207a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40207e:	4770      	bx	lr

00402080 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  402080:	b480      	push	{r7}
  402082:	b083      	sub	sp, #12
  402084:	af00      	add	r7, sp, #0
  402086:	6078      	str	r0, [r7, #4]
  402088:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  40208a:	687b      	ldr	r3, [r7, #4]
  40208c:	683a      	ldr	r2, [r7, #0]
  40208e:	641a      	str	r2, [r3, #64]	; 0x40
}
  402090:	bf00      	nop
  402092:	370c      	adds	r7, #12
  402094:	46bd      	mov	sp, r7
  402096:	f85d 7b04 	ldr.w	r7, [sp], #4
  40209a:	4770      	bx	lr

0040209c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40209c:	b480      	push	{r7}
  40209e:	b083      	sub	sp, #12
  4020a0:	af00      	add	r7, sp, #0
  4020a2:	6078      	str	r0, [r7, #4]
  4020a4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4020a6:	687b      	ldr	r3, [r7, #4]
  4020a8:	683a      	ldr	r2, [r7, #0]
  4020aa:	645a      	str	r2, [r3, #68]	; 0x44
}
  4020ac:	bf00      	nop
  4020ae:	370c      	adds	r7, #12
  4020b0:	46bd      	mov	sp, r7
  4020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020b6:	4770      	bx	lr

004020b8 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4020b8:	b480      	push	{r7}
  4020ba:	b083      	sub	sp, #12
  4020bc:	af00      	add	r7, sp, #0
  4020be:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4020c0:	687b      	ldr	r3, [r7, #4]
  4020c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4020c4:	4618      	mov	r0, r3
  4020c6:	370c      	adds	r7, #12
  4020c8:	46bd      	mov	sp, r7
  4020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020ce:	4770      	bx	lr

004020d0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4020d0:	b480      	push	{r7}
  4020d2:	b083      	sub	sp, #12
  4020d4:	af00      	add	r7, sp, #0
  4020d6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4020d8:	687b      	ldr	r3, [r7, #4]
  4020da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4020dc:	4618      	mov	r0, r3
  4020de:	370c      	adds	r7, #12
  4020e0:	46bd      	mov	sp, r7
  4020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020e6:	4770      	bx	lr

004020e8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4020e8:	b580      	push	{r7, lr}
  4020ea:	b084      	sub	sp, #16
  4020ec:	af00      	add	r7, sp, #0
  4020ee:	6078      	str	r0, [r7, #4]
  4020f0:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4020f2:	6878      	ldr	r0, [r7, #4]
  4020f4:	4b26      	ldr	r3, [pc, #152]	; (402190 <pio_handler_process+0xa8>)
  4020f6:	4798      	blx	r3
  4020f8:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4020fa:	6878      	ldr	r0, [r7, #4]
  4020fc:	4b25      	ldr	r3, [pc, #148]	; (402194 <pio_handler_process+0xac>)
  4020fe:	4798      	blx	r3
  402100:	4602      	mov	r2, r0
  402102:	68fb      	ldr	r3, [r7, #12]
  402104:	4013      	ands	r3, r2
  402106:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  402108:	68fb      	ldr	r3, [r7, #12]
  40210a:	2b00      	cmp	r3, #0
  40210c:	d03c      	beq.n	402188 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40210e:	2300      	movs	r3, #0
  402110:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  402112:	e034      	b.n	40217e <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  402114:	4a20      	ldr	r2, [pc, #128]	; (402198 <pio_handler_process+0xb0>)
  402116:	68bb      	ldr	r3, [r7, #8]
  402118:	011b      	lsls	r3, r3, #4
  40211a:	4413      	add	r3, r2
  40211c:	681a      	ldr	r2, [r3, #0]
  40211e:	683b      	ldr	r3, [r7, #0]
  402120:	429a      	cmp	r2, r3
  402122:	d126      	bne.n	402172 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402124:	4a1c      	ldr	r2, [pc, #112]	; (402198 <pio_handler_process+0xb0>)
  402126:	68bb      	ldr	r3, [r7, #8]
  402128:	011b      	lsls	r3, r3, #4
  40212a:	4413      	add	r3, r2
  40212c:	3304      	adds	r3, #4
  40212e:	681a      	ldr	r2, [r3, #0]
  402130:	68fb      	ldr	r3, [r7, #12]
  402132:	4013      	ands	r3, r2
  402134:	2b00      	cmp	r3, #0
  402136:	d01c      	beq.n	402172 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402138:	4a17      	ldr	r2, [pc, #92]	; (402198 <pio_handler_process+0xb0>)
  40213a:	68bb      	ldr	r3, [r7, #8]
  40213c:	011b      	lsls	r3, r3, #4
  40213e:	4413      	add	r3, r2
  402140:	330c      	adds	r3, #12
  402142:	681b      	ldr	r3, [r3, #0]
  402144:	4914      	ldr	r1, [pc, #80]	; (402198 <pio_handler_process+0xb0>)
  402146:	68ba      	ldr	r2, [r7, #8]
  402148:	0112      	lsls	r2, r2, #4
  40214a:	440a      	add	r2, r1
  40214c:	6810      	ldr	r0, [r2, #0]
  40214e:	4912      	ldr	r1, [pc, #72]	; (402198 <pio_handler_process+0xb0>)
  402150:	68ba      	ldr	r2, [r7, #8]
  402152:	0112      	lsls	r2, r2, #4
  402154:	440a      	add	r2, r1
  402156:	3204      	adds	r2, #4
  402158:	6812      	ldr	r2, [r2, #0]
  40215a:	4611      	mov	r1, r2
  40215c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40215e:	4a0e      	ldr	r2, [pc, #56]	; (402198 <pio_handler_process+0xb0>)
  402160:	68bb      	ldr	r3, [r7, #8]
  402162:	011b      	lsls	r3, r3, #4
  402164:	4413      	add	r3, r2
  402166:	3304      	adds	r3, #4
  402168:	681b      	ldr	r3, [r3, #0]
  40216a:	43db      	mvns	r3, r3
  40216c:	68fa      	ldr	r2, [r7, #12]
  40216e:	4013      	ands	r3, r2
  402170:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  402172:	68bb      	ldr	r3, [r7, #8]
  402174:	3301      	adds	r3, #1
  402176:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  402178:	68bb      	ldr	r3, [r7, #8]
  40217a:	2b06      	cmp	r3, #6
  40217c:	d803      	bhi.n	402186 <pio_handler_process+0x9e>
		while (status != 0) {
  40217e:	68fb      	ldr	r3, [r7, #12]
  402180:	2b00      	cmp	r3, #0
  402182:	d1c7      	bne.n	402114 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  402184:	e000      	b.n	402188 <pio_handler_process+0xa0>
				break;
  402186:	bf00      	nop
}
  402188:	bf00      	nop
  40218a:	3710      	adds	r7, #16
  40218c:	46bd      	mov	sp, r7
  40218e:	bd80      	pop	{r7, pc}
  402190:	004020b9 	.word	0x004020b9
  402194:	004020d1 	.word	0x004020d1
  402198:	20400bf4 	.word	0x20400bf4

0040219c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40219c:	b580      	push	{r7, lr}
  40219e:	b086      	sub	sp, #24
  4021a0:	af00      	add	r7, sp, #0
  4021a2:	60f8      	str	r0, [r7, #12]
  4021a4:	60b9      	str	r1, [r7, #8]
  4021a6:	607a      	str	r2, [r7, #4]
  4021a8:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4021aa:	4b21      	ldr	r3, [pc, #132]	; (402230 <pio_handler_set+0x94>)
  4021ac:	681b      	ldr	r3, [r3, #0]
  4021ae:	2b06      	cmp	r3, #6
  4021b0:	d901      	bls.n	4021b6 <pio_handler_set+0x1a>
		return 1;
  4021b2:	2301      	movs	r3, #1
  4021b4:	e038      	b.n	402228 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4021b6:	2300      	movs	r3, #0
  4021b8:	75fb      	strb	r3, [r7, #23]
  4021ba:	e011      	b.n	4021e0 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  4021bc:	7dfb      	ldrb	r3, [r7, #23]
  4021be:	011b      	lsls	r3, r3, #4
  4021c0:	4a1c      	ldr	r2, [pc, #112]	; (402234 <pio_handler_set+0x98>)
  4021c2:	4413      	add	r3, r2
  4021c4:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4021c6:	693b      	ldr	r3, [r7, #16]
  4021c8:	681a      	ldr	r2, [r3, #0]
  4021ca:	68bb      	ldr	r3, [r7, #8]
  4021cc:	429a      	cmp	r2, r3
  4021ce:	d104      	bne.n	4021da <pio_handler_set+0x3e>
  4021d0:	693b      	ldr	r3, [r7, #16]
  4021d2:	685a      	ldr	r2, [r3, #4]
  4021d4:	687b      	ldr	r3, [r7, #4]
  4021d6:	429a      	cmp	r2, r3
  4021d8:	d008      	beq.n	4021ec <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4021da:	7dfb      	ldrb	r3, [r7, #23]
  4021dc:	3301      	adds	r3, #1
  4021de:	75fb      	strb	r3, [r7, #23]
  4021e0:	7dfa      	ldrb	r2, [r7, #23]
  4021e2:	4b13      	ldr	r3, [pc, #76]	; (402230 <pio_handler_set+0x94>)
  4021e4:	681b      	ldr	r3, [r3, #0]
  4021e6:	429a      	cmp	r2, r3
  4021e8:	d9e8      	bls.n	4021bc <pio_handler_set+0x20>
  4021ea:	e000      	b.n	4021ee <pio_handler_set+0x52>
			break;
  4021ec:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4021ee:	693b      	ldr	r3, [r7, #16]
  4021f0:	68ba      	ldr	r2, [r7, #8]
  4021f2:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  4021f4:	693b      	ldr	r3, [r7, #16]
  4021f6:	687a      	ldr	r2, [r7, #4]
  4021f8:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  4021fa:	693b      	ldr	r3, [r7, #16]
  4021fc:	683a      	ldr	r2, [r7, #0]
  4021fe:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  402200:	693b      	ldr	r3, [r7, #16]
  402202:	6a3a      	ldr	r2, [r7, #32]
  402204:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  402206:	7dfa      	ldrb	r2, [r7, #23]
  402208:	4b09      	ldr	r3, [pc, #36]	; (402230 <pio_handler_set+0x94>)
  40220a:	681b      	ldr	r3, [r3, #0]
  40220c:	3301      	adds	r3, #1
  40220e:	429a      	cmp	r2, r3
  402210:	d104      	bne.n	40221c <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  402212:	4b07      	ldr	r3, [pc, #28]	; (402230 <pio_handler_set+0x94>)
  402214:	681b      	ldr	r3, [r3, #0]
  402216:	3301      	adds	r3, #1
  402218:	4a05      	ldr	r2, [pc, #20]	; (402230 <pio_handler_set+0x94>)
  40221a:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40221c:	683a      	ldr	r2, [r7, #0]
  40221e:	6879      	ldr	r1, [r7, #4]
  402220:	68f8      	ldr	r0, [r7, #12]
  402222:	4b05      	ldr	r3, [pc, #20]	; (402238 <pio_handler_set+0x9c>)
  402224:	4798      	blx	r3

	return 0;
  402226:	2300      	movs	r3, #0
}
  402228:	4618      	mov	r0, r3
  40222a:	3718      	adds	r7, #24
  40222c:	46bd      	mov	sp, r7
  40222e:	bd80      	pop	{r7, pc}
  402230:	20400c64 	.word	0x20400c64
  402234:	20400bf4 	.word	0x20400bf4
  402238:	00402015 	.word	0x00402015

0040223c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40223c:	b580      	push	{r7, lr}
  40223e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  402240:	210a      	movs	r1, #10
  402242:	4802      	ldr	r0, [pc, #8]	; (40224c <PIOA_Handler+0x10>)
  402244:	4b02      	ldr	r3, [pc, #8]	; (402250 <PIOA_Handler+0x14>)
  402246:	4798      	blx	r3
}
  402248:	bf00      	nop
  40224a:	bd80      	pop	{r7, pc}
  40224c:	400e0e00 	.word	0x400e0e00
  402250:	004020e9 	.word	0x004020e9

00402254 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402254:	b580      	push	{r7, lr}
  402256:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  402258:	210b      	movs	r1, #11
  40225a:	4802      	ldr	r0, [pc, #8]	; (402264 <PIOB_Handler+0x10>)
  40225c:	4b02      	ldr	r3, [pc, #8]	; (402268 <PIOB_Handler+0x14>)
  40225e:	4798      	blx	r3
}
  402260:	bf00      	nop
  402262:	bd80      	pop	{r7, pc}
  402264:	400e1000 	.word	0x400e1000
  402268:	004020e9 	.word	0x004020e9

0040226c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40226c:	b580      	push	{r7, lr}
  40226e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  402270:	210c      	movs	r1, #12
  402272:	4802      	ldr	r0, [pc, #8]	; (40227c <PIOC_Handler+0x10>)
  402274:	4b02      	ldr	r3, [pc, #8]	; (402280 <PIOC_Handler+0x14>)
  402276:	4798      	blx	r3
}
  402278:	bf00      	nop
  40227a:	bd80      	pop	{r7, pc}
  40227c:	400e1200 	.word	0x400e1200
  402280:	004020e9 	.word	0x004020e9

00402284 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  402284:	b580      	push	{r7, lr}
  402286:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  402288:	2110      	movs	r1, #16
  40228a:	4802      	ldr	r0, [pc, #8]	; (402294 <PIOD_Handler+0x10>)
  40228c:	4b02      	ldr	r3, [pc, #8]	; (402298 <PIOD_Handler+0x14>)
  40228e:	4798      	blx	r3
}
  402290:	bf00      	nop
  402292:	bd80      	pop	{r7, pc}
  402294:	400e1400 	.word	0x400e1400
  402298:	004020e9 	.word	0x004020e9

0040229c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40229c:	b580      	push	{r7, lr}
  40229e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  4022a0:	2111      	movs	r1, #17
  4022a2:	4802      	ldr	r0, [pc, #8]	; (4022ac <PIOE_Handler+0x10>)
  4022a4:	4b02      	ldr	r3, [pc, #8]	; (4022b0 <PIOE_Handler+0x14>)
  4022a6:	4798      	blx	r3
}
  4022a8:	bf00      	nop
  4022aa:	bd80      	pop	{r7, pc}
  4022ac:	400e1600 	.word	0x400e1600
  4022b0:	004020e9 	.word	0x004020e9

004022b4 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4022b4:	b480      	push	{r7}
  4022b6:	b083      	sub	sp, #12
  4022b8:	af00      	add	r7, sp, #0
  4022ba:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  4022bc:	687b      	ldr	r3, [r7, #4]
  4022be:	3b01      	subs	r3, #1
  4022c0:	2b03      	cmp	r3, #3
  4022c2:	d81a      	bhi.n	4022fa <pmc_mck_set_division+0x46>
  4022c4:	a201      	add	r2, pc, #4	; (adr r2, 4022cc <pmc_mck_set_division+0x18>)
  4022c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4022ca:	bf00      	nop
  4022cc:	004022dd 	.word	0x004022dd
  4022d0:	004022e3 	.word	0x004022e3
  4022d4:	004022eb 	.word	0x004022eb
  4022d8:	004022f3 	.word	0x004022f3
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4022dc:	2300      	movs	r3, #0
  4022de:	607b      	str	r3, [r7, #4]
			break;
  4022e0:	e00e      	b.n	402300 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  4022e2:	f44f 7380 	mov.w	r3, #256	; 0x100
  4022e6:	607b      	str	r3, [r7, #4]
			break;
  4022e8:	e00a      	b.n	402300 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4022ea:	f44f 7340 	mov.w	r3, #768	; 0x300
  4022ee:	607b      	str	r3, [r7, #4]
			break;
  4022f0:	e006      	b.n	402300 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4022f2:	f44f 7300 	mov.w	r3, #512	; 0x200
  4022f6:	607b      	str	r3, [r7, #4]
			break;
  4022f8:	e002      	b.n	402300 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4022fa:	2300      	movs	r3, #0
  4022fc:	607b      	str	r3, [r7, #4]
			break;
  4022fe:	bf00      	nop
	}
	PMC->PMC_MCKR =
  402300:	490a      	ldr	r1, [pc, #40]	; (40232c <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  402302:	4b0a      	ldr	r3, [pc, #40]	; (40232c <pmc_mck_set_division+0x78>)
  402304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402306:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  40230a:	687b      	ldr	r3, [r7, #4]
  40230c:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  40230e:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402310:	bf00      	nop
  402312:	4b06      	ldr	r3, [pc, #24]	; (40232c <pmc_mck_set_division+0x78>)
  402314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402316:	f003 0308 	and.w	r3, r3, #8
  40231a:	2b00      	cmp	r3, #0
  40231c:	d0f9      	beq.n	402312 <pmc_mck_set_division+0x5e>
}
  40231e:	bf00      	nop
  402320:	370c      	adds	r7, #12
  402322:	46bd      	mov	sp, r7
  402324:	f85d 7b04 	ldr.w	r7, [sp], #4
  402328:	4770      	bx	lr
  40232a:	bf00      	nop
  40232c:	400e0600 	.word	0x400e0600

00402330 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  402330:	b480      	push	{r7}
  402332:	b085      	sub	sp, #20
  402334:	af00      	add	r7, sp, #0
  402336:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402338:	491d      	ldr	r1, [pc, #116]	; (4023b0 <pmc_switch_mck_to_pllack+0x80>)
  40233a:	4b1d      	ldr	r3, [pc, #116]	; (4023b0 <pmc_switch_mck_to_pllack+0x80>)
  40233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40233e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  402342:	687b      	ldr	r3, [r7, #4]
  402344:	4313      	orrs	r3, r2
  402346:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40234c:	60fb      	str	r3, [r7, #12]
  40234e:	e007      	b.n	402360 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402350:	68fb      	ldr	r3, [r7, #12]
  402352:	2b00      	cmp	r3, #0
  402354:	d101      	bne.n	40235a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  402356:	2301      	movs	r3, #1
  402358:	e023      	b.n	4023a2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40235a:	68fb      	ldr	r3, [r7, #12]
  40235c:	3b01      	subs	r3, #1
  40235e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402360:	4b13      	ldr	r3, [pc, #76]	; (4023b0 <pmc_switch_mck_to_pllack+0x80>)
  402362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402364:	f003 0308 	and.w	r3, r3, #8
  402368:	2b00      	cmp	r3, #0
  40236a:	d0f1      	beq.n	402350 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40236c:	4a10      	ldr	r2, [pc, #64]	; (4023b0 <pmc_switch_mck_to_pllack+0x80>)
  40236e:	4b10      	ldr	r3, [pc, #64]	; (4023b0 <pmc_switch_mck_to_pllack+0x80>)
  402370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402372:	f023 0303 	bic.w	r3, r3, #3
  402376:	f043 0302 	orr.w	r3, r3, #2
  40237a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40237c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402380:	60fb      	str	r3, [r7, #12]
  402382:	e007      	b.n	402394 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402384:	68fb      	ldr	r3, [r7, #12]
  402386:	2b00      	cmp	r3, #0
  402388:	d101      	bne.n	40238e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40238a:	2301      	movs	r3, #1
  40238c:	e009      	b.n	4023a2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40238e:	68fb      	ldr	r3, [r7, #12]
  402390:	3b01      	subs	r3, #1
  402392:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402394:	4b06      	ldr	r3, [pc, #24]	; (4023b0 <pmc_switch_mck_to_pllack+0x80>)
  402396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402398:	f003 0308 	and.w	r3, r3, #8
  40239c:	2b00      	cmp	r3, #0
  40239e:	d0f1      	beq.n	402384 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4023a0:	2300      	movs	r3, #0
}
  4023a2:	4618      	mov	r0, r3
  4023a4:	3714      	adds	r7, #20
  4023a6:	46bd      	mov	sp, r7
  4023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023ac:	4770      	bx	lr
  4023ae:	bf00      	nop
  4023b0:	400e0600 	.word	0x400e0600

004023b4 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4023b4:	b480      	push	{r7}
  4023b6:	b083      	sub	sp, #12
  4023b8:	af00      	add	r7, sp, #0
  4023ba:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4023bc:	687b      	ldr	r3, [r7, #4]
  4023be:	2b01      	cmp	r3, #1
  4023c0:	d105      	bne.n	4023ce <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4023c2:	4907      	ldr	r1, [pc, #28]	; (4023e0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4023c4:	4b06      	ldr	r3, [pc, #24]	; (4023e0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4023c6:	689a      	ldr	r2, [r3, #8]
  4023c8:	4b06      	ldr	r3, [pc, #24]	; (4023e4 <pmc_switch_sclk_to_32kxtal+0x30>)
  4023ca:	4313      	orrs	r3, r2
  4023cc:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4023ce:	4b04      	ldr	r3, [pc, #16]	; (4023e0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4023d0:	4a05      	ldr	r2, [pc, #20]	; (4023e8 <pmc_switch_sclk_to_32kxtal+0x34>)
  4023d2:	601a      	str	r2, [r3, #0]
}
  4023d4:	bf00      	nop
  4023d6:	370c      	adds	r7, #12
  4023d8:	46bd      	mov	sp, r7
  4023da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023de:	4770      	bx	lr
  4023e0:	400e1810 	.word	0x400e1810
  4023e4:	a5100000 	.word	0xa5100000
  4023e8:	a5000008 	.word	0xa5000008

004023ec <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4023ec:	b480      	push	{r7}
  4023ee:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4023f0:	4b09      	ldr	r3, [pc, #36]	; (402418 <pmc_osc_is_ready_32kxtal+0x2c>)
  4023f2:	695b      	ldr	r3, [r3, #20]
  4023f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4023f8:	2b00      	cmp	r3, #0
  4023fa:	d007      	beq.n	40240c <pmc_osc_is_ready_32kxtal+0x20>
  4023fc:	4b07      	ldr	r3, [pc, #28]	; (40241c <pmc_osc_is_ready_32kxtal+0x30>)
  4023fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402400:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402404:	2b00      	cmp	r3, #0
  402406:	d001      	beq.n	40240c <pmc_osc_is_ready_32kxtal+0x20>
  402408:	2301      	movs	r3, #1
  40240a:	e000      	b.n	40240e <pmc_osc_is_ready_32kxtal+0x22>
  40240c:	2300      	movs	r3, #0
}
  40240e:	4618      	mov	r0, r3
  402410:	46bd      	mov	sp, r7
  402412:	f85d 7b04 	ldr.w	r7, [sp], #4
  402416:	4770      	bx	lr
  402418:	400e1810 	.word	0x400e1810
  40241c:	400e0600 	.word	0x400e0600

00402420 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  402420:	b480      	push	{r7}
  402422:	b083      	sub	sp, #12
  402424:	af00      	add	r7, sp, #0
  402426:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  402428:	4915      	ldr	r1, [pc, #84]	; (402480 <pmc_switch_mainck_to_fastrc+0x60>)
  40242a:	4b15      	ldr	r3, [pc, #84]	; (402480 <pmc_switch_mainck_to_fastrc+0x60>)
  40242c:	6a1a      	ldr	r2, [r3, #32]
  40242e:	4b15      	ldr	r3, [pc, #84]	; (402484 <pmc_switch_mainck_to_fastrc+0x64>)
  402430:	4313      	orrs	r3, r2
  402432:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402434:	bf00      	nop
  402436:	4b12      	ldr	r3, [pc, #72]	; (402480 <pmc_switch_mainck_to_fastrc+0x60>)
  402438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40243e:	2b00      	cmp	r3, #0
  402440:	d0f9      	beq.n	402436 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402442:	490f      	ldr	r1, [pc, #60]	; (402480 <pmc_switch_mainck_to_fastrc+0x60>)
  402444:	4b0e      	ldr	r3, [pc, #56]	; (402480 <pmc_switch_mainck_to_fastrc+0x60>)
  402446:	6a1a      	ldr	r2, [r3, #32]
  402448:	4b0f      	ldr	r3, [pc, #60]	; (402488 <pmc_switch_mainck_to_fastrc+0x68>)
  40244a:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40244c:	687a      	ldr	r2, [r7, #4]
  40244e:	4313      	orrs	r3, r2
  402450:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402454:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402456:	bf00      	nop
  402458:	4b09      	ldr	r3, [pc, #36]	; (402480 <pmc_switch_mainck_to_fastrc+0x60>)
  40245a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40245c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402460:	2b00      	cmp	r3, #0
  402462:	d0f9      	beq.n	402458 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  402464:	4906      	ldr	r1, [pc, #24]	; (402480 <pmc_switch_mainck_to_fastrc+0x60>)
  402466:	4b06      	ldr	r3, [pc, #24]	; (402480 <pmc_switch_mainck_to_fastrc+0x60>)
  402468:	6a1a      	ldr	r2, [r3, #32]
  40246a:	4b08      	ldr	r3, [pc, #32]	; (40248c <pmc_switch_mainck_to_fastrc+0x6c>)
  40246c:	4013      	ands	r3, r2
  40246e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402472:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  402474:	bf00      	nop
  402476:	370c      	adds	r7, #12
  402478:	46bd      	mov	sp, r7
  40247a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40247e:	4770      	bx	lr
  402480:	400e0600 	.word	0x400e0600
  402484:	00370008 	.word	0x00370008
  402488:	ffc8ff8f 	.word	0xffc8ff8f
  40248c:	fec8ffff 	.word	0xfec8ffff

00402490 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  402490:	b480      	push	{r7}
  402492:	b083      	sub	sp, #12
  402494:	af00      	add	r7, sp, #0
  402496:	6078      	str	r0, [r7, #4]
  402498:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40249a:	687b      	ldr	r3, [r7, #4]
  40249c:	2b00      	cmp	r3, #0
  40249e:	d008      	beq.n	4024b2 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4024a0:	4913      	ldr	r1, [pc, #76]	; (4024f0 <pmc_switch_mainck_to_xtal+0x60>)
  4024a2:	4b13      	ldr	r3, [pc, #76]	; (4024f0 <pmc_switch_mainck_to_xtal+0x60>)
  4024a4:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4024a6:	4a13      	ldr	r2, [pc, #76]	; (4024f4 <pmc_switch_mainck_to_xtal+0x64>)
  4024a8:	401a      	ands	r2, r3
  4024aa:	4b13      	ldr	r3, [pc, #76]	; (4024f8 <pmc_switch_mainck_to_xtal+0x68>)
  4024ac:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4024ae:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4024b0:	e018      	b.n	4024e4 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4024b2:	490f      	ldr	r1, [pc, #60]	; (4024f0 <pmc_switch_mainck_to_xtal+0x60>)
  4024b4:	4b0e      	ldr	r3, [pc, #56]	; (4024f0 <pmc_switch_mainck_to_xtal+0x60>)
  4024b6:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4024b8:	4b10      	ldr	r3, [pc, #64]	; (4024fc <pmc_switch_mainck_to_xtal+0x6c>)
  4024ba:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4024bc:	683a      	ldr	r2, [r7, #0]
  4024be:	0212      	lsls	r2, r2, #8
  4024c0:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4024c2:	431a      	orrs	r2, r3
  4024c4:	4b0e      	ldr	r3, [pc, #56]	; (402500 <pmc_switch_mainck_to_xtal+0x70>)
  4024c6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4024c8:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4024ca:	bf00      	nop
  4024cc:	4b08      	ldr	r3, [pc, #32]	; (4024f0 <pmc_switch_mainck_to_xtal+0x60>)
  4024ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4024d0:	f003 0301 	and.w	r3, r3, #1
  4024d4:	2b00      	cmp	r3, #0
  4024d6:	d0f9      	beq.n	4024cc <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4024d8:	4905      	ldr	r1, [pc, #20]	; (4024f0 <pmc_switch_mainck_to_xtal+0x60>)
  4024da:	4b05      	ldr	r3, [pc, #20]	; (4024f0 <pmc_switch_mainck_to_xtal+0x60>)
  4024dc:	6a1a      	ldr	r2, [r3, #32]
  4024de:	4b09      	ldr	r3, [pc, #36]	; (402504 <pmc_switch_mainck_to_xtal+0x74>)
  4024e0:	4313      	orrs	r3, r2
  4024e2:	620b      	str	r3, [r1, #32]
}
  4024e4:	bf00      	nop
  4024e6:	370c      	adds	r7, #12
  4024e8:	46bd      	mov	sp, r7
  4024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024ee:	4770      	bx	lr
  4024f0:	400e0600 	.word	0x400e0600
  4024f4:	fec8fffc 	.word	0xfec8fffc
  4024f8:	01370002 	.word	0x01370002
  4024fc:	ffc8fffc 	.word	0xffc8fffc
  402500:	00370001 	.word	0x00370001
  402504:	01370000 	.word	0x01370000

00402508 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  402508:	b480      	push	{r7}
  40250a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40250c:	4b04      	ldr	r3, [pc, #16]	; (402520 <pmc_osc_is_ready_mainck+0x18>)
  40250e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  402514:	4618      	mov	r0, r3
  402516:	46bd      	mov	sp, r7
  402518:	f85d 7b04 	ldr.w	r7, [sp], #4
  40251c:	4770      	bx	lr
  40251e:	bf00      	nop
  402520:	400e0600 	.word	0x400e0600

00402524 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  402524:	b480      	push	{r7}
  402526:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402528:	4b04      	ldr	r3, [pc, #16]	; (40253c <pmc_disable_pllack+0x18>)
  40252a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40252e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  402530:	bf00      	nop
  402532:	46bd      	mov	sp, r7
  402534:	f85d 7b04 	ldr.w	r7, [sp], #4
  402538:	4770      	bx	lr
  40253a:	bf00      	nop
  40253c:	400e0600 	.word	0x400e0600

00402540 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  402540:	b480      	push	{r7}
  402542:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402544:	4b04      	ldr	r3, [pc, #16]	; (402558 <pmc_is_locked_pllack+0x18>)
  402546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402548:	f003 0302 	and.w	r3, r3, #2
}
  40254c:	4618      	mov	r0, r3
  40254e:	46bd      	mov	sp, r7
  402550:	f85d 7b04 	ldr.w	r7, [sp], #4
  402554:	4770      	bx	lr
  402556:	bf00      	nop
  402558:	400e0600 	.word	0x400e0600

0040255c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  40255c:	b480      	push	{r7}
  40255e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  402560:	4b04      	ldr	r3, [pc, #16]	; (402574 <pmc_is_locked_upll+0x18>)
  402562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402564:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  402568:	4618      	mov	r0, r3
  40256a:	46bd      	mov	sp, r7
  40256c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402570:	4770      	bx	lr
  402572:	bf00      	nop
  402574:	400e0600 	.word	0x400e0600

00402578 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  402578:	b480      	push	{r7}
  40257a:	b083      	sub	sp, #12
  40257c:	af00      	add	r7, sp, #0
  40257e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  402580:	687b      	ldr	r3, [r7, #4]
  402582:	2b3f      	cmp	r3, #63	; 0x3f
  402584:	d901      	bls.n	40258a <pmc_enable_periph_clk+0x12>
		return 1;
  402586:	2301      	movs	r3, #1
  402588:	e02f      	b.n	4025ea <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40258a:	687b      	ldr	r3, [r7, #4]
  40258c:	2b1f      	cmp	r3, #31
  40258e:	d813      	bhi.n	4025b8 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402590:	4b19      	ldr	r3, [pc, #100]	; (4025f8 <pmc_enable_periph_clk+0x80>)
  402592:	699a      	ldr	r2, [r3, #24]
  402594:	2101      	movs	r1, #1
  402596:	687b      	ldr	r3, [r7, #4]
  402598:	fa01 f303 	lsl.w	r3, r1, r3
  40259c:	401a      	ands	r2, r3
  40259e:	2101      	movs	r1, #1
  4025a0:	687b      	ldr	r3, [r7, #4]
  4025a2:	fa01 f303 	lsl.w	r3, r1, r3
  4025a6:	429a      	cmp	r2, r3
  4025a8:	d01e      	beq.n	4025e8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4025aa:	4a13      	ldr	r2, [pc, #76]	; (4025f8 <pmc_enable_periph_clk+0x80>)
  4025ac:	2101      	movs	r1, #1
  4025ae:	687b      	ldr	r3, [r7, #4]
  4025b0:	fa01 f303 	lsl.w	r3, r1, r3
  4025b4:	6113      	str	r3, [r2, #16]
  4025b6:	e017      	b.n	4025e8 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4025b8:	687b      	ldr	r3, [r7, #4]
  4025ba:	3b20      	subs	r3, #32
  4025bc:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4025be:	4b0e      	ldr	r3, [pc, #56]	; (4025f8 <pmc_enable_periph_clk+0x80>)
  4025c0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4025c4:	2101      	movs	r1, #1
  4025c6:	687b      	ldr	r3, [r7, #4]
  4025c8:	fa01 f303 	lsl.w	r3, r1, r3
  4025cc:	401a      	ands	r2, r3
  4025ce:	2101      	movs	r1, #1
  4025d0:	687b      	ldr	r3, [r7, #4]
  4025d2:	fa01 f303 	lsl.w	r3, r1, r3
  4025d6:	429a      	cmp	r2, r3
  4025d8:	d006      	beq.n	4025e8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4025da:	4a07      	ldr	r2, [pc, #28]	; (4025f8 <pmc_enable_periph_clk+0x80>)
  4025dc:	2101      	movs	r1, #1
  4025de:	687b      	ldr	r3, [r7, #4]
  4025e0:	fa01 f303 	lsl.w	r3, r1, r3
  4025e4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4025e8:	2300      	movs	r3, #0
}
  4025ea:	4618      	mov	r0, r3
  4025ec:	370c      	adds	r7, #12
  4025ee:	46bd      	mov	sp, r7
  4025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025f4:	4770      	bx	lr
  4025f6:	bf00      	nop
  4025f8:	400e0600 	.word	0x400e0600

004025fc <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  4025fc:	b480      	push	{r7}
  4025fe:	b083      	sub	sp, #12
  402600:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402602:	f3ef 8310 	mrs	r3, PRIMASK
  402606:	607b      	str	r3, [r7, #4]
  return(result);
  402608:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40260a:	2b00      	cmp	r3, #0
  40260c:	bf0c      	ite	eq
  40260e:	2301      	moveq	r3, #1
  402610:	2300      	movne	r3, #0
  402612:	b2db      	uxtb	r3, r3
  402614:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  402616:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402618:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40261c:	4b04      	ldr	r3, [pc, #16]	; (402630 <cpu_irq_save+0x34>)
  40261e:	2200      	movs	r2, #0
  402620:	701a      	strb	r2, [r3, #0]
	return flags;
  402622:	683b      	ldr	r3, [r7, #0]
}
  402624:	4618      	mov	r0, r3
  402626:	370c      	adds	r7, #12
  402628:	46bd      	mov	sp, r7
  40262a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40262e:	4770      	bx	lr
  402630:	20400018 	.word	0x20400018

00402634 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  402634:	b480      	push	{r7}
  402636:	b083      	sub	sp, #12
  402638:	af00      	add	r7, sp, #0
  40263a:	6078      	str	r0, [r7, #4]
	return (flags);
  40263c:	687b      	ldr	r3, [r7, #4]
  40263e:	2b00      	cmp	r3, #0
  402640:	bf14      	ite	ne
  402642:	2301      	movne	r3, #1
  402644:	2300      	moveq	r3, #0
  402646:	b2db      	uxtb	r3, r3
}
  402648:	4618      	mov	r0, r3
  40264a:	370c      	adds	r7, #12
  40264c:	46bd      	mov	sp, r7
  40264e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402652:	4770      	bx	lr

00402654 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  402654:	b580      	push	{r7, lr}
  402656:	b082      	sub	sp, #8
  402658:	af00      	add	r7, sp, #0
  40265a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  40265c:	6878      	ldr	r0, [r7, #4]
  40265e:	4b07      	ldr	r3, [pc, #28]	; (40267c <cpu_irq_restore+0x28>)
  402660:	4798      	blx	r3
  402662:	4603      	mov	r3, r0
  402664:	2b00      	cmp	r3, #0
  402666:	d005      	beq.n	402674 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  402668:	4b05      	ldr	r3, [pc, #20]	; (402680 <cpu_irq_restore+0x2c>)
  40266a:	2201      	movs	r2, #1
  40266c:	701a      	strb	r2, [r3, #0]
  40266e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402672:	b662      	cpsie	i
}
  402674:	bf00      	nop
  402676:	3708      	adds	r7, #8
  402678:	46bd      	mov	sp, r7
  40267a:	bd80      	pop	{r7, pc}
  40267c:	00402635 	.word	0x00402635
  402680:	20400018 	.word	0x20400018

00402684 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402684:	b580      	push	{r7, lr}
  402686:	b084      	sub	sp, #16
  402688:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40268a:	4b1e      	ldr	r3, [pc, #120]	; (402704 <Reset_Handler+0x80>)
  40268c:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  40268e:	4b1e      	ldr	r3, [pc, #120]	; (402708 <Reset_Handler+0x84>)
  402690:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  402692:	68fa      	ldr	r2, [r7, #12]
  402694:	68bb      	ldr	r3, [r7, #8]
  402696:	429a      	cmp	r2, r3
  402698:	d00c      	beq.n	4026b4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40269a:	e007      	b.n	4026ac <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  40269c:	68bb      	ldr	r3, [r7, #8]
  40269e:	1d1a      	adds	r2, r3, #4
  4026a0:	60ba      	str	r2, [r7, #8]
  4026a2:	68fa      	ldr	r2, [r7, #12]
  4026a4:	1d11      	adds	r1, r2, #4
  4026a6:	60f9      	str	r1, [r7, #12]
  4026a8:	6812      	ldr	r2, [r2, #0]
  4026aa:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  4026ac:	68bb      	ldr	r3, [r7, #8]
  4026ae:	4a17      	ldr	r2, [pc, #92]	; (40270c <Reset_Handler+0x88>)
  4026b0:	4293      	cmp	r3, r2
  4026b2:	d3f3      	bcc.n	40269c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4026b4:	4b16      	ldr	r3, [pc, #88]	; (402710 <Reset_Handler+0x8c>)
  4026b6:	60bb      	str	r3, [r7, #8]
  4026b8:	e004      	b.n	4026c4 <Reset_Handler+0x40>
                *pDest++ = 0;
  4026ba:	68bb      	ldr	r3, [r7, #8]
  4026bc:	1d1a      	adds	r2, r3, #4
  4026be:	60ba      	str	r2, [r7, #8]
  4026c0:	2200      	movs	r2, #0
  4026c2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  4026c4:	68bb      	ldr	r3, [r7, #8]
  4026c6:	4a13      	ldr	r2, [pc, #76]	; (402714 <Reset_Handler+0x90>)
  4026c8:	4293      	cmp	r3, r2
  4026ca:	d3f6      	bcc.n	4026ba <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4026cc:	4b12      	ldr	r3, [pc, #72]	; (402718 <Reset_Handler+0x94>)
  4026ce:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4026d0:	4a12      	ldr	r2, [pc, #72]	; (40271c <Reset_Handler+0x98>)
  4026d2:	68fb      	ldr	r3, [r7, #12]
  4026d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4026d8:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  4026da:	4b11      	ldr	r3, [pc, #68]	; (402720 <Reset_Handler+0x9c>)
  4026dc:	4798      	blx	r3
  4026de:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  4026e0:	4a10      	ldr	r2, [pc, #64]	; (402724 <Reset_Handler+0xa0>)
  4026e2:	4b10      	ldr	r3, [pc, #64]	; (402724 <Reset_Handler+0xa0>)
  4026e4:	681b      	ldr	r3, [r3, #0]
  4026e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4026ea:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4026ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4026f0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  4026f4:	6878      	ldr	r0, [r7, #4]
  4026f6:	4b0c      	ldr	r3, [pc, #48]	; (402728 <Reset_Handler+0xa4>)
  4026f8:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  4026fa:	4b0c      	ldr	r3, [pc, #48]	; (40272c <Reset_Handler+0xa8>)
  4026fc:	4798      	blx	r3

        /* Branch to main function */
        main();
  4026fe:	4b0c      	ldr	r3, [pc, #48]	; (402730 <Reset_Handler+0xac>)
  402700:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  402702:	e7fe      	b.n	402702 <Reset_Handler+0x7e>
  402704:	00408814 	.word	0x00408814
  402708:	20400000 	.word	0x20400000
  40270c:	204009d0 	.word	0x204009d0
  402710:	204009d0 	.word	0x204009d0
  402714:	20400ccc 	.word	0x20400ccc
  402718:	00400000 	.word	0x00400000
  40271c:	e000ed00 	.word	0xe000ed00
  402720:	004025fd 	.word	0x004025fd
  402724:	e000ed88 	.word	0xe000ed88
  402728:	00402655 	.word	0x00402655
  40272c:	004034a9 	.word	0x004034a9
  402730:	00402ec9 	.word	0x00402ec9

00402734 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402734:	b480      	push	{r7}
  402736:	af00      	add	r7, sp, #0
        while (1) {
  402738:	e7fe      	b.n	402738 <Dummy_Handler+0x4>
	...

0040273c <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  40273c:	b480      	push	{r7}
  40273e:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402740:	4b52      	ldr	r3, [pc, #328]	; (40288c <SystemCoreClockUpdate+0x150>)
  402742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402744:	f003 0303 	and.w	r3, r3, #3
  402748:	2b01      	cmp	r3, #1
  40274a:	d014      	beq.n	402776 <SystemCoreClockUpdate+0x3a>
  40274c:	2b01      	cmp	r3, #1
  40274e:	d302      	bcc.n	402756 <SystemCoreClockUpdate+0x1a>
  402750:	2b02      	cmp	r3, #2
  402752:	d038      	beq.n	4027c6 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  402754:	e07a      	b.n	40284c <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402756:	4b4e      	ldr	r3, [pc, #312]	; (402890 <SystemCoreClockUpdate+0x154>)
  402758:	695b      	ldr	r3, [r3, #20]
  40275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40275e:	2b00      	cmp	r3, #0
  402760:	d004      	beq.n	40276c <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402762:	4b4c      	ldr	r3, [pc, #304]	; (402894 <SystemCoreClockUpdate+0x158>)
  402764:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402768:	601a      	str	r2, [r3, #0]
    break;
  40276a:	e06f      	b.n	40284c <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40276c:	4b49      	ldr	r3, [pc, #292]	; (402894 <SystemCoreClockUpdate+0x158>)
  40276e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402772:	601a      	str	r2, [r3, #0]
    break;
  402774:	e06a      	b.n	40284c <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402776:	4b45      	ldr	r3, [pc, #276]	; (40288c <SystemCoreClockUpdate+0x150>)
  402778:	6a1b      	ldr	r3, [r3, #32]
  40277a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40277e:	2b00      	cmp	r3, #0
  402780:	d003      	beq.n	40278a <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402782:	4b44      	ldr	r3, [pc, #272]	; (402894 <SystemCoreClockUpdate+0x158>)
  402784:	4a44      	ldr	r2, [pc, #272]	; (402898 <SystemCoreClockUpdate+0x15c>)
  402786:	601a      	str	r2, [r3, #0]
    break;
  402788:	e060      	b.n	40284c <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40278a:	4b42      	ldr	r3, [pc, #264]	; (402894 <SystemCoreClockUpdate+0x158>)
  40278c:	4a43      	ldr	r2, [pc, #268]	; (40289c <SystemCoreClockUpdate+0x160>)
  40278e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402790:	4b3e      	ldr	r3, [pc, #248]	; (40288c <SystemCoreClockUpdate+0x150>)
  402792:	6a1b      	ldr	r3, [r3, #32]
  402794:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402798:	2b10      	cmp	r3, #16
  40279a:	d004      	beq.n	4027a6 <SystemCoreClockUpdate+0x6a>
  40279c:	2b20      	cmp	r3, #32
  40279e:	d008      	beq.n	4027b2 <SystemCoreClockUpdate+0x76>
  4027a0:	2b00      	cmp	r3, #0
  4027a2:	d00e      	beq.n	4027c2 <SystemCoreClockUpdate+0x86>
          break;
  4027a4:	e00e      	b.n	4027c4 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  4027a6:	4b3b      	ldr	r3, [pc, #236]	; (402894 <SystemCoreClockUpdate+0x158>)
  4027a8:	681b      	ldr	r3, [r3, #0]
  4027aa:	005b      	lsls	r3, r3, #1
  4027ac:	4a39      	ldr	r2, [pc, #228]	; (402894 <SystemCoreClockUpdate+0x158>)
  4027ae:	6013      	str	r3, [r2, #0]
          break;
  4027b0:	e008      	b.n	4027c4 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  4027b2:	4b38      	ldr	r3, [pc, #224]	; (402894 <SystemCoreClockUpdate+0x158>)
  4027b4:	681a      	ldr	r2, [r3, #0]
  4027b6:	4613      	mov	r3, r2
  4027b8:	005b      	lsls	r3, r3, #1
  4027ba:	4413      	add	r3, r2
  4027bc:	4a35      	ldr	r2, [pc, #212]	; (402894 <SystemCoreClockUpdate+0x158>)
  4027be:	6013      	str	r3, [r2, #0]
          break;
  4027c0:	e000      	b.n	4027c4 <SystemCoreClockUpdate+0x88>
          break;
  4027c2:	bf00      	nop
    break;
  4027c4:	e042      	b.n	40284c <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4027c6:	4b31      	ldr	r3, [pc, #196]	; (40288c <SystemCoreClockUpdate+0x150>)
  4027c8:	6a1b      	ldr	r3, [r3, #32]
  4027ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4027ce:	2b00      	cmp	r3, #0
  4027d0:	d003      	beq.n	4027da <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4027d2:	4b30      	ldr	r3, [pc, #192]	; (402894 <SystemCoreClockUpdate+0x158>)
  4027d4:	4a30      	ldr	r2, [pc, #192]	; (402898 <SystemCoreClockUpdate+0x15c>)
  4027d6:	601a      	str	r2, [r3, #0]
  4027d8:	e01c      	b.n	402814 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4027da:	4b2e      	ldr	r3, [pc, #184]	; (402894 <SystemCoreClockUpdate+0x158>)
  4027dc:	4a2f      	ldr	r2, [pc, #188]	; (40289c <SystemCoreClockUpdate+0x160>)
  4027de:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4027e0:	4b2a      	ldr	r3, [pc, #168]	; (40288c <SystemCoreClockUpdate+0x150>)
  4027e2:	6a1b      	ldr	r3, [r3, #32]
  4027e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4027e8:	2b10      	cmp	r3, #16
  4027ea:	d004      	beq.n	4027f6 <SystemCoreClockUpdate+0xba>
  4027ec:	2b20      	cmp	r3, #32
  4027ee:	d008      	beq.n	402802 <SystemCoreClockUpdate+0xc6>
  4027f0:	2b00      	cmp	r3, #0
  4027f2:	d00e      	beq.n	402812 <SystemCoreClockUpdate+0xd6>
          break;
  4027f4:	e00e      	b.n	402814 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  4027f6:	4b27      	ldr	r3, [pc, #156]	; (402894 <SystemCoreClockUpdate+0x158>)
  4027f8:	681b      	ldr	r3, [r3, #0]
  4027fa:	005b      	lsls	r3, r3, #1
  4027fc:	4a25      	ldr	r2, [pc, #148]	; (402894 <SystemCoreClockUpdate+0x158>)
  4027fe:	6013      	str	r3, [r2, #0]
          break;
  402800:	e008      	b.n	402814 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  402802:	4b24      	ldr	r3, [pc, #144]	; (402894 <SystemCoreClockUpdate+0x158>)
  402804:	681a      	ldr	r2, [r3, #0]
  402806:	4613      	mov	r3, r2
  402808:	005b      	lsls	r3, r3, #1
  40280a:	4413      	add	r3, r2
  40280c:	4a21      	ldr	r2, [pc, #132]	; (402894 <SystemCoreClockUpdate+0x158>)
  40280e:	6013      	str	r3, [r2, #0]
          break;
  402810:	e000      	b.n	402814 <SystemCoreClockUpdate+0xd8>
          break;
  402812:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402814:	4b1d      	ldr	r3, [pc, #116]	; (40288c <SystemCoreClockUpdate+0x150>)
  402816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402818:	f003 0303 	and.w	r3, r3, #3
  40281c:	2b02      	cmp	r3, #2
  40281e:	d114      	bne.n	40284a <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402820:	4b1a      	ldr	r3, [pc, #104]	; (40288c <SystemCoreClockUpdate+0x150>)
  402822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402824:	0c1b      	lsrs	r3, r3, #16
  402826:	f3c3 030a 	ubfx	r3, r3, #0, #11
  40282a:	3301      	adds	r3, #1
  40282c:	4a19      	ldr	r2, [pc, #100]	; (402894 <SystemCoreClockUpdate+0x158>)
  40282e:	6812      	ldr	r2, [r2, #0]
  402830:	fb02 f303 	mul.w	r3, r2, r3
  402834:	4a17      	ldr	r2, [pc, #92]	; (402894 <SystemCoreClockUpdate+0x158>)
  402836:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402838:	4b14      	ldr	r3, [pc, #80]	; (40288c <SystemCoreClockUpdate+0x150>)
  40283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40283c:	b2db      	uxtb	r3, r3
  40283e:	4a15      	ldr	r2, [pc, #84]	; (402894 <SystemCoreClockUpdate+0x158>)
  402840:	6812      	ldr	r2, [r2, #0]
  402842:	fbb2 f3f3 	udiv	r3, r2, r3
  402846:	4a13      	ldr	r2, [pc, #76]	; (402894 <SystemCoreClockUpdate+0x158>)
  402848:	6013      	str	r3, [r2, #0]
    break;
  40284a:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40284c:	4b0f      	ldr	r3, [pc, #60]	; (40288c <SystemCoreClockUpdate+0x150>)
  40284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402850:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402854:	2b70      	cmp	r3, #112	; 0x70
  402856:	d108      	bne.n	40286a <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  402858:	4b0e      	ldr	r3, [pc, #56]	; (402894 <SystemCoreClockUpdate+0x158>)
  40285a:	681b      	ldr	r3, [r3, #0]
  40285c:	4a10      	ldr	r2, [pc, #64]	; (4028a0 <SystemCoreClockUpdate+0x164>)
  40285e:	fba2 2303 	umull	r2, r3, r2, r3
  402862:	085b      	lsrs	r3, r3, #1
  402864:	4a0b      	ldr	r2, [pc, #44]	; (402894 <SystemCoreClockUpdate+0x158>)
  402866:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  402868:	e00a      	b.n	402880 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40286a:	4b08      	ldr	r3, [pc, #32]	; (40288c <SystemCoreClockUpdate+0x150>)
  40286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40286e:	091b      	lsrs	r3, r3, #4
  402870:	f003 0307 	and.w	r3, r3, #7
  402874:	4a07      	ldr	r2, [pc, #28]	; (402894 <SystemCoreClockUpdate+0x158>)
  402876:	6812      	ldr	r2, [r2, #0]
  402878:	fa22 f303 	lsr.w	r3, r2, r3
  40287c:	4a05      	ldr	r2, [pc, #20]	; (402894 <SystemCoreClockUpdate+0x158>)
  40287e:	6013      	str	r3, [r2, #0]
}
  402880:	bf00      	nop
  402882:	46bd      	mov	sp, r7
  402884:	f85d 7b04 	ldr.w	r7, [sp], #4
  402888:	4770      	bx	lr
  40288a:	bf00      	nop
  40288c:	400e0600 	.word	0x400e0600
  402890:	400e1810 	.word	0x400e1810
  402894:	2040001c 	.word	0x2040001c
  402898:	00b71b00 	.word	0x00b71b00
  40289c:	003d0900 	.word	0x003d0900
  4028a0:	aaaaaaab 	.word	0xaaaaaaab

004028a4 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  4028a4:	b480      	push	{r7}
  4028a6:	b083      	sub	sp, #12
  4028a8:	af00      	add	r7, sp, #0
  4028aa:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4028ac:	687b      	ldr	r3, [r7, #4]
  4028ae:	4a1d      	ldr	r2, [pc, #116]	; (402924 <system_init_flash+0x80>)
  4028b0:	4293      	cmp	r3, r2
  4028b2:	d804      	bhi.n	4028be <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4028b4:	4b1c      	ldr	r3, [pc, #112]	; (402928 <system_init_flash+0x84>)
  4028b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4028ba:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4028bc:	e02b      	b.n	402916 <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  4028be:	687b      	ldr	r3, [r7, #4]
  4028c0:	4a1a      	ldr	r2, [pc, #104]	; (40292c <system_init_flash+0x88>)
  4028c2:	4293      	cmp	r3, r2
  4028c4:	d803      	bhi.n	4028ce <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4028c6:	4b18      	ldr	r3, [pc, #96]	; (402928 <system_init_flash+0x84>)
  4028c8:	4a19      	ldr	r2, [pc, #100]	; (402930 <system_init_flash+0x8c>)
  4028ca:	601a      	str	r2, [r3, #0]
}
  4028cc:	e023      	b.n	402916 <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  4028ce:	687b      	ldr	r3, [r7, #4]
  4028d0:	4a18      	ldr	r2, [pc, #96]	; (402934 <system_init_flash+0x90>)
  4028d2:	4293      	cmp	r3, r2
  4028d4:	d803      	bhi.n	4028de <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4028d6:	4b14      	ldr	r3, [pc, #80]	; (402928 <system_init_flash+0x84>)
  4028d8:	4a17      	ldr	r2, [pc, #92]	; (402938 <system_init_flash+0x94>)
  4028da:	601a      	str	r2, [r3, #0]
}
  4028dc:	e01b      	b.n	402916 <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4028de:	687b      	ldr	r3, [r7, #4]
  4028e0:	4a16      	ldr	r2, [pc, #88]	; (40293c <system_init_flash+0x98>)
  4028e2:	4293      	cmp	r3, r2
  4028e4:	d803      	bhi.n	4028ee <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4028e6:	4b10      	ldr	r3, [pc, #64]	; (402928 <system_init_flash+0x84>)
  4028e8:	4a15      	ldr	r2, [pc, #84]	; (402940 <system_init_flash+0x9c>)
  4028ea:	601a      	str	r2, [r3, #0]
}
  4028ec:	e013      	b.n	402916 <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4028ee:	687b      	ldr	r3, [r7, #4]
  4028f0:	4a14      	ldr	r2, [pc, #80]	; (402944 <system_init_flash+0xa0>)
  4028f2:	4293      	cmp	r3, r2
  4028f4:	d804      	bhi.n	402900 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4028f6:	4b0c      	ldr	r3, [pc, #48]	; (402928 <system_init_flash+0x84>)
  4028f8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4028fc:	601a      	str	r2, [r3, #0]
}
  4028fe:	e00a      	b.n	402916 <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  402900:	687b      	ldr	r3, [r7, #4]
  402902:	4a11      	ldr	r2, [pc, #68]	; (402948 <system_init_flash+0xa4>)
  402904:	4293      	cmp	r3, r2
  402906:	d803      	bhi.n	402910 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402908:	4b07      	ldr	r3, [pc, #28]	; (402928 <system_init_flash+0x84>)
  40290a:	4a10      	ldr	r2, [pc, #64]	; (40294c <system_init_flash+0xa8>)
  40290c:	601a      	str	r2, [r3, #0]
}
  40290e:	e002      	b.n	402916 <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  402910:	4b05      	ldr	r3, [pc, #20]	; (402928 <system_init_flash+0x84>)
  402912:	4a0f      	ldr	r2, [pc, #60]	; (402950 <system_init_flash+0xac>)
  402914:	601a      	str	r2, [r3, #0]
}
  402916:	bf00      	nop
  402918:	370c      	adds	r7, #12
  40291a:	46bd      	mov	sp, r7
  40291c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402920:	4770      	bx	lr
  402922:	bf00      	nop
  402924:	015ef3bf 	.word	0x015ef3bf
  402928:	400e0c00 	.word	0x400e0c00
  40292c:	02bde77f 	.word	0x02bde77f
  402930:	04000100 	.word	0x04000100
  402934:	041cdb3f 	.word	0x041cdb3f
  402938:	04000200 	.word	0x04000200
  40293c:	057bceff 	.word	0x057bceff
  402940:	04000300 	.word	0x04000300
  402944:	06dac2bf 	.word	0x06dac2bf
  402948:	0839b67f 	.word	0x0839b67f
  40294c:	04000500 	.word	0x04000500
  402950:	04000600 	.word	0x04000600

00402954 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  402954:	b480      	push	{r7}
  402956:	b085      	sub	sp, #20
  402958:	af00      	add	r7, sp, #0
  40295a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  40295c:	4b10      	ldr	r3, [pc, #64]	; (4029a0 <_sbrk+0x4c>)
  40295e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  402960:	4b10      	ldr	r3, [pc, #64]	; (4029a4 <_sbrk+0x50>)
  402962:	681b      	ldr	r3, [r3, #0]
  402964:	2b00      	cmp	r3, #0
  402966:	d102      	bne.n	40296e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402968:	4b0e      	ldr	r3, [pc, #56]	; (4029a4 <_sbrk+0x50>)
  40296a:	4a0f      	ldr	r2, [pc, #60]	; (4029a8 <_sbrk+0x54>)
  40296c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40296e:	4b0d      	ldr	r3, [pc, #52]	; (4029a4 <_sbrk+0x50>)
  402970:	681b      	ldr	r3, [r3, #0]
  402972:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  402974:	68ba      	ldr	r2, [r7, #8]
  402976:	687b      	ldr	r3, [r7, #4]
  402978:	441a      	add	r2, r3
  40297a:	68fb      	ldr	r3, [r7, #12]
  40297c:	429a      	cmp	r2, r3
  40297e:	dd02      	ble.n	402986 <_sbrk+0x32>
		return (caddr_t) -1;	
  402980:	f04f 33ff 	mov.w	r3, #4294967295
  402984:	e006      	b.n	402994 <_sbrk+0x40>
	}

	heap += incr;
  402986:	4b07      	ldr	r3, [pc, #28]	; (4029a4 <_sbrk+0x50>)
  402988:	681a      	ldr	r2, [r3, #0]
  40298a:	687b      	ldr	r3, [r7, #4]
  40298c:	4413      	add	r3, r2
  40298e:	4a05      	ldr	r2, [pc, #20]	; (4029a4 <_sbrk+0x50>)
  402990:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  402992:	68bb      	ldr	r3, [r7, #8]
}
  402994:	4618      	mov	r0, r3
  402996:	3714      	adds	r7, #20
  402998:	46bd      	mov	sp, r7
  40299a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40299e:	4770      	bx	lr
  4029a0:	2045fffc 	.word	0x2045fffc
  4029a4:	20400c68 	.word	0x20400c68
  4029a8:	20402ed0 	.word	0x20402ed0

004029ac <NVIC_EnableIRQ>:
{
  4029ac:	b480      	push	{r7}
  4029ae:	b083      	sub	sp, #12
  4029b0:	af00      	add	r7, sp, #0
  4029b2:	4603      	mov	r3, r0
  4029b4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4029b6:	4909      	ldr	r1, [pc, #36]	; (4029dc <NVIC_EnableIRQ+0x30>)
  4029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4029bc:	095b      	lsrs	r3, r3, #5
  4029be:	79fa      	ldrb	r2, [r7, #7]
  4029c0:	f002 021f 	and.w	r2, r2, #31
  4029c4:	2001      	movs	r0, #1
  4029c6:	fa00 f202 	lsl.w	r2, r0, r2
  4029ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4029ce:	bf00      	nop
  4029d0:	370c      	adds	r7, #12
  4029d2:	46bd      	mov	sp, r7
  4029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4029d8:	4770      	bx	lr
  4029da:	bf00      	nop
  4029dc:	e000e100 	.word	0xe000e100

004029e0 <NVIC_DisableIRQ>:
{
  4029e0:	b480      	push	{r7}
  4029e2:	b083      	sub	sp, #12
  4029e4:	af00      	add	r7, sp, #0
  4029e6:	4603      	mov	r3, r0
  4029e8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4029ea:	4909      	ldr	r1, [pc, #36]	; (402a10 <NVIC_DisableIRQ+0x30>)
  4029ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4029f0:	095b      	lsrs	r3, r3, #5
  4029f2:	79fa      	ldrb	r2, [r7, #7]
  4029f4:	f002 021f 	and.w	r2, r2, #31
  4029f8:	2001      	movs	r0, #1
  4029fa:	fa00 f202 	lsl.w	r2, r0, r2
  4029fe:	3320      	adds	r3, #32
  402a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402a04:	bf00      	nop
  402a06:	370c      	adds	r7, #12
  402a08:	46bd      	mov	sp, r7
  402a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a0e:	4770      	bx	lr
  402a10:	e000e100 	.word	0xe000e100

00402a14 <NVIC_ClearPendingIRQ>:
{
  402a14:	b480      	push	{r7}
  402a16:	b083      	sub	sp, #12
  402a18:	af00      	add	r7, sp, #0
  402a1a:	4603      	mov	r3, r0
  402a1c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402a1e:	4909      	ldr	r1, [pc, #36]	; (402a44 <NVIC_ClearPendingIRQ+0x30>)
  402a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402a24:	095b      	lsrs	r3, r3, #5
  402a26:	79fa      	ldrb	r2, [r7, #7]
  402a28:	f002 021f 	and.w	r2, r2, #31
  402a2c:	2001      	movs	r0, #1
  402a2e:	fa00 f202 	lsl.w	r2, r0, r2
  402a32:	3360      	adds	r3, #96	; 0x60
  402a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402a38:	bf00      	nop
  402a3a:	370c      	adds	r7, #12
  402a3c:	46bd      	mov	sp, r7
  402a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a42:	4770      	bx	lr
  402a44:	e000e100 	.word	0xe000e100

00402a48 <NVIC_SetPriority>:
{
  402a48:	b480      	push	{r7}
  402a4a:	b083      	sub	sp, #12
  402a4c:	af00      	add	r7, sp, #0
  402a4e:	4603      	mov	r3, r0
  402a50:	6039      	str	r1, [r7, #0]
  402a52:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  402a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402a58:	2b00      	cmp	r3, #0
  402a5a:	da0b      	bge.n	402a74 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402a5c:	490d      	ldr	r1, [pc, #52]	; (402a94 <NVIC_SetPriority+0x4c>)
  402a5e:	79fb      	ldrb	r3, [r7, #7]
  402a60:	f003 030f 	and.w	r3, r3, #15
  402a64:	3b04      	subs	r3, #4
  402a66:	683a      	ldr	r2, [r7, #0]
  402a68:	b2d2      	uxtb	r2, r2
  402a6a:	0152      	lsls	r2, r2, #5
  402a6c:	b2d2      	uxtb	r2, r2
  402a6e:	440b      	add	r3, r1
  402a70:	761a      	strb	r2, [r3, #24]
}
  402a72:	e009      	b.n	402a88 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402a74:	4908      	ldr	r1, [pc, #32]	; (402a98 <NVIC_SetPriority+0x50>)
  402a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402a7a:	683a      	ldr	r2, [r7, #0]
  402a7c:	b2d2      	uxtb	r2, r2
  402a7e:	0152      	lsls	r2, r2, #5
  402a80:	b2d2      	uxtb	r2, r2
  402a82:	440b      	add	r3, r1
  402a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  402a88:	bf00      	nop
  402a8a:	370c      	adds	r7, #12
  402a8c:	46bd      	mov	sp, r7
  402a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a92:	4770      	bx	lr
  402a94:	e000ed00 	.word	0xe000ed00
  402a98:	e000e100 	.word	0xe000e100

00402a9c <but1_callback>:
volatile char but1_flag = 0;
volatile char but2_flag = 0;
volatile char but3_flag = 0;
volatile char estado = 0;  // 0 - Fechado / 1 - Aberto / 2 - Travado

void but1_callback(void) {
  402a9c:	b480      	push	{r7}
  402a9e:	af00      	add	r7, sp, #0
	but1_flag = 1;
  402aa0:	4b03      	ldr	r3, [pc, #12]	; (402ab0 <but1_callback+0x14>)
  402aa2:	2201      	movs	r2, #1
  402aa4:	701a      	strb	r2, [r3, #0]
}
  402aa6:	bf00      	nop
  402aa8:	46bd      	mov	sp, r7
  402aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
  402aae:	4770      	bx	lr
  402ab0:	20400c6c 	.word	0x20400c6c

00402ab4 <but2_callback>:

void but2_callback(void) {
  402ab4:	b480      	push	{r7}
  402ab6:	af00      	add	r7, sp, #0
	but2_flag = 1;
  402ab8:	4b03      	ldr	r3, [pc, #12]	; (402ac8 <but2_callback+0x14>)
  402aba:	2201      	movs	r2, #1
  402abc:	701a      	strb	r2, [r3, #0]
}
  402abe:	bf00      	nop
  402ac0:	46bd      	mov	sp, r7
  402ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
  402ac6:	4770      	bx	lr
  402ac8:	20400c6d 	.word	0x20400c6d

00402acc <but3_callback>:

void but3_callback(void) {
  402acc:	b480      	push	{r7}
  402ace:	af00      	add	r7, sp, #0
	but3_flag = 1;
  402ad0:	4b03      	ldr	r3, [pc, #12]	; (402ae0 <but3_callback+0x14>)
  402ad2:	2201      	movs	r2, #1
  402ad4:	701a      	strb	r2, [r3, #0]
}
  402ad6:	bf00      	nop
  402ad8:	46bd      	mov	sp, r7
  402ada:	f85d 7b04 	ldr.w	r7, [sp], #4
  402ade:	4770      	bx	lr
  402ae0:	20400c6e 	.word	0x20400c6e

00402ae4 <io_init>:


void io_init(void) {
  402ae4:	b590      	push	{r4, r7, lr}
  402ae6:	b083      	sub	sp, #12
  402ae8:	af02      	add	r7, sp, #8
	
  WDT->WDT_MR = WDT_MR_WDDIS;
  402aea:	4b48      	ldr	r3, [pc, #288]	; (402c0c <io_init+0x128>)
  402aec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402af0:	605a      	str	r2, [r3, #4]
  	
  pmc_enable_periph_clk(LED_1_PIO_ID);
  402af2:	200a      	movs	r0, #10
  402af4:	4b46      	ldr	r3, [pc, #280]	; (402c10 <io_init+0x12c>)
  402af6:	4798      	blx	r3
  pmc_enable_periph_clk(LED_2_PIO_ID);
  402af8:	200c      	movs	r0, #12
  402afa:	4b45      	ldr	r3, [pc, #276]	; (402c10 <io_init+0x12c>)
  402afc:	4798      	blx	r3
  pmc_enable_periph_clk(LED_3_PIO_ID);
  402afe:	200b      	movs	r0, #11
  402b00:	4b43      	ldr	r3, [pc, #268]	; (402c10 <io_init+0x12c>)
  402b02:	4798      	blx	r3
  pmc_enable_periph_clk(BUT_1_PIO_ID);
  402b04:	2010      	movs	r0, #16
  402b06:	4b42      	ldr	r3, [pc, #264]	; (402c10 <io_init+0x12c>)
  402b08:	4798      	blx	r3
  pmc_enable_periph_clk(BUT_2_PIO_ID);
  402b0a:	200c      	movs	r0, #12
  402b0c:	4b40      	ldr	r3, [pc, #256]	; (402c10 <io_init+0x12c>)
  402b0e:	4798      	blx	r3
  pmc_enable_periph_clk(BUT_3_PIO_ID);
  402b10:	200a      	movs	r0, #10
  402b12:	4b3f      	ldr	r3, [pc, #252]	; (402c10 <io_init+0x12c>)
  402b14:	4798      	blx	r3

  pio_configure(LED_1_PIO, PIO_OUTPUT_0, LED_1_IDX_MASK, PIO_DEFAULT);
  402b16:	2300      	movs	r3, #0
  402b18:	2201      	movs	r2, #1
  402b1a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402b1e:	483d      	ldr	r0, [pc, #244]	; (402c14 <io_init+0x130>)
  402b20:	4c3d      	ldr	r4, [pc, #244]	; (402c18 <io_init+0x134>)
  402b22:	47a0      	blx	r4
  pio_configure(LED_2_PIO, PIO_OUTPUT_0, LED_2_IDX_MASK, PIO_DEFAULT);
  402b24:	2300      	movs	r3, #0
  402b26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402b2a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402b2e:	483b      	ldr	r0, [pc, #236]	; (402c1c <io_init+0x138>)
  402b30:	4c39      	ldr	r4, [pc, #228]	; (402c18 <io_init+0x134>)
  402b32:	47a0      	blx	r4
  pio_configure(LED_3_PIO, PIO_OUTPUT_0, LED_3_IDX_MASK, PIO_DEFAULT);
  402b34:	2300      	movs	r3, #0
  402b36:	2204      	movs	r2, #4
  402b38:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402b3c:	4838      	ldr	r0, [pc, #224]	; (402c20 <io_init+0x13c>)
  402b3e:	4c36      	ldr	r4, [pc, #216]	; (402c18 <io_init+0x134>)
  402b40:	47a0      	blx	r4

  pio_configure(BUT_1_PIO, PIO_INPUT, BUT_1_IDX_MASK, PIO_PULLUP| PIO_DEBOUNCE);
  402b42:	2309      	movs	r3, #9
  402b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402b48:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402b4c:	4835      	ldr	r0, [pc, #212]	; (402c24 <io_init+0x140>)
  402b4e:	4c32      	ldr	r4, [pc, #200]	; (402c18 <io_init+0x134>)
  402b50:	47a0      	blx	r4
  pio_configure(BUT_2_PIO, PIO_INPUT, BUT_2_IDX_MASK, PIO_PULLUP| PIO_DEBOUNCE);
  402b52:	2309      	movs	r3, #9
  402b54:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  402b58:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402b5c:	482f      	ldr	r0, [pc, #188]	; (402c1c <io_init+0x138>)
  402b5e:	4c2e      	ldr	r4, [pc, #184]	; (402c18 <io_init+0x134>)
  402b60:	47a0      	blx	r4
  pio_configure(BUT_3_PIO, PIO_INPUT, BUT_3_IDX_MASK, PIO_PULLUP| PIO_DEBOUNCE);
  402b62:	2309      	movs	r3, #9
  402b64:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402b68:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402b6c:	4829      	ldr	r0, [pc, #164]	; (402c14 <io_init+0x130>)
  402b6e:	4c2a      	ldr	r4, [pc, #168]	; (402c18 <io_init+0x134>)
  402b70:	47a0      	blx	r4

  pio_handler_set(BUT_1_PIO, BUT_1_PIO_ID, BUT_1_IDX_MASK, PIO_IT_FALL_EDGE,
  402b72:	4b2d      	ldr	r3, [pc, #180]	; (402c28 <io_init+0x144>)
  402b74:	9300      	str	r3, [sp, #0]
  402b76:	2350      	movs	r3, #80	; 0x50
  402b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402b7c:	2110      	movs	r1, #16
  402b7e:	4829      	ldr	r0, [pc, #164]	; (402c24 <io_init+0x140>)
  402b80:	4c2a      	ldr	r4, [pc, #168]	; (402c2c <io_init+0x148>)
  402b82:	47a0      	blx	r4
  but1_callback);
  pio_handler_set(BUT_2_PIO, BUT_2_PIO_ID, BUT_2_IDX_MASK, PIO_IT_FALL_EDGE,
  402b84:	4b2a      	ldr	r3, [pc, #168]	; (402c30 <io_init+0x14c>)
  402b86:	9300      	str	r3, [sp, #0]
  402b88:	2350      	movs	r3, #80	; 0x50
  402b8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  402b8e:	210c      	movs	r1, #12
  402b90:	4822      	ldr	r0, [pc, #136]	; (402c1c <io_init+0x138>)
  402b92:	4c26      	ldr	r4, [pc, #152]	; (402c2c <io_init+0x148>)
  402b94:	47a0      	blx	r4
  but2_callback);
  pio_handler_set(BUT_3_PIO, BUT_3_PIO_ID, BUT_3_IDX_MASK, PIO_IT_FALL_EDGE,
  402b96:	4b27      	ldr	r3, [pc, #156]	; (402c34 <io_init+0x150>)
  402b98:	9300      	str	r3, [sp, #0]
  402b9a:	2350      	movs	r3, #80	; 0x50
  402b9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402ba0:	210a      	movs	r1, #10
  402ba2:	481c      	ldr	r0, [pc, #112]	; (402c14 <io_init+0x130>)
  402ba4:	4c21      	ldr	r4, [pc, #132]	; (402c2c <io_init+0x148>)
  402ba6:	47a0      	blx	r4
  but3_callback);

  pio_enable_interrupt(BUT_1_PIO, BUT_1_IDX_MASK);
  402ba8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402bac:	481d      	ldr	r0, [pc, #116]	; (402c24 <io_init+0x140>)
  402bae:	4b22      	ldr	r3, [pc, #136]	; (402c38 <io_init+0x154>)
  402bb0:	4798      	blx	r3
  pio_enable_interrupt(BUT_2_PIO, BUT_2_IDX_MASK);
  402bb2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402bb6:	4819      	ldr	r0, [pc, #100]	; (402c1c <io_init+0x138>)
  402bb8:	4b1f      	ldr	r3, [pc, #124]	; (402c38 <io_init+0x154>)
  402bba:	4798      	blx	r3
  pio_enable_interrupt(BUT_3_PIO, BUT_3_IDX_MASK);
  402bbc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  402bc0:	4814      	ldr	r0, [pc, #80]	; (402c14 <io_init+0x130>)
  402bc2:	4b1d      	ldr	r3, [pc, #116]	; (402c38 <io_init+0x154>)
  402bc4:	4798      	blx	r3

  pio_get_interrupt_status(BUT_1_PIO);
  402bc6:	4817      	ldr	r0, [pc, #92]	; (402c24 <io_init+0x140>)
  402bc8:	4b1c      	ldr	r3, [pc, #112]	; (402c3c <io_init+0x158>)
  402bca:	4798      	blx	r3
  pio_get_interrupt_status(BUT_2_PIO);
  402bcc:	4813      	ldr	r0, [pc, #76]	; (402c1c <io_init+0x138>)
  402bce:	4b1b      	ldr	r3, [pc, #108]	; (402c3c <io_init+0x158>)
  402bd0:	4798      	blx	r3
  pio_get_interrupt_status(BUT_3_PIO);
  402bd2:	4810      	ldr	r0, [pc, #64]	; (402c14 <io_init+0x130>)
  402bd4:	4b19      	ldr	r3, [pc, #100]	; (402c3c <io_init+0x158>)
  402bd6:	4798      	blx	r3

  NVIC_EnableIRQ(BUT_1_PIO_ID);
  402bd8:	2010      	movs	r0, #16
  402bda:	4b19      	ldr	r3, [pc, #100]	; (402c40 <io_init+0x15c>)
  402bdc:	4798      	blx	r3
  NVIC_SetPriority(BUT_1_PIO_ID, 4);
  402bde:	2104      	movs	r1, #4
  402be0:	2010      	movs	r0, #16
  402be2:	4b18      	ldr	r3, [pc, #96]	; (402c44 <io_init+0x160>)
  402be4:	4798      	blx	r3

  NVIC_EnableIRQ(BUT_2_PIO_ID);
  402be6:	200c      	movs	r0, #12
  402be8:	4b15      	ldr	r3, [pc, #84]	; (402c40 <io_init+0x15c>)
  402bea:	4798      	blx	r3
  NVIC_SetPriority(BUT_2_PIO_ID, 4);
  402bec:	2104      	movs	r1, #4
  402bee:	200c      	movs	r0, #12
  402bf0:	4b14      	ldr	r3, [pc, #80]	; (402c44 <io_init+0x160>)
  402bf2:	4798      	blx	r3

  NVIC_EnableIRQ(BUT_3_PIO_ID);
  402bf4:	200a      	movs	r0, #10
  402bf6:	4b12      	ldr	r3, [pc, #72]	; (402c40 <io_init+0x15c>)
  402bf8:	4798      	blx	r3
  NVIC_SetPriority(BUT_3_PIO_ID, 4);
  402bfa:	2104      	movs	r1, #4
  402bfc:	200a      	movs	r0, #10
  402bfe:	4b11      	ldr	r3, [pc, #68]	; (402c44 <io_init+0x160>)
  402c00:	4798      	blx	r3
}
  402c02:	bf00      	nop
  402c04:	3704      	adds	r7, #4
  402c06:	46bd      	mov	sp, r7
  402c08:	bd90      	pop	{r4, r7, pc}
  402c0a:	bf00      	nop
  402c0c:	400e1850 	.word	0x400e1850
  402c10:	00402579 	.word	0x00402579
  402c14:	400e0e00 	.word	0x400e0e00
  402c18:	00401f49 	.word	0x00401f49
  402c1c:	400e1200 	.word	0x400e1200
  402c20:	400e1000 	.word	0x400e1000
  402c24:	400e1400 	.word	0x400e1400
  402c28:	00402a9d 	.word	0x00402a9d
  402c2c:	0040219d 	.word	0x0040219d
  402c30:	00402ab5 	.word	0x00402ab5
  402c34:	00402acd 	.word	0x00402acd
  402c38:	00402081 	.word	0x00402081
  402c3c:	004020b9 	.word	0x004020b9
  402c40:	004029ad 	.word	0x004029ad
  402c44:	00402a49 	.word	0x00402a49

00402c48 <RTT_Handler>:

void RTT_Handler(void) {
  402c48:	b580      	push	{r7, lr}
  402c4a:	b082      	sub	sp, #8
  402c4c:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Get RTT status - ACK */
	ul_status = rtt_get_status(RTT);
  402c4e:	4808      	ldr	r0, [pc, #32]	; (402c70 <RTT_Handler+0x28>)
  402c50:	4b08      	ldr	r3, [pc, #32]	; (402c74 <RTT_Handler+0x2c>)
  402c52:	4798      	blx	r3
  402c54:	6078      	str	r0, [r7, #4]

	/* IRQ due to Alarm */
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  402c56:	687b      	ldr	r3, [r7, #4]
  402c58:	f003 0301 	and.w	r3, r3, #1
  402c5c:	2b00      	cmp	r3, #0
  402c5e:	d002      	beq.n	402c66 <RTT_Handler+0x1e>
		estado = 2;
  402c60:	4b05      	ldr	r3, [pc, #20]	; (402c78 <RTT_Handler+0x30>)
  402c62:	2202      	movs	r2, #2
  402c64:	701a      	strb	r2, [r3, #0]
	/* IRQ due to Time has changed */
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {
		   // BLINK Led
	}

}
  402c66:	bf00      	nop
  402c68:	3708      	adds	r7, #8
  402c6a:	46bd      	mov	sp, r7
  402c6c:	bd80      	pop	{r7, pc}
  402c6e:	bf00      	nop
  402c70:	400e1830 	.word	0x400e1830
  402c74:	004002db 	.word	0x004002db
  402c78:	20400c6f 	.word	0x20400c6f

00402c7c <RTT_init>:

void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource) {
  402c7c:	b580      	push	{r7, lr}
  402c7e:	b086      	sub	sp, #24
  402c80:	af00      	add	r7, sp, #0
  402c82:	60f8      	str	r0, [r7, #12]
  402c84:	60b9      	str	r1, [r7, #8]
  402c86:	607a      	str	r2, [r7, #4]

	uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
  402c88:	eddf 6a26 	vldr	s13, [pc, #152]	; 402d24 <RTT_init+0xa8>
  402c8c:	ed97 7a03 	vldr	s14, [r7, #12]
  402c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
  402c94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  402c98:	edc7 7a00 	vstr	s15, [r7]
  402c9c:	883b      	ldrh	r3, [r7, #0]
  402c9e:	82fb      	strh	r3, [r7, #22]
	
	rtt_sel_source(RTT, false);
  402ca0:	2100      	movs	r1, #0
  402ca2:	4821      	ldr	r0, [pc, #132]	; (402d28 <RTT_init+0xac>)
  402ca4:	4b21      	ldr	r3, [pc, #132]	; (402d2c <RTT_init+0xb0>)
  402ca6:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  402ca8:	8afb      	ldrh	r3, [r7, #22]
  402caa:	4619      	mov	r1, r3
  402cac:	481e      	ldr	r0, [pc, #120]	; (402d28 <RTT_init+0xac>)
  402cae:	4b20      	ldr	r3, [pc, #128]	; (402d30 <RTT_init+0xb4>)
  402cb0:	4798      	blx	r3
	
	if (rttIRQSource & RTT_MR_ALMIEN) {
  402cb2:	687b      	ldr	r3, [r7, #4]
  402cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  402cb8:	2b00      	cmp	r3, #0
  402cba:	d012      	beq.n	402ce2 <RTT_init+0x66>
		uint32_t ul_previous_time;
		ul_previous_time = rtt_read_timer_value(RTT);
  402cbc:	481a      	ldr	r0, [pc, #104]	; (402d28 <RTT_init+0xac>)
  402cbe:	4b1d      	ldr	r3, [pc, #116]	; (402d34 <RTT_init+0xb8>)
  402cc0:	4798      	blx	r3
  402cc2:	6138      	str	r0, [r7, #16]
		while (ul_previous_time == rtt_read_timer_value(RTT));
  402cc4:	bf00      	nop
  402cc6:	4818      	ldr	r0, [pc, #96]	; (402d28 <RTT_init+0xac>)
  402cc8:	4b1a      	ldr	r3, [pc, #104]	; (402d34 <RTT_init+0xb8>)
  402cca:	4798      	blx	r3
  402ccc:	4602      	mov	r2, r0
  402cce:	693b      	ldr	r3, [r7, #16]
  402cd0:	429a      	cmp	r2, r3
  402cd2:	d0f8      	beq.n	402cc6 <RTT_init+0x4a>
		rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  402cd4:	68ba      	ldr	r2, [r7, #8]
  402cd6:	693b      	ldr	r3, [r7, #16]
  402cd8:	4413      	add	r3, r2
  402cda:	4619      	mov	r1, r3
  402cdc:	4812      	ldr	r0, [pc, #72]	; (402d28 <RTT_init+0xac>)
  402cde:	4b16      	ldr	r3, [pc, #88]	; (402d38 <RTT_init+0xbc>)
  402ce0:	4798      	blx	r3
	}

	/* config NVIC */
	NVIC_DisableIRQ(RTT_IRQn);
  402ce2:	2003      	movs	r0, #3
  402ce4:	4b15      	ldr	r3, [pc, #84]	; (402d3c <RTT_init+0xc0>)
  402ce6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
  402ce8:	2003      	movs	r0, #3
  402cea:	4b15      	ldr	r3, [pc, #84]	; (402d40 <RTT_init+0xc4>)
  402cec:	4798      	blx	r3
	NVIC_SetPriority(RTT_IRQn, 4);
  402cee:	2104      	movs	r1, #4
  402cf0:	2003      	movs	r0, #3
  402cf2:	4b14      	ldr	r3, [pc, #80]	; (402d44 <RTT_init+0xc8>)
  402cf4:	4798      	blx	r3
	NVIC_EnableIRQ(RTT_IRQn);
  402cf6:	2003      	movs	r0, #3
  402cf8:	4b13      	ldr	r3, [pc, #76]	; (402d48 <RTT_init+0xcc>)
  402cfa:	4798      	blx	r3

	/* Enable RTT interrupt */
	if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  402cfc:	687b      	ldr	r3, [r7, #4]
  402cfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  402d02:	2b00      	cmp	r3, #0
  402d04:	d004      	beq.n	402d10 <RTT_init+0x94>
		rtt_enable_interrupt(RTT, rttIRQSource);
  402d06:	6879      	ldr	r1, [r7, #4]
  402d08:	4807      	ldr	r0, [pc, #28]	; (402d28 <RTT_init+0xac>)
  402d0a:	4b10      	ldr	r3, [pc, #64]	; (402d4c <RTT_init+0xd0>)
  402d0c:	4798      	blx	r3
	else
		rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
	
}
  402d0e:	e004      	b.n	402d1a <RTT_init+0x9e>
		rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  402d10:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  402d14:	4804      	ldr	r0, [pc, #16]	; (402d28 <RTT_init+0xac>)
  402d16:	4b0e      	ldr	r3, [pc, #56]	; (402d50 <RTT_init+0xd4>)
  402d18:	4798      	blx	r3
}
  402d1a:	bf00      	nop
  402d1c:	3718      	adds	r7, #24
  402d1e:	46bd      	mov	sp, r7
  402d20:	bd80      	pop	{r7, pc}
  402d22:	bf00      	nop
  402d24:	47000000 	.word	0x47000000
  402d28:	400e1830 	.word	0x400e1830
  402d2c:	004001dd 	.word	0x004001dd
  402d30:	004001ad 	.word	0x004001ad
  402d34:	004002ad 	.word	0x004002ad
  402d38:	004002f5 	.word	0x004002f5
  402d3c:	004029e1 	.word	0x004029e1
  402d40:	00402a15 	.word	0x00402a15
  402d44:	00402a49 	.word	0x00402a49
  402d48:	004029ad 	.word	0x004029ad
  402d4c:	00400235 	.word	0x00400235
  402d50:	0040026d 	.word	0x0040026d

00402d54 <writePasswordToOLED>:

static uint32_t get_time_rtt() {
	return rtt_read_timer_value(RTT);
}

void writePasswordToOLED(int tentativa[4], char num1[128], char num2[128], char num3[128], char num4[128]) {
  402d54:	b590      	push	{r4, r7, lr}
  402d56:	b085      	sub	sp, #20
  402d58:	af00      	add	r7, sp, #0
  402d5a:	60f8      	str	r0, [r7, #12]
  402d5c:	60b9      	str	r1, [r7, #8]
  402d5e:	607a      	str	r2, [r7, #4]
  402d60:	603b      	str	r3, [r7, #0]
	sprintf(num1, "%d", tentativa[0]);
  402d62:	68fb      	ldr	r3, [r7, #12]
  402d64:	681b      	ldr	r3, [r3, #0]
  402d66:	461a      	mov	r2, r3
  402d68:	4929      	ldr	r1, [pc, #164]	; (402e10 <writePasswordToOLED+0xbc>)
  402d6a:	68b8      	ldr	r0, [r7, #8]
  402d6c:	4b29      	ldr	r3, [pc, #164]	; (402e14 <writePasswordToOLED+0xc0>)
  402d6e:	4798      	blx	r3
	sprintf(num2, "%d", tentativa[1]);
  402d70:	68fb      	ldr	r3, [r7, #12]
  402d72:	3304      	adds	r3, #4
  402d74:	681b      	ldr	r3, [r3, #0]
  402d76:	461a      	mov	r2, r3
  402d78:	4925      	ldr	r1, [pc, #148]	; (402e10 <writePasswordToOLED+0xbc>)
  402d7a:	6878      	ldr	r0, [r7, #4]
  402d7c:	4b25      	ldr	r3, [pc, #148]	; (402e14 <writePasswordToOLED+0xc0>)
  402d7e:	4798      	blx	r3
	sprintf(num3, "%d", tentativa[2]);
  402d80:	68fb      	ldr	r3, [r7, #12]
  402d82:	3308      	adds	r3, #8
  402d84:	681b      	ldr	r3, [r3, #0]
  402d86:	461a      	mov	r2, r3
  402d88:	4921      	ldr	r1, [pc, #132]	; (402e10 <writePasswordToOLED+0xbc>)
  402d8a:	6838      	ldr	r0, [r7, #0]
  402d8c:	4b21      	ldr	r3, [pc, #132]	; (402e14 <writePasswordToOLED+0xc0>)
  402d8e:	4798      	blx	r3
	sprintf(num4, "%d", tentativa[3]);
  402d90:	68fb      	ldr	r3, [r7, #12]
  402d92:	330c      	adds	r3, #12
  402d94:	681b      	ldr	r3, [r3, #0]
  402d96:	461a      	mov	r2, r3
  402d98:	491d      	ldr	r1, [pc, #116]	; (402e10 <writePasswordToOLED+0xbc>)
  402d9a:	6a38      	ldr	r0, [r7, #32]
  402d9c:	4b1d      	ldr	r3, [pc, #116]	; (402e14 <writePasswordToOLED+0xc0>)
  402d9e:	4798      	blx	r3
	
	if (num1[0] == '9') {
  402da0:	68bb      	ldr	r3, [r7, #8]
  402da2:	781b      	ldrb	r3, [r3, #0]
  402da4:	2b39      	cmp	r3, #57	; 0x39
  402da6:	d102      	bne.n	402dae <writePasswordToOLED+0x5a>
		num1[0] = ' ';
  402da8:	68bb      	ldr	r3, [r7, #8]
  402daa:	2220      	movs	r2, #32
  402dac:	701a      	strb	r2, [r3, #0]
	}
	
	if (num2[0] == '9') {
  402dae:	687b      	ldr	r3, [r7, #4]
  402db0:	781b      	ldrb	r3, [r3, #0]
  402db2:	2b39      	cmp	r3, #57	; 0x39
  402db4:	d102      	bne.n	402dbc <writePasswordToOLED+0x68>
		num2[0] = ' ';
  402db6:	687b      	ldr	r3, [r7, #4]
  402db8:	2220      	movs	r2, #32
  402dba:	701a      	strb	r2, [r3, #0]
	}
	
	if (num3[0] == '9') {
  402dbc:	683b      	ldr	r3, [r7, #0]
  402dbe:	781b      	ldrb	r3, [r3, #0]
  402dc0:	2b39      	cmp	r3, #57	; 0x39
  402dc2:	d102      	bne.n	402dca <writePasswordToOLED+0x76>
		num3[0] = ' ';
  402dc4:	683b      	ldr	r3, [r7, #0]
  402dc6:	2220      	movs	r2, #32
  402dc8:	701a      	strb	r2, [r3, #0]
	}
	
	if (num4[0] == '9') {
  402dca:	6a3b      	ldr	r3, [r7, #32]
  402dcc:	781b      	ldrb	r3, [r3, #0]
  402dce:	2b39      	cmp	r3, #57	; 0x39
  402dd0:	d102      	bne.n	402dd8 <writePasswordToOLED+0x84>
		num4[0] = ' ';
  402dd2:	6a3b      	ldr	r3, [r7, #32]
  402dd4:	2220      	movs	r2, #32
  402dd6:	701a      	strb	r2, [r3, #0]
	}
	
	gfx_mono_draw_string(num1, 0, 14, &sysfont);
  402dd8:	4b0f      	ldr	r3, [pc, #60]	; (402e18 <writePasswordToOLED+0xc4>)
  402dda:	220e      	movs	r2, #14
  402ddc:	2100      	movs	r1, #0
  402dde:	68b8      	ldr	r0, [r7, #8]
  402de0:	4c0e      	ldr	r4, [pc, #56]	; (402e1c <writePasswordToOLED+0xc8>)
  402de2:	47a0      	blx	r4
	gfx_mono_draw_string(num2, 20, 14, &sysfont);
  402de4:	4b0c      	ldr	r3, [pc, #48]	; (402e18 <writePasswordToOLED+0xc4>)
  402de6:	220e      	movs	r2, #14
  402de8:	2114      	movs	r1, #20
  402dea:	6878      	ldr	r0, [r7, #4]
  402dec:	4c0b      	ldr	r4, [pc, #44]	; (402e1c <writePasswordToOLED+0xc8>)
  402dee:	47a0      	blx	r4
	gfx_mono_draw_string(num3, 40, 14, &sysfont);
  402df0:	4b09      	ldr	r3, [pc, #36]	; (402e18 <writePasswordToOLED+0xc4>)
  402df2:	220e      	movs	r2, #14
  402df4:	2128      	movs	r1, #40	; 0x28
  402df6:	6838      	ldr	r0, [r7, #0]
  402df8:	4c08      	ldr	r4, [pc, #32]	; (402e1c <writePasswordToOLED+0xc8>)
  402dfa:	47a0      	blx	r4
	gfx_mono_draw_string(num4, 60, 14, &sysfont);
  402dfc:	4b06      	ldr	r3, [pc, #24]	; (402e18 <writePasswordToOLED+0xc4>)
  402dfe:	220e      	movs	r2, #14
  402e00:	213c      	movs	r1, #60	; 0x3c
  402e02:	6a38      	ldr	r0, [r7, #32]
  402e04:	4c05      	ldr	r4, [pc, #20]	; (402e1c <writePasswordToOLED+0xc8>)
  402e06:	47a0      	blx	r4
}
  402e08:	bf00      	nop
  402e0a:	3714      	adds	r7, #20
  402e0c:	46bd      	mov	sp, r7
  402e0e:	bd90      	pop	{r4, r7, pc}
  402e10:	004084ec 	.word	0x004084ec
  402e14:	00403595 	.word	0x00403595
  402e18:	2040000c 	.word	0x2040000c
  402e1c:	004009f1 	.word	0x004009f1

00402e20 <eraseOLEDCima>:

void eraseOLEDCima() {
  402e20:	b598      	push	{r3, r4, r7, lr}
  402e22:	af00      	add	r7, sp, #0
	gfx_mono_draw_string("             ", 0, 0, &sysfont);
  402e24:	4b03      	ldr	r3, [pc, #12]	; (402e34 <eraseOLEDCima+0x14>)
  402e26:	2200      	movs	r2, #0
  402e28:	2100      	movs	r1, #0
  402e2a:	4803      	ldr	r0, [pc, #12]	; (402e38 <eraseOLEDCima+0x18>)
  402e2c:	4c03      	ldr	r4, [pc, #12]	; (402e3c <eraseOLEDCima+0x1c>)
  402e2e:	47a0      	blx	r4
}
  402e30:	bf00      	nop
  402e32:	bd98      	pop	{r3, r4, r7, pc}
  402e34:	2040000c 	.word	0x2040000c
  402e38:	004084f0 	.word	0x004084f0
  402e3c:	004009f1 	.word	0x004009f1

00402e40 <eraseOLEDBaixo>:

void eraseOLEDBaixo() {
  402e40:	b598      	push	{r3, r4, r7, lr}
  402e42:	af00      	add	r7, sp, #0
	gfx_mono_draw_string("             ", 0, 14, &sysfont);
  402e44:	4b03      	ldr	r3, [pc, #12]	; (402e54 <eraseOLEDBaixo+0x14>)
  402e46:	220e      	movs	r2, #14
  402e48:	2100      	movs	r1, #0
  402e4a:	4803      	ldr	r0, [pc, #12]	; (402e58 <eraseOLEDBaixo+0x18>)
  402e4c:	4c03      	ldr	r4, [pc, #12]	; (402e5c <eraseOLEDBaixo+0x1c>)
  402e4e:	47a0      	blx	r4
}
  402e50:	bf00      	nop
  402e52:	bd98      	pop	{r3, r4, r7, pc}
  402e54:	2040000c 	.word	0x2040000c
  402e58:	004084f0 	.word	0x004084f0
  402e5c:	004009f1 	.word	0x004009f1

00402e60 <all_leds_off>:

void all_leds_off() {
  402e60:	b580      	push	{r7, lr}
  402e62:	af00      	add	r7, sp, #0
	pio_set(LED_1_PIO, LED_1_IDX_MASK);
  402e64:	2101      	movs	r1, #1
  402e66:	4807      	ldr	r0, [pc, #28]	; (402e84 <all_leds_off+0x24>)
  402e68:	4b07      	ldr	r3, [pc, #28]	; (402e88 <all_leds_off+0x28>)
  402e6a:	4798      	blx	r3
	pio_set(LED_2_PIO, LED_2_IDX_MASK);
  402e6c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402e70:	4806      	ldr	r0, [pc, #24]	; (402e8c <all_leds_off+0x2c>)
  402e72:	4b05      	ldr	r3, [pc, #20]	; (402e88 <all_leds_off+0x28>)
  402e74:	4798      	blx	r3
	pio_set(LED_3_PIO, LED_3_IDX_MASK);
  402e76:	2104      	movs	r1, #4
  402e78:	4805      	ldr	r0, [pc, #20]	; (402e90 <all_leds_off+0x30>)
  402e7a:	4b03      	ldr	r3, [pc, #12]	; (402e88 <all_leds_off+0x28>)
  402e7c:	4798      	blx	r3
}
  402e7e:	bf00      	nop
  402e80:	bd80      	pop	{r7, pc}
  402e82:	bf00      	nop
  402e84:	400e0e00 	.word	0x400e0e00
  402e88:	00401d1d 	.word	0x00401d1d
  402e8c:	400e1200 	.word	0x400e1200
  402e90:	400e1000 	.word	0x400e1000

00402e94 <all_leds_on>:

void all_leds_on() {
  402e94:	b580      	push	{r7, lr}
  402e96:	af00      	add	r7, sp, #0
	pio_clear(LED_1_PIO, LED_1_IDX_MASK);
  402e98:	2101      	movs	r1, #1
  402e9a:	4807      	ldr	r0, [pc, #28]	; (402eb8 <all_leds_on+0x24>)
  402e9c:	4b07      	ldr	r3, [pc, #28]	; (402ebc <all_leds_on+0x28>)
  402e9e:	4798      	blx	r3
	pio_clear(LED_2_PIO, LED_2_IDX_MASK);
  402ea0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402ea4:	4806      	ldr	r0, [pc, #24]	; (402ec0 <all_leds_on+0x2c>)
  402ea6:	4b05      	ldr	r3, [pc, #20]	; (402ebc <all_leds_on+0x28>)
  402ea8:	4798      	blx	r3
	pio_clear(LED_3_PIO, LED_3_IDX_MASK);
  402eaa:	2104      	movs	r1, #4
  402eac:	4805      	ldr	r0, [pc, #20]	; (402ec4 <all_leds_on+0x30>)
  402eae:	4b03      	ldr	r3, [pc, #12]	; (402ebc <all_leds_on+0x28>)
  402eb0:	4798      	blx	r3
}
  402eb2:	bf00      	nop
  402eb4:	bd80      	pop	{r7, pc}
  402eb6:	bf00      	nop
  402eb8:	400e0e00 	.word	0x400e0e00
  402ebc:	00401d39 	.word	0x00401d39
  402ec0:	400e1200 	.word	0x400e1200
  402ec4:	400e1000 	.word	0x400e1000

00402ec8 <main>:

int main(void) {
  402ec8:	b590      	push	{r4, r7, lr}
  402eca:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
  402ece:	af02      	add	r7, sp, #8
	board_init();
  402ed0:	4b9b      	ldr	r3, [pc, #620]	; (403140 <main+0x278>)
  402ed2:	4798      	blx	r3
	sysclk_init();
  402ed4:	4b9b      	ldr	r3, [pc, #620]	; (403144 <main+0x27c>)
  402ed6:	4798      	blx	r3
	delay_init();
	io_init();
  402ed8:	4b9b      	ldr	r3, [pc, #620]	; (403148 <main+0x280>)
  402eda:	4798      	blx	r3
	gfx_mono_ssd1306_init();
  402edc:	4b9b      	ldr	r3, [pc, #620]	; (40314c <main+0x284>)
  402ede:	4798      	blx	r3
  
	int senha[4] = {1, 1, 2, 3};
  402ee0:	4b9b      	ldr	r3, [pc, #620]	; (403150 <main+0x288>)
  402ee2:	f507 7404 	add.w	r4, r7, #528	; 0x210
  402ee6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  402ee8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int tentativa[4] = {9, 9, 9, 9};
  402eec:	4b99      	ldr	r3, [pc, #612]	; (403154 <main+0x28c>)
  402eee:	f507 7400 	add.w	r4, r7, #512	; 0x200
  402ef2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  402ef4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int n = 0;
  402ef8:	2300      	movs	r3, #0
  402efa:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	
	char num1[128], num2[128], num3[128], num4[128];
	
	gfx_mono_draw_string("Cofre Fechado", 0, 0, &sysfont);
  402efe:	4b96      	ldr	r3, [pc, #600]	; (403158 <main+0x290>)
  402f00:	2200      	movs	r2, #0
  402f02:	2100      	movs	r1, #0
  402f04:	4895      	ldr	r0, [pc, #596]	; (40315c <main+0x294>)
  402f06:	4c96      	ldr	r4, [pc, #600]	; (403160 <main+0x298>)
  402f08:	47a0      	blx	r4
  
	while (1) {
		
		if (estado == 2) {
  402f0a:	4b96      	ldr	r3, [pc, #600]	; (403164 <main+0x29c>)
  402f0c:	781b      	ldrb	r3, [r3, #0]
  402f0e:	b2db      	uxtb	r3, r3
  402f10:	2b02      	cmp	r3, #2
  402f12:	d10c      	bne.n	402f2e <main+0x66>
			eraseOLEDBaixo();
  402f14:	4b94      	ldr	r3, [pc, #592]	; (403168 <main+0x2a0>)
  402f16:	4798      	blx	r3
			eraseOLEDCima();
  402f18:	4b94      	ldr	r3, [pc, #592]	; (40316c <main+0x2a4>)
  402f1a:	4798      	blx	r3
			gfx_mono_draw_string("Cofre Fechado", 0, 0, &sysfont);
  402f1c:	4b8e      	ldr	r3, [pc, #568]	; (403158 <main+0x290>)
  402f1e:	2200      	movs	r2, #0
  402f20:	2100      	movs	r1, #0
  402f22:	488e      	ldr	r0, [pc, #568]	; (40315c <main+0x294>)
  402f24:	4c8e      	ldr	r4, [pc, #568]	; (403160 <main+0x298>)
  402f26:	47a0      	blx	r4
			estado = 0;
  402f28:	4b8e      	ldr	r3, [pc, #568]	; (403164 <main+0x29c>)
  402f2a:	2200      	movs	r2, #0
  402f2c:	701a      	strb	r2, [r3, #0]
		}
		
		if (estado != 3) {
  402f2e:	4b8d      	ldr	r3, [pc, #564]	; (403164 <main+0x29c>)
  402f30:	781b      	ldrb	r3, [r3, #0]
  402f32:	b2db      	uxtb	r3, r3
  402f34:	2b03      	cmp	r3, #3
  402f36:	d0e8      	beq.n	402f0a <main+0x42>
			if (n == 4) {
  402f38:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
  402f3c:	2b04      	cmp	r3, #4
  402f3e:	d16f      	bne.n	403020 <main+0x158>
				int errou = 0;
  402f40:	2300      	movs	r3, #0
  402f42:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
				for (int i = 0; i < n; i++) {
  402f46:	2300      	movs	r3, #0
  402f48:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  402f4c:	e019      	b.n	402f82 <main+0xba>
					if (tentativa[i] != senha[i]) {
  402f4e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
  402f52:	009b      	lsls	r3, r3, #2
  402f54:	f507 720c 	add.w	r2, r7, #560	; 0x230
  402f58:	4413      	add	r3, r2
  402f5a:	f853 2c30 	ldr.w	r2, [r3, #-48]
  402f5e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
  402f62:	009b      	lsls	r3, r3, #2
  402f64:	f507 710c 	add.w	r1, r7, #560	; 0x230
  402f68:	440b      	add	r3, r1
  402f6a:	f853 3c20 	ldr.w	r3, [r3, #-32]
  402f6e:	429a      	cmp	r2, r3
  402f70:	d002      	beq.n	402f78 <main+0xb0>
						errou = 1;
  402f72:	2301      	movs	r3, #1
  402f74:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
				for (int i = 0; i < n; i++) {
  402f78:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
  402f7c:	3301      	adds	r3, #1
  402f7e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  402f82:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
  402f86:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
  402f8a:	429a      	cmp	r2, r3
  402f8c:	dbdf      	blt.n	402f4e <main+0x86>
					}
				}
				
				if (errou) {
  402f8e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
  402f92:	2b00      	cmp	r3, #0
  402f94:	d01a      	beq.n	402fcc <main+0x104>
					eraseOLEDCima();
  402f96:	4b75      	ldr	r3, [pc, #468]	; (40316c <main+0x2a4>)
  402f98:	4798      	blx	r3
					eraseOLEDBaixo();
  402f9a:	4b73      	ldr	r3, [pc, #460]	; (403168 <main+0x2a0>)
  402f9c:	4798      	blx	r3
					gfx_mono_draw_string("Senha errada", 0, 0, &sysfont);
  402f9e:	4b6e      	ldr	r3, [pc, #440]	; (403158 <main+0x290>)
  402fa0:	2200      	movs	r2, #0
  402fa2:	2100      	movs	r1, #0
  402fa4:	4872      	ldr	r0, [pc, #456]	; (403170 <main+0x2a8>)
  402fa6:	4c6e      	ldr	r4, [pc, #440]	; (403160 <main+0x298>)
  402fa8:	47a0      	blx	r4
					gfx_mono_draw_string("Bloqueado", 0, 14, &sysfont);
  402faa:	4b6b      	ldr	r3, [pc, #428]	; (403158 <main+0x290>)
  402fac:	220e      	movs	r2, #14
  402fae:	2100      	movs	r1, #0
  402fb0:	4870      	ldr	r0, [pc, #448]	; (403174 <main+0x2ac>)
  402fb2:	4c6b      	ldr	r4, [pc, #428]	; (403160 <main+0x298>)
  402fb4:	47a0      	blx	r4
					estado = 3;
  402fb6:	4b6b      	ldr	r3, [pc, #428]	; (403164 <main+0x29c>)
  402fb8:	2203      	movs	r2, #3
  402fba:	701a      	strb	r2, [r3, #0]
					RTT_init(4, 16, RTT_MR_ALMIEN);
  402fbc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  402fc0:	2110      	movs	r1, #16
  402fc2:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
  402fc6:	4b6c      	ldr	r3, [pc, #432]	; (403178 <main+0x2b0>)
  402fc8:	4798      	blx	r3
  402fca:	e00e      	b.n	402fea <main+0x122>
				} else {
					estado = 1;
  402fcc:	4b65      	ldr	r3, [pc, #404]	; (403164 <main+0x29c>)
  402fce:	2201      	movs	r2, #1
  402fd0:	701a      	strb	r2, [r3, #0]
					eraseOLEDCima();
  402fd2:	4b66      	ldr	r3, [pc, #408]	; (40316c <main+0x2a4>)
  402fd4:	4798      	blx	r3
					eraseOLEDBaixo();
  402fd6:	4b64      	ldr	r3, [pc, #400]	; (403168 <main+0x2a0>)
  402fd8:	4798      	blx	r3
					all_leds_off();
  402fda:	4b68      	ldr	r3, [pc, #416]	; (40317c <main+0x2b4>)
  402fdc:	4798      	blx	r3
					gfx_mono_draw_string("Cofre Aberto", 0, 0, &sysfont);
  402fde:	4b5e      	ldr	r3, [pc, #376]	; (403158 <main+0x290>)
  402fe0:	2200      	movs	r2, #0
  402fe2:	2100      	movs	r1, #0
  402fe4:	4866      	ldr	r0, [pc, #408]	; (403180 <main+0x2b8>)
  402fe6:	4c5e      	ldr	r4, [pc, #376]	; (403160 <main+0x298>)
  402fe8:	47a0      	blx	r4
				}
				
				for (int i = 0; i < n; i++) {
  402fea:	2300      	movs	r3, #0
  402fec:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
  402ff0:	e00d      	b.n	40300e <main+0x146>
					tentativa[i] = 9;
  402ff2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
  402ff6:	009b      	lsls	r3, r3, #2
  402ff8:	f507 720c 	add.w	r2, r7, #560	; 0x230
  402ffc:	4413      	add	r3, r2
  402ffe:	2209      	movs	r2, #9
  403000:	f843 2c30 	str.w	r2, [r3, #-48]
				for (int i = 0; i < n; i++) {
  403004:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
  403008:	3301      	adds	r3, #1
  40300a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
  40300e:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
  403012:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
  403016:	429a      	cmp	r2, r3
  403018:	dbeb      	blt.n	402ff2 <main+0x12a>
				}
				
				n = 0;
  40301a:	2300      	movs	r3, #0
  40301c:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
			}
			
			if (but1_flag) {
  403020:	4b58      	ldr	r3, [pc, #352]	; (403184 <main+0x2bc>)
  403022:	781b      	ldrb	r3, [r3, #0]
  403024:	b2db      	uxtb	r3, r3
  403026:	2b00      	cmp	r3, #0
  403028:	d034      	beq.n	403094 <main+0x1cc>
				if (estado == 0) {
  40302a:	4b4e      	ldr	r3, [pc, #312]	; (403164 <main+0x29c>)
  40302c:	781b      	ldrb	r3, [r3, #0]
  40302e:	b2db      	uxtb	r3, r3
  403030:	2b00      	cmp	r3, #0
  403032:	d11d      	bne.n	403070 <main+0x1a8>
					tentativa[n] = 1;
  403034:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
  403038:	009b      	lsls	r3, r3, #2
  40303a:	f507 720c 	add.w	r2, r7, #560	; 0x230
  40303e:	4413      	add	r3, r2
  403040:	2201      	movs	r2, #1
  403042:	f843 2c30 	str.w	r2, [r3, #-48]
					n++;
  403046:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
  40304a:	3301      	adds	r3, #1
  40304c:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
					eraseOLEDBaixo();
  403050:	4b45      	ldr	r3, [pc, #276]	; (403168 <main+0x2a0>)
  403052:	4798      	blx	r3
					writePasswordToOLED(tentativa, num1, num2, num3, num4);
  403054:	f107 0480 	add.w	r4, r7, #128	; 0x80
  403058:	f507 7280 	add.w	r2, r7, #256	; 0x100
  40305c:	f507 71c0 	add.w	r1, r7, #384	; 0x180
  403060:	f507 7000 	add.w	r0, r7, #512	; 0x200
  403064:	463b      	mov	r3, r7
  403066:	9300      	str	r3, [sp, #0]
  403068:	4623      	mov	r3, r4
  40306a:	4c47      	ldr	r4, [pc, #284]	; (403188 <main+0x2c0>)
  40306c:	47a0      	blx	r4
  40306e:	e00e      	b.n	40308e <main+0x1c6>
					} else {
					estado = 0;
  403070:	4b3c      	ldr	r3, [pc, #240]	; (403164 <main+0x29c>)
  403072:	2200      	movs	r2, #0
  403074:	701a      	strb	r2, [r3, #0]
					all_leds_on();
  403076:	4b45      	ldr	r3, [pc, #276]	; (40318c <main+0x2c4>)
  403078:	4798      	blx	r3
					eraseOLEDBaixo();
  40307a:	4b3b      	ldr	r3, [pc, #236]	; (403168 <main+0x2a0>)
  40307c:	4798      	blx	r3
					eraseOLEDCima();
  40307e:	4b3b      	ldr	r3, [pc, #236]	; (40316c <main+0x2a4>)
  403080:	4798      	blx	r3
					gfx_mono_draw_string("Cofre Fechado", 0, 0, &sysfont);
  403082:	4b35      	ldr	r3, [pc, #212]	; (403158 <main+0x290>)
  403084:	2200      	movs	r2, #0
  403086:	2100      	movs	r1, #0
  403088:	4834      	ldr	r0, [pc, #208]	; (40315c <main+0x294>)
  40308a:	4c35      	ldr	r4, [pc, #212]	; (403160 <main+0x298>)
  40308c:	47a0      	blx	r4
				}
				but1_flag = 0;
  40308e:	4b3d      	ldr	r3, [pc, #244]	; (403184 <main+0x2bc>)
  403090:	2200      	movs	r2, #0
  403092:	701a      	strb	r2, [r3, #0]
			}
			
			if (but2_flag) {
  403094:	4b3e      	ldr	r3, [pc, #248]	; (403190 <main+0x2c8>)
  403096:	781b      	ldrb	r3, [r3, #0]
  403098:	b2db      	uxtb	r3, r3
  40309a:	2b00      	cmp	r3, #0
  40309c:	d024      	beq.n	4030e8 <main+0x220>
				if (estado == 0) {
  40309e:	4b31      	ldr	r3, [pc, #196]	; (403164 <main+0x29c>)
  4030a0:	781b      	ldrb	r3, [r3, #0]
  4030a2:	b2db      	uxtb	r3, r3
  4030a4:	2b00      	cmp	r3, #0
  4030a6:	d11c      	bne.n	4030e2 <main+0x21a>
					tentativa[n] = 2;
  4030a8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
  4030ac:	009b      	lsls	r3, r3, #2
  4030ae:	f507 720c 	add.w	r2, r7, #560	; 0x230
  4030b2:	4413      	add	r3, r2
  4030b4:	2202      	movs	r2, #2
  4030b6:	f843 2c30 	str.w	r2, [r3, #-48]
					n++;
  4030ba:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
  4030be:	3301      	adds	r3, #1
  4030c0:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
					eraseOLEDBaixo();
  4030c4:	4b28      	ldr	r3, [pc, #160]	; (403168 <main+0x2a0>)
  4030c6:	4798      	blx	r3
					writePasswordToOLED(tentativa, num1, num2, num3, num4);
  4030c8:	f107 0480 	add.w	r4, r7, #128	; 0x80
  4030cc:	f507 7280 	add.w	r2, r7, #256	; 0x100
  4030d0:	f507 71c0 	add.w	r1, r7, #384	; 0x180
  4030d4:	f507 7000 	add.w	r0, r7, #512	; 0x200
  4030d8:	463b      	mov	r3, r7
  4030da:	9300      	str	r3, [sp, #0]
  4030dc:	4623      	mov	r3, r4
  4030de:	4c2a      	ldr	r4, [pc, #168]	; (403188 <main+0x2c0>)
  4030e0:	47a0      	blx	r4
				}
				but2_flag = 0;
  4030e2:	4b2b      	ldr	r3, [pc, #172]	; (403190 <main+0x2c8>)
  4030e4:	2200      	movs	r2, #0
  4030e6:	701a      	strb	r2, [r3, #0]
			}
			
			if (but3_flag) {
  4030e8:	4b2a      	ldr	r3, [pc, #168]	; (403194 <main+0x2cc>)
  4030ea:	781b      	ldrb	r3, [r3, #0]
  4030ec:	b2db      	uxtb	r3, r3
  4030ee:	2b00      	cmp	r3, #0
  4030f0:	f43f af0b 	beq.w	402f0a <main+0x42>
				if (estado == 0) {
  4030f4:	4b1b      	ldr	r3, [pc, #108]	; (403164 <main+0x29c>)
  4030f6:	781b      	ldrb	r3, [r3, #0]
  4030f8:	b2db      	uxtb	r3, r3
  4030fa:	2b00      	cmp	r3, #0
  4030fc:	d11c      	bne.n	403138 <main+0x270>
					tentativa[n] = 3;
  4030fe:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
  403102:	009b      	lsls	r3, r3, #2
  403104:	f507 720c 	add.w	r2, r7, #560	; 0x230
  403108:	4413      	add	r3, r2
  40310a:	2203      	movs	r2, #3
  40310c:	f843 2c30 	str.w	r2, [r3, #-48]
					n++;
  403110:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
  403114:	3301      	adds	r3, #1
  403116:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
					eraseOLEDBaixo();
  40311a:	4b13      	ldr	r3, [pc, #76]	; (403168 <main+0x2a0>)
  40311c:	4798      	blx	r3
					writePasswordToOLED(tentativa, num1, num2, num3, num4);
  40311e:	f107 0480 	add.w	r4, r7, #128	; 0x80
  403122:	f507 7280 	add.w	r2, r7, #256	; 0x100
  403126:	f507 71c0 	add.w	r1, r7, #384	; 0x180
  40312a:	f507 7000 	add.w	r0, r7, #512	; 0x200
  40312e:	463b      	mov	r3, r7
  403130:	9300      	str	r3, [sp, #0]
  403132:	4623      	mov	r3, r4
  403134:	4c14      	ldr	r4, [pc, #80]	; (403188 <main+0x2c0>)
  403136:	47a0      	blx	r4
				}
				but3_flag = 0;
  403138:	4b16      	ldr	r3, [pc, #88]	; (403194 <main+0x2cc>)
  40313a:	2200      	movs	r2, #0
  40313c:	701a      	strb	r2, [r3, #0]
		if (estado == 2) {
  40313e:	e6e4      	b.n	402f0a <main+0x42>
  403140:	00401c6d 	.word	0x00401c6d
  403144:	004017a9 	.word	0x004017a9
  403148:	00402ae5 	.word	0x00402ae5
  40314c:	00400af5 	.word	0x00400af5
  403150:	0040853c 	.word	0x0040853c
  403154:	0040854c 	.word	0x0040854c
  403158:	2040000c 	.word	0x2040000c
  40315c:	00408500 	.word	0x00408500
  403160:	004009f1 	.word	0x004009f1
  403164:	20400c6f 	.word	0x20400c6f
  403168:	00402e41 	.word	0x00402e41
  40316c:	00402e21 	.word	0x00402e21
  403170:	00408510 	.word	0x00408510
  403174:	00408520 	.word	0x00408520
  403178:	00402c7d 	.word	0x00402c7d
  40317c:	00402e61 	.word	0x00402e61
  403180:	0040852c 	.word	0x0040852c
  403184:	20400c6c 	.word	0x20400c6c
  403188:	00402d55 	.word	0x00402d55
  40318c:	00402e95 	.word	0x00402e95
  403190:	20400c6d 	.word	0x20400c6d
  403194:	20400c6e 	.word	0x20400c6e

00403198 <__aeabi_uldivmod>:
  403198:	b953      	cbnz	r3, 4031b0 <__aeabi_uldivmod+0x18>
  40319a:	b94a      	cbnz	r2, 4031b0 <__aeabi_uldivmod+0x18>
  40319c:	2900      	cmp	r1, #0
  40319e:	bf08      	it	eq
  4031a0:	2800      	cmpeq	r0, #0
  4031a2:	bf1c      	itt	ne
  4031a4:	f04f 31ff 	movne.w	r1, #4294967295
  4031a8:	f04f 30ff 	movne.w	r0, #4294967295
  4031ac:	f000 b97a 	b.w	4034a4 <__aeabi_idiv0>
  4031b0:	f1ad 0c08 	sub.w	ip, sp, #8
  4031b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4031b8:	f000 f806 	bl	4031c8 <__udivmoddi4>
  4031bc:	f8dd e004 	ldr.w	lr, [sp, #4]
  4031c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4031c4:	b004      	add	sp, #16
  4031c6:	4770      	bx	lr

004031c8 <__udivmoddi4>:
  4031c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4031cc:	468c      	mov	ip, r1
  4031ce:	460d      	mov	r5, r1
  4031d0:	4604      	mov	r4, r0
  4031d2:	9e08      	ldr	r6, [sp, #32]
  4031d4:	2b00      	cmp	r3, #0
  4031d6:	d151      	bne.n	40327c <__udivmoddi4+0xb4>
  4031d8:	428a      	cmp	r2, r1
  4031da:	4617      	mov	r7, r2
  4031dc:	d96d      	bls.n	4032ba <__udivmoddi4+0xf2>
  4031de:	fab2 fe82 	clz	lr, r2
  4031e2:	f1be 0f00 	cmp.w	lr, #0
  4031e6:	d00b      	beq.n	403200 <__udivmoddi4+0x38>
  4031e8:	f1ce 0c20 	rsb	ip, lr, #32
  4031ec:	fa01 f50e 	lsl.w	r5, r1, lr
  4031f0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4031f4:	fa02 f70e 	lsl.w	r7, r2, lr
  4031f8:	ea4c 0c05 	orr.w	ip, ip, r5
  4031fc:	fa00 f40e 	lsl.w	r4, r0, lr
  403200:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403204:	0c25      	lsrs	r5, r4, #16
  403206:	fbbc f8fa 	udiv	r8, ip, sl
  40320a:	fa1f f987 	uxth.w	r9, r7
  40320e:	fb0a cc18 	mls	ip, sl, r8, ip
  403212:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403216:	fb08 f309 	mul.w	r3, r8, r9
  40321a:	42ab      	cmp	r3, r5
  40321c:	d90a      	bls.n	403234 <__udivmoddi4+0x6c>
  40321e:	19ed      	adds	r5, r5, r7
  403220:	f108 32ff 	add.w	r2, r8, #4294967295
  403224:	f080 8123 	bcs.w	40346e <__udivmoddi4+0x2a6>
  403228:	42ab      	cmp	r3, r5
  40322a:	f240 8120 	bls.w	40346e <__udivmoddi4+0x2a6>
  40322e:	f1a8 0802 	sub.w	r8, r8, #2
  403232:	443d      	add	r5, r7
  403234:	1aed      	subs	r5, r5, r3
  403236:	b2a4      	uxth	r4, r4
  403238:	fbb5 f0fa 	udiv	r0, r5, sl
  40323c:	fb0a 5510 	mls	r5, sl, r0, r5
  403240:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403244:	fb00 f909 	mul.w	r9, r0, r9
  403248:	45a1      	cmp	r9, r4
  40324a:	d909      	bls.n	403260 <__udivmoddi4+0x98>
  40324c:	19e4      	adds	r4, r4, r7
  40324e:	f100 33ff 	add.w	r3, r0, #4294967295
  403252:	f080 810a 	bcs.w	40346a <__udivmoddi4+0x2a2>
  403256:	45a1      	cmp	r9, r4
  403258:	f240 8107 	bls.w	40346a <__udivmoddi4+0x2a2>
  40325c:	3802      	subs	r0, #2
  40325e:	443c      	add	r4, r7
  403260:	eba4 0409 	sub.w	r4, r4, r9
  403264:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403268:	2100      	movs	r1, #0
  40326a:	2e00      	cmp	r6, #0
  40326c:	d061      	beq.n	403332 <__udivmoddi4+0x16a>
  40326e:	fa24 f40e 	lsr.w	r4, r4, lr
  403272:	2300      	movs	r3, #0
  403274:	6034      	str	r4, [r6, #0]
  403276:	6073      	str	r3, [r6, #4]
  403278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40327c:	428b      	cmp	r3, r1
  40327e:	d907      	bls.n	403290 <__udivmoddi4+0xc8>
  403280:	2e00      	cmp	r6, #0
  403282:	d054      	beq.n	40332e <__udivmoddi4+0x166>
  403284:	2100      	movs	r1, #0
  403286:	e886 0021 	stmia.w	r6, {r0, r5}
  40328a:	4608      	mov	r0, r1
  40328c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403290:	fab3 f183 	clz	r1, r3
  403294:	2900      	cmp	r1, #0
  403296:	f040 808e 	bne.w	4033b6 <__udivmoddi4+0x1ee>
  40329a:	42ab      	cmp	r3, r5
  40329c:	d302      	bcc.n	4032a4 <__udivmoddi4+0xdc>
  40329e:	4282      	cmp	r2, r0
  4032a0:	f200 80fa 	bhi.w	403498 <__udivmoddi4+0x2d0>
  4032a4:	1a84      	subs	r4, r0, r2
  4032a6:	eb65 0503 	sbc.w	r5, r5, r3
  4032aa:	2001      	movs	r0, #1
  4032ac:	46ac      	mov	ip, r5
  4032ae:	2e00      	cmp	r6, #0
  4032b0:	d03f      	beq.n	403332 <__udivmoddi4+0x16a>
  4032b2:	e886 1010 	stmia.w	r6, {r4, ip}
  4032b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4032ba:	b912      	cbnz	r2, 4032c2 <__udivmoddi4+0xfa>
  4032bc:	2701      	movs	r7, #1
  4032be:	fbb7 f7f2 	udiv	r7, r7, r2
  4032c2:	fab7 fe87 	clz	lr, r7
  4032c6:	f1be 0f00 	cmp.w	lr, #0
  4032ca:	d134      	bne.n	403336 <__udivmoddi4+0x16e>
  4032cc:	1beb      	subs	r3, r5, r7
  4032ce:	0c3a      	lsrs	r2, r7, #16
  4032d0:	fa1f fc87 	uxth.w	ip, r7
  4032d4:	2101      	movs	r1, #1
  4032d6:	fbb3 f8f2 	udiv	r8, r3, r2
  4032da:	0c25      	lsrs	r5, r4, #16
  4032dc:	fb02 3318 	mls	r3, r2, r8, r3
  4032e0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4032e4:	fb0c f308 	mul.w	r3, ip, r8
  4032e8:	42ab      	cmp	r3, r5
  4032ea:	d907      	bls.n	4032fc <__udivmoddi4+0x134>
  4032ec:	19ed      	adds	r5, r5, r7
  4032ee:	f108 30ff 	add.w	r0, r8, #4294967295
  4032f2:	d202      	bcs.n	4032fa <__udivmoddi4+0x132>
  4032f4:	42ab      	cmp	r3, r5
  4032f6:	f200 80d1 	bhi.w	40349c <__udivmoddi4+0x2d4>
  4032fa:	4680      	mov	r8, r0
  4032fc:	1aed      	subs	r5, r5, r3
  4032fe:	b2a3      	uxth	r3, r4
  403300:	fbb5 f0f2 	udiv	r0, r5, r2
  403304:	fb02 5510 	mls	r5, r2, r0, r5
  403308:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40330c:	fb0c fc00 	mul.w	ip, ip, r0
  403310:	45a4      	cmp	ip, r4
  403312:	d907      	bls.n	403324 <__udivmoddi4+0x15c>
  403314:	19e4      	adds	r4, r4, r7
  403316:	f100 33ff 	add.w	r3, r0, #4294967295
  40331a:	d202      	bcs.n	403322 <__udivmoddi4+0x15a>
  40331c:	45a4      	cmp	ip, r4
  40331e:	f200 80b8 	bhi.w	403492 <__udivmoddi4+0x2ca>
  403322:	4618      	mov	r0, r3
  403324:	eba4 040c 	sub.w	r4, r4, ip
  403328:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40332c:	e79d      	b.n	40326a <__udivmoddi4+0xa2>
  40332e:	4631      	mov	r1, r6
  403330:	4630      	mov	r0, r6
  403332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403336:	f1ce 0420 	rsb	r4, lr, #32
  40333a:	fa05 f30e 	lsl.w	r3, r5, lr
  40333e:	fa07 f70e 	lsl.w	r7, r7, lr
  403342:	fa20 f804 	lsr.w	r8, r0, r4
  403346:	0c3a      	lsrs	r2, r7, #16
  403348:	fa25 f404 	lsr.w	r4, r5, r4
  40334c:	ea48 0803 	orr.w	r8, r8, r3
  403350:	fbb4 f1f2 	udiv	r1, r4, r2
  403354:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403358:	fb02 4411 	mls	r4, r2, r1, r4
  40335c:	fa1f fc87 	uxth.w	ip, r7
  403360:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403364:	fb01 f30c 	mul.w	r3, r1, ip
  403368:	42ab      	cmp	r3, r5
  40336a:	fa00 f40e 	lsl.w	r4, r0, lr
  40336e:	d909      	bls.n	403384 <__udivmoddi4+0x1bc>
  403370:	19ed      	adds	r5, r5, r7
  403372:	f101 30ff 	add.w	r0, r1, #4294967295
  403376:	f080 808a 	bcs.w	40348e <__udivmoddi4+0x2c6>
  40337a:	42ab      	cmp	r3, r5
  40337c:	f240 8087 	bls.w	40348e <__udivmoddi4+0x2c6>
  403380:	3902      	subs	r1, #2
  403382:	443d      	add	r5, r7
  403384:	1aeb      	subs	r3, r5, r3
  403386:	fa1f f588 	uxth.w	r5, r8
  40338a:	fbb3 f0f2 	udiv	r0, r3, r2
  40338e:	fb02 3310 	mls	r3, r2, r0, r3
  403392:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403396:	fb00 f30c 	mul.w	r3, r0, ip
  40339a:	42ab      	cmp	r3, r5
  40339c:	d907      	bls.n	4033ae <__udivmoddi4+0x1e6>
  40339e:	19ed      	adds	r5, r5, r7
  4033a0:	f100 38ff 	add.w	r8, r0, #4294967295
  4033a4:	d26f      	bcs.n	403486 <__udivmoddi4+0x2be>
  4033a6:	42ab      	cmp	r3, r5
  4033a8:	d96d      	bls.n	403486 <__udivmoddi4+0x2be>
  4033aa:	3802      	subs	r0, #2
  4033ac:	443d      	add	r5, r7
  4033ae:	1aeb      	subs	r3, r5, r3
  4033b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4033b4:	e78f      	b.n	4032d6 <__udivmoddi4+0x10e>
  4033b6:	f1c1 0720 	rsb	r7, r1, #32
  4033ba:	fa22 f807 	lsr.w	r8, r2, r7
  4033be:	408b      	lsls	r3, r1
  4033c0:	fa05 f401 	lsl.w	r4, r5, r1
  4033c4:	ea48 0303 	orr.w	r3, r8, r3
  4033c8:	fa20 fe07 	lsr.w	lr, r0, r7
  4033cc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4033d0:	40fd      	lsrs	r5, r7
  4033d2:	ea4e 0e04 	orr.w	lr, lr, r4
  4033d6:	fbb5 f9fc 	udiv	r9, r5, ip
  4033da:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4033de:	fb0c 5519 	mls	r5, ip, r9, r5
  4033e2:	fa1f f883 	uxth.w	r8, r3
  4033e6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4033ea:	fb09 f408 	mul.w	r4, r9, r8
  4033ee:	42ac      	cmp	r4, r5
  4033f0:	fa02 f201 	lsl.w	r2, r2, r1
  4033f4:	fa00 fa01 	lsl.w	sl, r0, r1
  4033f8:	d908      	bls.n	40340c <__udivmoddi4+0x244>
  4033fa:	18ed      	adds	r5, r5, r3
  4033fc:	f109 30ff 	add.w	r0, r9, #4294967295
  403400:	d243      	bcs.n	40348a <__udivmoddi4+0x2c2>
  403402:	42ac      	cmp	r4, r5
  403404:	d941      	bls.n	40348a <__udivmoddi4+0x2c2>
  403406:	f1a9 0902 	sub.w	r9, r9, #2
  40340a:	441d      	add	r5, r3
  40340c:	1b2d      	subs	r5, r5, r4
  40340e:	fa1f fe8e 	uxth.w	lr, lr
  403412:	fbb5 f0fc 	udiv	r0, r5, ip
  403416:	fb0c 5510 	mls	r5, ip, r0, r5
  40341a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40341e:	fb00 f808 	mul.w	r8, r0, r8
  403422:	45a0      	cmp	r8, r4
  403424:	d907      	bls.n	403436 <__udivmoddi4+0x26e>
  403426:	18e4      	adds	r4, r4, r3
  403428:	f100 35ff 	add.w	r5, r0, #4294967295
  40342c:	d229      	bcs.n	403482 <__udivmoddi4+0x2ba>
  40342e:	45a0      	cmp	r8, r4
  403430:	d927      	bls.n	403482 <__udivmoddi4+0x2ba>
  403432:	3802      	subs	r0, #2
  403434:	441c      	add	r4, r3
  403436:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40343a:	eba4 0408 	sub.w	r4, r4, r8
  40343e:	fba0 8902 	umull	r8, r9, r0, r2
  403442:	454c      	cmp	r4, r9
  403444:	46c6      	mov	lr, r8
  403446:	464d      	mov	r5, r9
  403448:	d315      	bcc.n	403476 <__udivmoddi4+0x2ae>
  40344a:	d012      	beq.n	403472 <__udivmoddi4+0x2aa>
  40344c:	b156      	cbz	r6, 403464 <__udivmoddi4+0x29c>
  40344e:	ebba 030e 	subs.w	r3, sl, lr
  403452:	eb64 0405 	sbc.w	r4, r4, r5
  403456:	fa04 f707 	lsl.w	r7, r4, r7
  40345a:	40cb      	lsrs	r3, r1
  40345c:	431f      	orrs	r7, r3
  40345e:	40cc      	lsrs	r4, r1
  403460:	6037      	str	r7, [r6, #0]
  403462:	6074      	str	r4, [r6, #4]
  403464:	2100      	movs	r1, #0
  403466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40346a:	4618      	mov	r0, r3
  40346c:	e6f8      	b.n	403260 <__udivmoddi4+0x98>
  40346e:	4690      	mov	r8, r2
  403470:	e6e0      	b.n	403234 <__udivmoddi4+0x6c>
  403472:	45c2      	cmp	sl, r8
  403474:	d2ea      	bcs.n	40344c <__udivmoddi4+0x284>
  403476:	ebb8 0e02 	subs.w	lr, r8, r2
  40347a:	eb69 0503 	sbc.w	r5, r9, r3
  40347e:	3801      	subs	r0, #1
  403480:	e7e4      	b.n	40344c <__udivmoddi4+0x284>
  403482:	4628      	mov	r0, r5
  403484:	e7d7      	b.n	403436 <__udivmoddi4+0x26e>
  403486:	4640      	mov	r0, r8
  403488:	e791      	b.n	4033ae <__udivmoddi4+0x1e6>
  40348a:	4681      	mov	r9, r0
  40348c:	e7be      	b.n	40340c <__udivmoddi4+0x244>
  40348e:	4601      	mov	r1, r0
  403490:	e778      	b.n	403384 <__udivmoddi4+0x1bc>
  403492:	3802      	subs	r0, #2
  403494:	443c      	add	r4, r7
  403496:	e745      	b.n	403324 <__udivmoddi4+0x15c>
  403498:	4608      	mov	r0, r1
  40349a:	e708      	b.n	4032ae <__udivmoddi4+0xe6>
  40349c:	f1a8 0802 	sub.w	r8, r8, #2
  4034a0:	443d      	add	r5, r7
  4034a2:	e72b      	b.n	4032fc <__udivmoddi4+0x134>

004034a4 <__aeabi_idiv0>:
  4034a4:	4770      	bx	lr
  4034a6:	bf00      	nop

004034a8 <__libc_init_array>:
  4034a8:	b570      	push	{r4, r5, r6, lr}
  4034aa:	4e0f      	ldr	r6, [pc, #60]	; (4034e8 <__libc_init_array+0x40>)
  4034ac:	4d0f      	ldr	r5, [pc, #60]	; (4034ec <__libc_init_array+0x44>)
  4034ae:	1b76      	subs	r6, r6, r5
  4034b0:	10b6      	asrs	r6, r6, #2
  4034b2:	bf18      	it	ne
  4034b4:	2400      	movne	r4, #0
  4034b6:	d005      	beq.n	4034c4 <__libc_init_array+0x1c>
  4034b8:	3401      	adds	r4, #1
  4034ba:	f855 3b04 	ldr.w	r3, [r5], #4
  4034be:	4798      	blx	r3
  4034c0:	42a6      	cmp	r6, r4
  4034c2:	d1f9      	bne.n	4034b8 <__libc_init_array+0x10>
  4034c4:	4e0a      	ldr	r6, [pc, #40]	; (4034f0 <__libc_init_array+0x48>)
  4034c6:	4d0b      	ldr	r5, [pc, #44]	; (4034f4 <__libc_init_array+0x4c>)
  4034c8:	1b76      	subs	r6, r6, r5
  4034ca:	f005 f98d 	bl	4087e8 <_init>
  4034ce:	10b6      	asrs	r6, r6, #2
  4034d0:	bf18      	it	ne
  4034d2:	2400      	movne	r4, #0
  4034d4:	d006      	beq.n	4034e4 <__libc_init_array+0x3c>
  4034d6:	3401      	adds	r4, #1
  4034d8:	f855 3b04 	ldr.w	r3, [r5], #4
  4034dc:	4798      	blx	r3
  4034de:	42a6      	cmp	r6, r4
  4034e0:	d1f9      	bne.n	4034d6 <__libc_init_array+0x2e>
  4034e2:	bd70      	pop	{r4, r5, r6, pc}
  4034e4:	bd70      	pop	{r4, r5, r6, pc}
  4034e6:	bf00      	nop
  4034e8:	004087f4 	.word	0x004087f4
  4034ec:	004087f4 	.word	0x004087f4
  4034f0:	004087fc 	.word	0x004087fc
  4034f4:	004087f4 	.word	0x004087f4

004034f8 <memset>:
  4034f8:	b470      	push	{r4, r5, r6}
  4034fa:	0786      	lsls	r6, r0, #30
  4034fc:	d046      	beq.n	40358c <memset+0x94>
  4034fe:	1e54      	subs	r4, r2, #1
  403500:	2a00      	cmp	r2, #0
  403502:	d041      	beq.n	403588 <memset+0x90>
  403504:	b2ca      	uxtb	r2, r1
  403506:	4603      	mov	r3, r0
  403508:	e002      	b.n	403510 <memset+0x18>
  40350a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40350e:	d33b      	bcc.n	403588 <memset+0x90>
  403510:	f803 2b01 	strb.w	r2, [r3], #1
  403514:	079d      	lsls	r5, r3, #30
  403516:	d1f8      	bne.n	40350a <memset+0x12>
  403518:	2c03      	cmp	r4, #3
  40351a:	d92e      	bls.n	40357a <memset+0x82>
  40351c:	b2cd      	uxtb	r5, r1
  40351e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403522:	2c0f      	cmp	r4, #15
  403524:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403528:	d919      	bls.n	40355e <memset+0x66>
  40352a:	f103 0210 	add.w	r2, r3, #16
  40352e:	4626      	mov	r6, r4
  403530:	3e10      	subs	r6, #16
  403532:	2e0f      	cmp	r6, #15
  403534:	f842 5c10 	str.w	r5, [r2, #-16]
  403538:	f842 5c0c 	str.w	r5, [r2, #-12]
  40353c:	f842 5c08 	str.w	r5, [r2, #-8]
  403540:	f842 5c04 	str.w	r5, [r2, #-4]
  403544:	f102 0210 	add.w	r2, r2, #16
  403548:	d8f2      	bhi.n	403530 <memset+0x38>
  40354a:	f1a4 0210 	sub.w	r2, r4, #16
  40354e:	f022 020f 	bic.w	r2, r2, #15
  403552:	f004 040f 	and.w	r4, r4, #15
  403556:	3210      	adds	r2, #16
  403558:	2c03      	cmp	r4, #3
  40355a:	4413      	add	r3, r2
  40355c:	d90d      	bls.n	40357a <memset+0x82>
  40355e:	461e      	mov	r6, r3
  403560:	4622      	mov	r2, r4
  403562:	3a04      	subs	r2, #4
  403564:	2a03      	cmp	r2, #3
  403566:	f846 5b04 	str.w	r5, [r6], #4
  40356a:	d8fa      	bhi.n	403562 <memset+0x6a>
  40356c:	1f22      	subs	r2, r4, #4
  40356e:	f022 0203 	bic.w	r2, r2, #3
  403572:	3204      	adds	r2, #4
  403574:	4413      	add	r3, r2
  403576:	f004 0403 	and.w	r4, r4, #3
  40357a:	b12c      	cbz	r4, 403588 <memset+0x90>
  40357c:	b2c9      	uxtb	r1, r1
  40357e:	441c      	add	r4, r3
  403580:	f803 1b01 	strb.w	r1, [r3], #1
  403584:	429c      	cmp	r4, r3
  403586:	d1fb      	bne.n	403580 <memset+0x88>
  403588:	bc70      	pop	{r4, r5, r6}
  40358a:	4770      	bx	lr
  40358c:	4614      	mov	r4, r2
  40358e:	4603      	mov	r3, r0
  403590:	e7c2      	b.n	403518 <memset+0x20>
  403592:	bf00      	nop

00403594 <sprintf>:
  403594:	b40e      	push	{r1, r2, r3}
  403596:	b5f0      	push	{r4, r5, r6, r7, lr}
  403598:	b09c      	sub	sp, #112	; 0x70
  40359a:	ab21      	add	r3, sp, #132	; 0x84
  40359c:	490f      	ldr	r1, [pc, #60]	; (4035dc <sprintf+0x48>)
  40359e:	f853 2b04 	ldr.w	r2, [r3], #4
  4035a2:	9301      	str	r3, [sp, #4]
  4035a4:	4605      	mov	r5, r0
  4035a6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4035aa:	6808      	ldr	r0, [r1, #0]
  4035ac:	9502      	str	r5, [sp, #8]
  4035ae:	f44f 7702 	mov.w	r7, #520	; 0x208
  4035b2:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4035b6:	a902      	add	r1, sp, #8
  4035b8:	9506      	str	r5, [sp, #24]
  4035ba:	f8ad 7014 	strh.w	r7, [sp, #20]
  4035be:	9404      	str	r4, [sp, #16]
  4035c0:	9407      	str	r4, [sp, #28]
  4035c2:	f8ad 6016 	strh.w	r6, [sp, #22]
  4035c6:	f000 f80b 	bl	4035e0 <_svfprintf_r>
  4035ca:	9b02      	ldr	r3, [sp, #8]
  4035cc:	2200      	movs	r2, #0
  4035ce:	701a      	strb	r2, [r3, #0]
  4035d0:	b01c      	add	sp, #112	; 0x70
  4035d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4035d6:	b003      	add	sp, #12
  4035d8:	4770      	bx	lr
  4035da:	bf00      	nop
  4035dc:	20400020 	.word	0x20400020

004035e0 <_svfprintf_r>:
  4035e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4035e4:	b0c3      	sub	sp, #268	; 0x10c
  4035e6:	460c      	mov	r4, r1
  4035e8:	910b      	str	r1, [sp, #44]	; 0x2c
  4035ea:	4692      	mov	sl, r2
  4035ec:	930f      	str	r3, [sp, #60]	; 0x3c
  4035ee:	900c      	str	r0, [sp, #48]	; 0x30
  4035f0:	f002 fa0e 	bl	405a10 <_localeconv_r>
  4035f4:	6803      	ldr	r3, [r0, #0]
  4035f6:	931a      	str	r3, [sp, #104]	; 0x68
  4035f8:	4618      	mov	r0, r3
  4035fa:	f003 f8e1 	bl	4067c0 <strlen>
  4035fe:	89a3      	ldrh	r3, [r4, #12]
  403600:	9019      	str	r0, [sp, #100]	; 0x64
  403602:	0619      	lsls	r1, r3, #24
  403604:	d503      	bpl.n	40360e <_svfprintf_r+0x2e>
  403606:	6923      	ldr	r3, [r4, #16]
  403608:	2b00      	cmp	r3, #0
  40360a:	f001 8003 	beq.w	404614 <_svfprintf_r+0x1034>
  40360e:	2300      	movs	r3, #0
  403610:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403614:	9313      	str	r3, [sp, #76]	; 0x4c
  403616:	9315      	str	r3, [sp, #84]	; 0x54
  403618:	9314      	str	r3, [sp, #80]	; 0x50
  40361a:	9327      	str	r3, [sp, #156]	; 0x9c
  40361c:	9326      	str	r3, [sp, #152]	; 0x98
  40361e:	9318      	str	r3, [sp, #96]	; 0x60
  403620:	931b      	str	r3, [sp, #108]	; 0x6c
  403622:	9309      	str	r3, [sp, #36]	; 0x24
  403624:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  403628:	46c8      	mov	r8, r9
  40362a:	9316      	str	r3, [sp, #88]	; 0x58
  40362c:	9317      	str	r3, [sp, #92]	; 0x5c
  40362e:	f89a 3000 	ldrb.w	r3, [sl]
  403632:	4654      	mov	r4, sl
  403634:	b1e3      	cbz	r3, 403670 <_svfprintf_r+0x90>
  403636:	2b25      	cmp	r3, #37	; 0x25
  403638:	d102      	bne.n	403640 <_svfprintf_r+0x60>
  40363a:	e019      	b.n	403670 <_svfprintf_r+0x90>
  40363c:	2b25      	cmp	r3, #37	; 0x25
  40363e:	d003      	beq.n	403648 <_svfprintf_r+0x68>
  403640:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403644:	2b00      	cmp	r3, #0
  403646:	d1f9      	bne.n	40363c <_svfprintf_r+0x5c>
  403648:	eba4 050a 	sub.w	r5, r4, sl
  40364c:	b185      	cbz	r5, 403670 <_svfprintf_r+0x90>
  40364e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403650:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403652:	f8c8 a000 	str.w	sl, [r8]
  403656:	3301      	adds	r3, #1
  403658:	442a      	add	r2, r5
  40365a:	2b07      	cmp	r3, #7
  40365c:	f8c8 5004 	str.w	r5, [r8, #4]
  403660:	9227      	str	r2, [sp, #156]	; 0x9c
  403662:	9326      	str	r3, [sp, #152]	; 0x98
  403664:	dc7f      	bgt.n	403766 <_svfprintf_r+0x186>
  403666:	f108 0808 	add.w	r8, r8, #8
  40366a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40366c:	442b      	add	r3, r5
  40366e:	9309      	str	r3, [sp, #36]	; 0x24
  403670:	7823      	ldrb	r3, [r4, #0]
  403672:	2b00      	cmp	r3, #0
  403674:	d07f      	beq.n	403776 <_svfprintf_r+0x196>
  403676:	2300      	movs	r3, #0
  403678:	461a      	mov	r2, r3
  40367a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40367e:	4619      	mov	r1, r3
  403680:	930d      	str	r3, [sp, #52]	; 0x34
  403682:	469b      	mov	fp, r3
  403684:	f04f 30ff 	mov.w	r0, #4294967295
  403688:	7863      	ldrb	r3, [r4, #1]
  40368a:	900a      	str	r0, [sp, #40]	; 0x28
  40368c:	f104 0a01 	add.w	sl, r4, #1
  403690:	f10a 0a01 	add.w	sl, sl, #1
  403694:	f1a3 0020 	sub.w	r0, r3, #32
  403698:	2858      	cmp	r0, #88	; 0x58
  40369a:	f200 83c1 	bhi.w	403e20 <_svfprintf_r+0x840>
  40369e:	e8df f010 	tbh	[pc, r0, lsl #1]
  4036a2:	0238      	.short	0x0238
  4036a4:	03bf03bf 	.word	0x03bf03bf
  4036a8:	03bf0240 	.word	0x03bf0240
  4036ac:	03bf03bf 	.word	0x03bf03bf
  4036b0:	03bf03bf 	.word	0x03bf03bf
  4036b4:	024503bf 	.word	0x024503bf
  4036b8:	03bf0203 	.word	0x03bf0203
  4036bc:	026b005d 	.word	0x026b005d
  4036c0:	028603bf 	.word	0x028603bf
  4036c4:	039d039d 	.word	0x039d039d
  4036c8:	039d039d 	.word	0x039d039d
  4036cc:	039d039d 	.word	0x039d039d
  4036d0:	039d039d 	.word	0x039d039d
  4036d4:	03bf039d 	.word	0x03bf039d
  4036d8:	03bf03bf 	.word	0x03bf03bf
  4036dc:	03bf03bf 	.word	0x03bf03bf
  4036e0:	03bf03bf 	.word	0x03bf03bf
  4036e4:	03bf03bf 	.word	0x03bf03bf
  4036e8:	033703bf 	.word	0x033703bf
  4036ec:	03bf0357 	.word	0x03bf0357
  4036f0:	03bf0357 	.word	0x03bf0357
  4036f4:	03bf03bf 	.word	0x03bf03bf
  4036f8:	039803bf 	.word	0x039803bf
  4036fc:	03bf03bf 	.word	0x03bf03bf
  403700:	03bf03ad 	.word	0x03bf03ad
  403704:	03bf03bf 	.word	0x03bf03bf
  403708:	03bf03bf 	.word	0x03bf03bf
  40370c:	03bf0259 	.word	0x03bf0259
  403710:	031e03bf 	.word	0x031e03bf
  403714:	03bf03bf 	.word	0x03bf03bf
  403718:	03bf03bf 	.word	0x03bf03bf
  40371c:	03bf03bf 	.word	0x03bf03bf
  403720:	03bf03bf 	.word	0x03bf03bf
  403724:	03bf03bf 	.word	0x03bf03bf
  403728:	02db02c6 	.word	0x02db02c6
  40372c:	03570357 	.word	0x03570357
  403730:	028b0357 	.word	0x028b0357
  403734:	03bf02db 	.word	0x03bf02db
  403738:	029003bf 	.word	0x029003bf
  40373c:	029d03bf 	.word	0x029d03bf
  403740:	02b401cc 	.word	0x02b401cc
  403744:	03bf0208 	.word	0x03bf0208
  403748:	03bf01e1 	.word	0x03bf01e1
  40374c:	03bf007e 	.word	0x03bf007e
  403750:	020d03bf 	.word	0x020d03bf
  403754:	980d      	ldr	r0, [sp, #52]	; 0x34
  403756:	930f      	str	r3, [sp, #60]	; 0x3c
  403758:	4240      	negs	r0, r0
  40375a:	900d      	str	r0, [sp, #52]	; 0x34
  40375c:	f04b 0b04 	orr.w	fp, fp, #4
  403760:	f89a 3000 	ldrb.w	r3, [sl]
  403764:	e794      	b.n	403690 <_svfprintf_r+0xb0>
  403766:	aa25      	add	r2, sp, #148	; 0x94
  403768:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40376a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40376c:	f003 f896 	bl	40689c <__ssprint_r>
  403770:	b940      	cbnz	r0, 403784 <_svfprintf_r+0x1a4>
  403772:	46c8      	mov	r8, r9
  403774:	e779      	b.n	40366a <_svfprintf_r+0x8a>
  403776:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403778:	b123      	cbz	r3, 403784 <_svfprintf_r+0x1a4>
  40377a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40377c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40377e:	aa25      	add	r2, sp, #148	; 0x94
  403780:	f003 f88c 	bl	40689c <__ssprint_r>
  403784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403786:	899b      	ldrh	r3, [r3, #12]
  403788:	f013 0f40 	tst.w	r3, #64	; 0x40
  40378c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40378e:	bf18      	it	ne
  403790:	f04f 33ff 	movne.w	r3, #4294967295
  403794:	9309      	str	r3, [sp, #36]	; 0x24
  403796:	9809      	ldr	r0, [sp, #36]	; 0x24
  403798:	b043      	add	sp, #268	; 0x10c
  40379a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40379e:	f01b 0f20 	tst.w	fp, #32
  4037a2:	9311      	str	r3, [sp, #68]	; 0x44
  4037a4:	f040 81dd 	bne.w	403b62 <_svfprintf_r+0x582>
  4037a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4037aa:	f01b 0f10 	tst.w	fp, #16
  4037ae:	4613      	mov	r3, r2
  4037b0:	f040 856e 	bne.w	404290 <_svfprintf_r+0xcb0>
  4037b4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4037b8:	f000 856a 	beq.w	404290 <_svfprintf_r+0xcb0>
  4037bc:	8814      	ldrh	r4, [r2, #0]
  4037be:	3204      	adds	r2, #4
  4037c0:	2500      	movs	r5, #0
  4037c2:	2301      	movs	r3, #1
  4037c4:	920f      	str	r2, [sp, #60]	; 0x3c
  4037c6:	2700      	movs	r7, #0
  4037c8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4037cc:	990a      	ldr	r1, [sp, #40]	; 0x28
  4037ce:	1c4a      	adds	r2, r1, #1
  4037d0:	f000 8265 	beq.w	403c9e <_svfprintf_r+0x6be>
  4037d4:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  4037d8:	9207      	str	r2, [sp, #28]
  4037da:	ea54 0205 	orrs.w	r2, r4, r5
  4037de:	f040 8264 	bne.w	403caa <_svfprintf_r+0x6ca>
  4037e2:	2900      	cmp	r1, #0
  4037e4:	f040 843c 	bne.w	404060 <_svfprintf_r+0xa80>
  4037e8:	2b00      	cmp	r3, #0
  4037ea:	f040 84d7 	bne.w	40419c <_svfprintf_r+0xbbc>
  4037ee:	f01b 0301 	ands.w	r3, fp, #1
  4037f2:	930e      	str	r3, [sp, #56]	; 0x38
  4037f4:	f000 8604 	beq.w	404400 <_svfprintf_r+0xe20>
  4037f8:	ae42      	add	r6, sp, #264	; 0x108
  4037fa:	2330      	movs	r3, #48	; 0x30
  4037fc:	f806 3d41 	strb.w	r3, [r6, #-65]!
  403800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403804:	4293      	cmp	r3, r2
  403806:	bfb8      	it	lt
  403808:	4613      	movlt	r3, r2
  40380a:	9308      	str	r3, [sp, #32]
  40380c:	2300      	movs	r3, #0
  40380e:	9312      	str	r3, [sp, #72]	; 0x48
  403810:	b117      	cbz	r7, 403818 <_svfprintf_r+0x238>
  403812:	9b08      	ldr	r3, [sp, #32]
  403814:	3301      	adds	r3, #1
  403816:	9308      	str	r3, [sp, #32]
  403818:	9b07      	ldr	r3, [sp, #28]
  40381a:	f013 0302 	ands.w	r3, r3, #2
  40381e:	9310      	str	r3, [sp, #64]	; 0x40
  403820:	d002      	beq.n	403828 <_svfprintf_r+0x248>
  403822:	9b08      	ldr	r3, [sp, #32]
  403824:	3302      	adds	r3, #2
  403826:	9308      	str	r3, [sp, #32]
  403828:	9b07      	ldr	r3, [sp, #28]
  40382a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40382e:	f040 830e 	bne.w	403e4e <_svfprintf_r+0x86e>
  403832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403834:	9a08      	ldr	r2, [sp, #32]
  403836:	eba3 0b02 	sub.w	fp, r3, r2
  40383a:	f1bb 0f00 	cmp.w	fp, #0
  40383e:	f340 8306 	ble.w	403e4e <_svfprintf_r+0x86e>
  403842:	f1bb 0f10 	cmp.w	fp, #16
  403846:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403848:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40384a:	dd29      	ble.n	4038a0 <_svfprintf_r+0x2c0>
  40384c:	4643      	mov	r3, r8
  40384e:	4621      	mov	r1, r4
  403850:	46a8      	mov	r8, r5
  403852:	2710      	movs	r7, #16
  403854:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403856:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403858:	e006      	b.n	403868 <_svfprintf_r+0x288>
  40385a:	f1ab 0b10 	sub.w	fp, fp, #16
  40385e:	f1bb 0f10 	cmp.w	fp, #16
  403862:	f103 0308 	add.w	r3, r3, #8
  403866:	dd18      	ble.n	40389a <_svfprintf_r+0x2ba>
  403868:	3201      	adds	r2, #1
  40386a:	48b7      	ldr	r0, [pc, #732]	; (403b48 <_svfprintf_r+0x568>)
  40386c:	9226      	str	r2, [sp, #152]	; 0x98
  40386e:	3110      	adds	r1, #16
  403870:	2a07      	cmp	r2, #7
  403872:	9127      	str	r1, [sp, #156]	; 0x9c
  403874:	e883 0081 	stmia.w	r3, {r0, r7}
  403878:	ddef      	ble.n	40385a <_svfprintf_r+0x27a>
  40387a:	aa25      	add	r2, sp, #148	; 0x94
  40387c:	4629      	mov	r1, r5
  40387e:	4620      	mov	r0, r4
  403880:	f003 f80c 	bl	40689c <__ssprint_r>
  403884:	2800      	cmp	r0, #0
  403886:	f47f af7d 	bne.w	403784 <_svfprintf_r+0x1a4>
  40388a:	f1ab 0b10 	sub.w	fp, fp, #16
  40388e:	f1bb 0f10 	cmp.w	fp, #16
  403892:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403894:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403896:	464b      	mov	r3, r9
  403898:	dce6      	bgt.n	403868 <_svfprintf_r+0x288>
  40389a:	4645      	mov	r5, r8
  40389c:	460c      	mov	r4, r1
  40389e:	4698      	mov	r8, r3
  4038a0:	3201      	adds	r2, #1
  4038a2:	4ba9      	ldr	r3, [pc, #676]	; (403b48 <_svfprintf_r+0x568>)
  4038a4:	9226      	str	r2, [sp, #152]	; 0x98
  4038a6:	445c      	add	r4, fp
  4038a8:	2a07      	cmp	r2, #7
  4038aa:	9427      	str	r4, [sp, #156]	; 0x9c
  4038ac:	e888 0808 	stmia.w	r8, {r3, fp}
  4038b0:	f300 8498 	bgt.w	4041e4 <_svfprintf_r+0xc04>
  4038b4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4038b8:	f108 0808 	add.w	r8, r8, #8
  4038bc:	b177      	cbz	r7, 4038dc <_svfprintf_r+0x2fc>
  4038be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4038c0:	3301      	adds	r3, #1
  4038c2:	3401      	adds	r4, #1
  4038c4:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  4038c8:	2201      	movs	r2, #1
  4038ca:	2b07      	cmp	r3, #7
  4038cc:	9427      	str	r4, [sp, #156]	; 0x9c
  4038ce:	9326      	str	r3, [sp, #152]	; 0x98
  4038d0:	e888 0006 	stmia.w	r8, {r1, r2}
  4038d4:	f300 83db 	bgt.w	40408e <_svfprintf_r+0xaae>
  4038d8:	f108 0808 	add.w	r8, r8, #8
  4038dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4038de:	b16b      	cbz	r3, 4038fc <_svfprintf_r+0x31c>
  4038e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4038e2:	3301      	adds	r3, #1
  4038e4:	3402      	adds	r4, #2
  4038e6:	a91e      	add	r1, sp, #120	; 0x78
  4038e8:	2202      	movs	r2, #2
  4038ea:	2b07      	cmp	r3, #7
  4038ec:	9427      	str	r4, [sp, #156]	; 0x9c
  4038ee:	9326      	str	r3, [sp, #152]	; 0x98
  4038f0:	e888 0006 	stmia.w	r8, {r1, r2}
  4038f4:	f300 83d6 	bgt.w	4040a4 <_svfprintf_r+0xac4>
  4038f8:	f108 0808 	add.w	r8, r8, #8
  4038fc:	2d80      	cmp	r5, #128	; 0x80
  4038fe:	f000 8315 	beq.w	403f2c <_svfprintf_r+0x94c>
  403902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403904:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403906:	1a9f      	subs	r7, r3, r2
  403908:	2f00      	cmp	r7, #0
  40390a:	dd36      	ble.n	40397a <_svfprintf_r+0x39a>
  40390c:	2f10      	cmp	r7, #16
  40390e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403910:	4d8e      	ldr	r5, [pc, #568]	; (403b4c <_svfprintf_r+0x56c>)
  403912:	dd27      	ble.n	403964 <_svfprintf_r+0x384>
  403914:	4642      	mov	r2, r8
  403916:	4621      	mov	r1, r4
  403918:	46b0      	mov	r8, r6
  40391a:	f04f 0b10 	mov.w	fp, #16
  40391e:	462e      	mov	r6, r5
  403920:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403922:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403924:	e004      	b.n	403930 <_svfprintf_r+0x350>
  403926:	3f10      	subs	r7, #16
  403928:	2f10      	cmp	r7, #16
  40392a:	f102 0208 	add.w	r2, r2, #8
  40392e:	dd15      	ble.n	40395c <_svfprintf_r+0x37c>
  403930:	3301      	adds	r3, #1
  403932:	3110      	adds	r1, #16
  403934:	2b07      	cmp	r3, #7
  403936:	9127      	str	r1, [sp, #156]	; 0x9c
  403938:	9326      	str	r3, [sp, #152]	; 0x98
  40393a:	e882 0840 	stmia.w	r2, {r6, fp}
  40393e:	ddf2      	ble.n	403926 <_svfprintf_r+0x346>
  403940:	aa25      	add	r2, sp, #148	; 0x94
  403942:	4629      	mov	r1, r5
  403944:	4620      	mov	r0, r4
  403946:	f002 ffa9 	bl	40689c <__ssprint_r>
  40394a:	2800      	cmp	r0, #0
  40394c:	f47f af1a 	bne.w	403784 <_svfprintf_r+0x1a4>
  403950:	3f10      	subs	r7, #16
  403952:	2f10      	cmp	r7, #16
  403954:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403956:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403958:	464a      	mov	r2, r9
  40395a:	dce9      	bgt.n	403930 <_svfprintf_r+0x350>
  40395c:	4635      	mov	r5, r6
  40395e:	460c      	mov	r4, r1
  403960:	4646      	mov	r6, r8
  403962:	4690      	mov	r8, r2
  403964:	3301      	adds	r3, #1
  403966:	443c      	add	r4, r7
  403968:	2b07      	cmp	r3, #7
  40396a:	9427      	str	r4, [sp, #156]	; 0x9c
  40396c:	9326      	str	r3, [sp, #152]	; 0x98
  40396e:	e888 00a0 	stmia.w	r8, {r5, r7}
  403972:	f300 8381 	bgt.w	404078 <_svfprintf_r+0xa98>
  403976:	f108 0808 	add.w	r8, r8, #8
  40397a:	9b07      	ldr	r3, [sp, #28]
  40397c:	05df      	lsls	r7, r3, #23
  40397e:	f100 8268 	bmi.w	403e52 <_svfprintf_r+0x872>
  403982:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403984:	990e      	ldr	r1, [sp, #56]	; 0x38
  403986:	f8c8 6000 	str.w	r6, [r8]
  40398a:	3301      	adds	r3, #1
  40398c:	440c      	add	r4, r1
  40398e:	2b07      	cmp	r3, #7
  403990:	9427      	str	r4, [sp, #156]	; 0x9c
  403992:	f8c8 1004 	str.w	r1, [r8, #4]
  403996:	9326      	str	r3, [sp, #152]	; 0x98
  403998:	f300 834d 	bgt.w	404036 <_svfprintf_r+0xa56>
  40399c:	f108 0808 	add.w	r8, r8, #8
  4039a0:	9b07      	ldr	r3, [sp, #28]
  4039a2:	075b      	lsls	r3, r3, #29
  4039a4:	d53a      	bpl.n	403a1c <_svfprintf_r+0x43c>
  4039a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4039a8:	9a08      	ldr	r2, [sp, #32]
  4039aa:	1a9d      	subs	r5, r3, r2
  4039ac:	2d00      	cmp	r5, #0
  4039ae:	dd35      	ble.n	403a1c <_svfprintf_r+0x43c>
  4039b0:	2d10      	cmp	r5, #16
  4039b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4039b4:	dd20      	ble.n	4039f8 <_svfprintf_r+0x418>
  4039b6:	2610      	movs	r6, #16
  4039b8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4039ba:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4039be:	e004      	b.n	4039ca <_svfprintf_r+0x3ea>
  4039c0:	3d10      	subs	r5, #16
  4039c2:	2d10      	cmp	r5, #16
  4039c4:	f108 0808 	add.w	r8, r8, #8
  4039c8:	dd16      	ble.n	4039f8 <_svfprintf_r+0x418>
  4039ca:	3301      	adds	r3, #1
  4039cc:	4a5e      	ldr	r2, [pc, #376]	; (403b48 <_svfprintf_r+0x568>)
  4039ce:	9326      	str	r3, [sp, #152]	; 0x98
  4039d0:	3410      	adds	r4, #16
  4039d2:	2b07      	cmp	r3, #7
  4039d4:	9427      	str	r4, [sp, #156]	; 0x9c
  4039d6:	e888 0044 	stmia.w	r8, {r2, r6}
  4039da:	ddf1      	ble.n	4039c0 <_svfprintf_r+0x3e0>
  4039dc:	aa25      	add	r2, sp, #148	; 0x94
  4039de:	4659      	mov	r1, fp
  4039e0:	4638      	mov	r0, r7
  4039e2:	f002 ff5b 	bl	40689c <__ssprint_r>
  4039e6:	2800      	cmp	r0, #0
  4039e8:	f47f aecc 	bne.w	403784 <_svfprintf_r+0x1a4>
  4039ec:	3d10      	subs	r5, #16
  4039ee:	2d10      	cmp	r5, #16
  4039f0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4039f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4039f4:	46c8      	mov	r8, r9
  4039f6:	dce8      	bgt.n	4039ca <_svfprintf_r+0x3ea>
  4039f8:	3301      	adds	r3, #1
  4039fa:	4a53      	ldr	r2, [pc, #332]	; (403b48 <_svfprintf_r+0x568>)
  4039fc:	9326      	str	r3, [sp, #152]	; 0x98
  4039fe:	442c      	add	r4, r5
  403a00:	2b07      	cmp	r3, #7
  403a02:	9427      	str	r4, [sp, #156]	; 0x9c
  403a04:	e888 0024 	stmia.w	r8, {r2, r5}
  403a08:	dd08      	ble.n	403a1c <_svfprintf_r+0x43c>
  403a0a:	aa25      	add	r2, sp, #148	; 0x94
  403a0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403a0e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403a10:	f002 ff44 	bl	40689c <__ssprint_r>
  403a14:	2800      	cmp	r0, #0
  403a16:	f47f aeb5 	bne.w	403784 <_svfprintf_r+0x1a4>
  403a1a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403a1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403a20:	9908      	ldr	r1, [sp, #32]
  403a22:	428a      	cmp	r2, r1
  403a24:	bfac      	ite	ge
  403a26:	189b      	addge	r3, r3, r2
  403a28:	185b      	addlt	r3, r3, r1
  403a2a:	9309      	str	r3, [sp, #36]	; 0x24
  403a2c:	2c00      	cmp	r4, #0
  403a2e:	f040 830d 	bne.w	40404c <_svfprintf_r+0xa6c>
  403a32:	2300      	movs	r3, #0
  403a34:	9326      	str	r3, [sp, #152]	; 0x98
  403a36:	46c8      	mov	r8, r9
  403a38:	e5f9      	b.n	40362e <_svfprintf_r+0x4e>
  403a3a:	9311      	str	r3, [sp, #68]	; 0x44
  403a3c:	f01b 0320 	ands.w	r3, fp, #32
  403a40:	f040 81e3 	bne.w	403e0a <_svfprintf_r+0x82a>
  403a44:	f01b 0210 	ands.w	r2, fp, #16
  403a48:	f040 842e 	bne.w	4042a8 <_svfprintf_r+0xcc8>
  403a4c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  403a50:	f000 842a 	beq.w	4042a8 <_svfprintf_r+0xcc8>
  403a54:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403a56:	4613      	mov	r3, r2
  403a58:	460a      	mov	r2, r1
  403a5a:	3204      	adds	r2, #4
  403a5c:	880c      	ldrh	r4, [r1, #0]
  403a5e:	920f      	str	r2, [sp, #60]	; 0x3c
  403a60:	2500      	movs	r5, #0
  403a62:	e6b0      	b.n	4037c6 <_svfprintf_r+0x1e6>
  403a64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403a66:	9311      	str	r3, [sp, #68]	; 0x44
  403a68:	6816      	ldr	r6, [r2, #0]
  403a6a:	2400      	movs	r4, #0
  403a6c:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  403a70:	1d15      	adds	r5, r2, #4
  403a72:	2e00      	cmp	r6, #0
  403a74:	f000 86a7 	beq.w	4047c6 <_svfprintf_r+0x11e6>
  403a78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403a7a:	1c53      	adds	r3, r2, #1
  403a7c:	f000 8609 	beq.w	404692 <_svfprintf_r+0x10b2>
  403a80:	4621      	mov	r1, r4
  403a82:	4630      	mov	r0, r6
  403a84:	f002 fa8c 	bl	405fa0 <memchr>
  403a88:	2800      	cmp	r0, #0
  403a8a:	f000 86e1 	beq.w	404850 <_svfprintf_r+0x1270>
  403a8e:	1b83      	subs	r3, r0, r6
  403a90:	930e      	str	r3, [sp, #56]	; 0x38
  403a92:	940a      	str	r4, [sp, #40]	; 0x28
  403a94:	950f      	str	r5, [sp, #60]	; 0x3c
  403a96:	f8cd b01c 	str.w	fp, [sp, #28]
  403a9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403a9e:	9308      	str	r3, [sp, #32]
  403aa0:	9412      	str	r4, [sp, #72]	; 0x48
  403aa2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403aa6:	e6b3      	b.n	403810 <_svfprintf_r+0x230>
  403aa8:	f89a 3000 	ldrb.w	r3, [sl]
  403aac:	2201      	movs	r2, #1
  403aae:	212b      	movs	r1, #43	; 0x2b
  403ab0:	e5ee      	b.n	403690 <_svfprintf_r+0xb0>
  403ab2:	f04b 0b20 	orr.w	fp, fp, #32
  403ab6:	f89a 3000 	ldrb.w	r3, [sl]
  403aba:	e5e9      	b.n	403690 <_svfprintf_r+0xb0>
  403abc:	9311      	str	r3, [sp, #68]	; 0x44
  403abe:	2a00      	cmp	r2, #0
  403ac0:	f040 8795 	bne.w	4049ee <_svfprintf_r+0x140e>
  403ac4:	4b22      	ldr	r3, [pc, #136]	; (403b50 <_svfprintf_r+0x570>)
  403ac6:	9318      	str	r3, [sp, #96]	; 0x60
  403ac8:	f01b 0f20 	tst.w	fp, #32
  403acc:	f040 8111 	bne.w	403cf2 <_svfprintf_r+0x712>
  403ad0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403ad2:	f01b 0f10 	tst.w	fp, #16
  403ad6:	4613      	mov	r3, r2
  403ad8:	f040 83e1 	bne.w	40429e <_svfprintf_r+0xcbe>
  403adc:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403ae0:	f000 83dd 	beq.w	40429e <_svfprintf_r+0xcbe>
  403ae4:	3304      	adds	r3, #4
  403ae6:	8814      	ldrh	r4, [r2, #0]
  403ae8:	930f      	str	r3, [sp, #60]	; 0x3c
  403aea:	2500      	movs	r5, #0
  403aec:	f01b 0f01 	tst.w	fp, #1
  403af0:	f000 810c 	beq.w	403d0c <_svfprintf_r+0x72c>
  403af4:	ea54 0305 	orrs.w	r3, r4, r5
  403af8:	f000 8108 	beq.w	403d0c <_svfprintf_r+0x72c>
  403afc:	2330      	movs	r3, #48	; 0x30
  403afe:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  403b02:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  403b06:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  403b0a:	f04b 0b02 	orr.w	fp, fp, #2
  403b0e:	2302      	movs	r3, #2
  403b10:	e659      	b.n	4037c6 <_svfprintf_r+0x1e6>
  403b12:	f89a 3000 	ldrb.w	r3, [sl]
  403b16:	2900      	cmp	r1, #0
  403b18:	f47f adba 	bne.w	403690 <_svfprintf_r+0xb0>
  403b1c:	2201      	movs	r2, #1
  403b1e:	2120      	movs	r1, #32
  403b20:	e5b6      	b.n	403690 <_svfprintf_r+0xb0>
  403b22:	f04b 0b01 	orr.w	fp, fp, #1
  403b26:	f89a 3000 	ldrb.w	r3, [sl]
  403b2a:	e5b1      	b.n	403690 <_svfprintf_r+0xb0>
  403b2c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  403b2e:	6823      	ldr	r3, [r4, #0]
  403b30:	930d      	str	r3, [sp, #52]	; 0x34
  403b32:	4618      	mov	r0, r3
  403b34:	2800      	cmp	r0, #0
  403b36:	4623      	mov	r3, r4
  403b38:	f103 0304 	add.w	r3, r3, #4
  403b3c:	f6ff ae0a 	blt.w	403754 <_svfprintf_r+0x174>
  403b40:	930f      	str	r3, [sp, #60]	; 0x3c
  403b42:	f89a 3000 	ldrb.w	r3, [sl]
  403b46:	e5a3      	b.n	403690 <_svfprintf_r+0xb0>
  403b48:	004085a4 	.word	0x004085a4
  403b4c:	004085b4 	.word	0x004085b4
  403b50:	00408584 	.word	0x00408584
  403b54:	f04b 0b10 	orr.w	fp, fp, #16
  403b58:	f01b 0f20 	tst.w	fp, #32
  403b5c:	9311      	str	r3, [sp, #68]	; 0x44
  403b5e:	f43f ae23 	beq.w	4037a8 <_svfprintf_r+0x1c8>
  403b62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403b64:	3507      	adds	r5, #7
  403b66:	f025 0307 	bic.w	r3, r5, #7
  403b6a:	f103 0208 	add.w	r2, r3, #8
  403b6e:	e9d3 4500 	ldrd	r4, r5, [r3]
  403b72:	920f      	str	r2, [sp, #60]	; 0x3c
  403b74:	2301      	movs	r3, #1
  403b76:	e626      	b.n	4037c6 <_svfprintf_r+0x1e6>
  403b78:	f89a 3000 	ldrb.w	r3, [sl]
  403b7c:	2b2a      	cmp	r3, #42	; 0x2a
  403b7e:	f10a 0401 	add.w	r4, sl, #1
  403b82:	f000 8727 	beq.w	4049d4 <_svfprintf_r+0x13f4>
  403b86:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403b8a:	2809      	cmp	r0, #9
  403b8c:	46a2      	mov	sl, r4
  403b8e:	f200 86ad 	bhi.w	4048ec <_svfprintf_r+0x130c>
  403b92:	2300      	movs	r3, #0
  403b94:	461c      	mov	r4, r3
  403b96:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403b9a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403b9e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403ba2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403ba6:	2809      	cmp	r0, #9
  403ba8:	d9f5      	bls.n	403b96 <_svfprintf_r+0x5b6>
  403baa:	940a      	str	r4, [sp, #40]	; 0x28
  403bac:	e572      	b.n	403694 <_svfprintf_r+0xb4>
  403bae:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  403bb2:	f89a 3000 	ldrb.w	r3, [sl]
  403bb6:	e56b      	b.n	403690 <_svfprintf_r+0xb0>
  403bb8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  403bbc:	f89a 3000 	ldrb.w	r3, [sl]
  403bc0:	e566      	b.n	403690 <_svfprintf_r+0xb0>
  403bc2:	f89a 3000 	ldrb.w	r3, [sl]
  403bc6:	2b6c      	cmp	r3, #108	; 0x6c
  403bc8:	bf03      	ittte	eq
  403bca:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  403bce:	f04b 0b20 	orreq.w	fp, fp, #32
  403bd2:	f10a 0a01 	addeq.w	sl, sl, #1
  403bd6:	f04b 0b10 	orrne.w	fp, fp, #16
  403bda:	e559      	b.n	403690 <_svfprintf_r+0xb0>
  403bdc:	2a00      	cmp	r2, #0
  403bde:	f040 8711 	bne.w	404a04 <_svfprintf_r+0x1424>
  403be2:	f01b 0f20 	tst.w	fp, #32
  403be6:	f040 84f9 	bne.w	4045dc <_svfprintf_r+0xffc>
  403bea:	f01b 0f10 	tst.w	fp, #16
  403bee:	f040 84ac 	bne.w	40454a <_svfprintf_r+0xf6a>
  403bf2:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403bf6:	f000 84a8 	beq.w	40454a <_svfprintf_r+0xf6a>
  403bfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403bfc:	6813      	ldr	r3, [r2, #0]
  403bfe:	3204      	adds	r2, #4
  403c00:	920f      	str	r2, [sp, #60]	; 0x3c
  403c02:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  403c06:	801a      	strh	r2, [r3, #0]
  403c08:	e511      	b.n	40362e <_svfprintf_r+0x4e>
  403c0a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403c0c:	4bb3      	ldr	r3, [pc, #716]	; (403edc <_svfprintf_r+0x8fc>)
  403c0e:	680c      	ldr	r4, [r1, #0]
  403c10:	9318      	str	r3, [sp, #96]	; 0x60
  403c12:	2230      	movs	r2, #48	; 0x30
  403c14:	2378      	movs	r3, #120	; 0x78
  403c16:	3104      	adds	r1, #4
  403c18:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  403c1c:	9311      	str	r3, [sp, #68]	; 0x44
  403c1e:	f04b 0b02 	orr.w	fp, fp, #2
  403c22:	910f      	str	r1, [sp, #60]	; 0x3c
  403c24:	2500      	movs	r5, #0
  403c26:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  403c2a:	2302      	movs	r3, #2
  403c2c:	e5cb      	b.n	4037c6 <_svfprintf_r+0x1e6>
  403c2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403c30:	9311      	str	r3, [sp, #68]	; 0x44
  403c32:	680a      	ldr	r2, [r1, #0]
  403c34:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403c38:	2300      	movs	r3, #0
  403c3a:	460a      	mov	r2, r1
  403c3c:	461f      	mov	r7, r3
  403c3e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403c42:	3204      	adds	r2, #4
  403c44:	2301      	movs	r3, #1
  403c46:	9308      	str	r3, [sp, #32]
  403c48:	f8cd b01c 	str.w	fp, [sp, #28]
  403c4c:	970a      	str	r7, [sp, #40]	; 0x28
  403c4e:	9712      	str	r7, [sp, #72]	; 0x48
  403c50:	920f      	str	r2, [sp, #60]	; 0x3c
  403c52:	930e      	str	r3, [sp, #56]	; 0x38
  403c54:	ae28      	add	r6, sp, #160	; 0xa0
  403c56:	e5df      	b.n	403818 <_svfprintf_r+0x238>
  403c58:	9311      	str	r3, [sp, #68]	; 0x44
  403c5a:	2a00      	cmp	r2, #0
  403c5c:	f040 86ea 	bne.w	404a34 <_svfprintf_r+0x1454>
  403c60:	f01b 0f20 	tst.w	fp, #32
  403c64:	d15d      	bne.n	403d22 <_svfprintf_r+0x742>
  403c66:	f01b 0f10 	tst.w	fp, #16
  403c6a:	f040 8308 	bne.w	40427e <_svfprintf_r+0xc9e>
  403c6e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403c72:	f000 8304 	beq.w	40427e <_svfprintf_r+0xc9e>
  403c76:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403c78:	f9b1 4000 	ldrsh.w	r4, [r1]
  403c7c:	3104      	adds	r1, #4
  403c7e:	17e5      	asrs	r5, r4, #31
  403c80:	4622      	mov	r2, r4
  403c82:	462b      	mov	r3, r5
  403c84:	910f      	str	r1, [sp, #60]	; 0x3c
  403c86:	2a00      	cmp	r2, #0
  403c88:	f173 0300 	sbcs.w	r3, r3, #0
  403c8c:	db58      	blt.n	403d40 <_svfprintf_r+0x760>
  403c8e:	990a      	ldr	r1, [sp, #40]	; 0x28
  403c90:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403c94:	1c4a      	adds	r2, r1, #1
  403c96:	f04f 0301 	mov.w	r3, #1
  403c9a:	f47f ad9b 	bne.w	4037d4 <_svfprintf_r+0x1f4>
  403c9e:	ea54 0205 	orrs.w	r2, r4, r5
  403ca2:	f000 81df 	beq.w	404064 <_svfprintf_r+0xa84>
  403ca6:	f8cd b01c 	str.w	fp, [sp, #28]
  403caa:	2b01      	cmp	r3, #1
  403cac:	f000 827b 	beq.w	4041a6 <_svfprintf_r+0xbc6>
  403cb0:	2b02      	cmp	r3, #2
  403cb2:	f040 8206 	bne.w	4040c2 <_svfprintf_r+0xae2>
  403cb6:	9818      	ldr	r0, [sp, #96]	; 0x60
  403cb8:	464e      	mov	r6, r9
  403cba:	0923      	lsrs	r3, r4, #4
  403cbc:	f004 010f 	and.w	r1, r4, #15
  403cc0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  403cc4:	092a      	lsrs	r2, r5, #4
  403cc6:	461c      	mov	r4, r3
  403cc8:	4615      	mov	r5, r2
  403cca:	5c43      	ldrb	r3, [r0, r1]
  403ccc:	f806 3d01 	strb.w	r3, [r6, #-1]!
  403cd0:	ea54 0305 	orrs.w	r3, r4, r5
  403cd4:	d1f1      	bne.n	403cba <_svfprintf_r+0x6da>
  403cd6:	eba9 0306 	sub.w	r3, r9, r6
  403cda:	930e      	str	r3, [sp, #56]	; 0x38
  403cdc:	e590      	b.n	403800 <_svfprintf_r+0x220>
  403cde:	9311      	str	r3, [sp, #68]	; 0x44
  403ce0:	2a00      	cmp	r2, #0
  403ce2:	f040 86a3 	bne.w	404a2c <_svfprintf_r+0x144c>
  403ce6:	4b7e      	ldr	r3, [pc, #504]	; (403ee0 <_svfprintf_r+0x900>)
  403ce8:	9318      	str	r3, [sp, #96]	; 0x60
  403cea:	f01b 0f20 	tst.w	fp, #32
  403cee:	f43f aeef 	beq.w	403ad0 <_svfprintf_r+0x4f0>
  403cf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403cf4:	3507      	adds	r5, #7
  403cf6:	f025 0307 	bic.w	r3, r5, #7
  403cfa:	f103 0208 	add.w	r2, r3, #8
  403cfe:	f01b 0f01 	tst.w	fp, #1
  403d02:	920f      	str	r2, [sp, #60]	; 0x3c
  403d04:	e9d3 4500 	ldrd	r4, r5, [r3]
  403d08:	f47f aef4 	bne.w	403af4 <_svfprintf_r+0x514>
  403d0c:	2302      	movs	r3, #2
  403d0e:	e55a      	b.n	4037c6 <_svfprintf_r+0x1e6>
  403d10:	9311      	str	r3, [sp, #68]	; 0x44
  403d12:	2a00      	cmp	r2, #0
  403d14:	f040 8686 	bne.w	404a24 <_svfprintf_r+0x1444>
  403d18:	f04b 0b10 	orr.w	fp, fp, #16
  403d1c:	f01b 0f20 	tst.w	fp, #32
  403d20:	d0a1      	beq.n	403c66 <_svfprintf_r+0x686>
  403d22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403d24:	3507      	adds	r5, #7
  403d26:	f025 0507 	bic.w	r5, r5, #7
  403d2a:	e9d5 2300 	ldrd	r2, r3, [r5]
  403d2e:	2a00      	cmp	r2, #0
  403d30:	f105 0108 	add.w	r1, r5, #8
  403d34:	461d      	mov	r5, r3
  403d36:	f173 0300 	sbcs.w	r3, r3, #0
  403d3a:	910f      	str	r1, [sp, #60]	; 0x3c
  403d3c:	4614      	mov	r4, r2
  403d3e:	daa6      	bge.n	403c8e <_svfprintf_r+0x6ae>
  403d40:	272d      	movs	r7, #45	; 0x2d
  403d42:	4264      	negs	r4, r4
  403d44:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  403d48:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403d4c:	2301      	movs	r3, #1
  403d4e:	e53d      	b.n	4037cc <_svfprintf_r+0x1ec>
  403d50:	9311      	str	r3, [sp, #68]	; 0x44
  403d52:	2a00      	cmp	r2, #0
  403d54:	f040 8662 	bne.w	404a1c <_svfprintf_r+0x143c>
  403d58:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403d5a:	3507      	adds	r5, #7
  403d5c:	f025 0307 	bic.w	r3, r5, #7
  403d60:	f103 0208 	add.w	r2, r3, #8
  403d64:	920f      	str	r2, [sp, #60]	; 0x3c
  403d66:	681a      	ldr	r2, [r3, #0]
  403d68:	9215      	str	r2, [sp, #84]	; 0x54
  403d6a:	685b      	ldr	r3, [r3, #4]
  403d6c:	9314      	str	r3, [sp, #80]	; 0x50
  403d6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403d70:	9d15      	ldr	r5, [sp, #84]	; 0x54
  403d72:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  403d76:	4628      	mov	r0, r5
  403d78:	4621      	mov	r1, r4
  403d7a:	f04f 32ff 	mov.w	r2, #4294967295
  403d7e:	4b59      	ldr	r3, [pc, #356]	; (403ee4 <_svfprintf_r+0x904>)
  403d80:	f003 fe52 	bl	407a28 <__aeabi_dcmpun>
  403d84:	2800      	cmp	r0, #0
  403d86:	f040 834a 	bne.w	40441e <_svfprintf_r+0xe3e>
  403d8a:	4628      	mov	r0, r5
  403d8c:	4621      	mov	r1, r4
  403d8e:	f04f 32ff 	mov.w	r2, #4294967295
  403d92:	4b54      	ldr	r3, [pc, #336]	; (403ee4 <_svfprintf_r+0x904>)
  403d94:	f003 fe2a 	bl	4079ec <__aeabi_dcmple>
  403d98:	2800      	cmp	r0, #0
  403d9a:	f040 8340 	bne.w	40441e <_svfprintf_r+0xe3e>
  403d9e:	a815      	add	r0, sp, #84	; 0x54
  403da0:	c80d      	ldmia	r0, {r0, r2, r3}
  403da2:	9914      	ldr	r1, [sp, #80]	; 0x50
  403da4:	f003 fe18 	bl	4079d8 <__aeabi_dcmplt>
  403da8:	2800      	cmp	r0, #0
  403daa:	f040 8530 	bne.w	40480e <_svfprintf_r+0x122e>
  403dae:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403db2:	4e4d      	ldr	r6, [pc, #308]	; (403ee8 <_svfprintf_r+0x908>)
  403db4:	4b4d      	ldr	r3, [pc, #308]	; (403eec <_svfprintf_r+0x90c>)
  403db6:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  403dba:	9007      	str	r0, [sp, #28]
  403dbc:	9811      	ldr	r0, [sp, #68]	; 0x44
  403dbe:	2203      	movs	r2, #3
  403dc0:	2100      	movs	r1, #0
  403dc2:	9208      	str	r2, [sp, #32]
  403dc4:	910a      	str	r1, [sp, #40]	; 0x28
  403dc6:	2847      	cmp	r0, #71	; 0x47
  403dc8:	bfd8      	it	le
  403dca:	461e      	movle	r6, r3
  403dcc:	920e      	str	r2, [sp, #56]	; 0x38
  403dce:	9112      	str	r1, [sp, #72]	; 0x48
  403dd0:	e51e      	b.n	403810 <_svfprintf_r+0x230>
  403dd2:	f04b 0b08 	orr.w	fp, fp, #8
  403dd6:	f89a 3000 	ldrb.w	r3, [sl]
  403dda:	e459      	b.n	403690 <_svfprintf_r+0xb0>
  403ddc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403de0:	2300      	movs	r3, #0
  403de2:	461c      	mov	r4, r3
  403de4:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403de8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403dec:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403df0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403df4:	2809      	cmp	r0, #9
  403df6:	d9f5      	bls.n	403de4 <_svfprintf_r+0x804>
  403df8:	940d      	str	r4, [sp, #52]	; 0x34
  403dfa:	e44b      	b.n	403694 <_svfprintf_r+0xb4>
  403dfc:	f04b 0b10 	orr.w	fp, fp, #16
  403e00:	9311      	str	r3, [sp, #68]	; 0x44
  403e02:	f01b 0320 	ands.w	r3, fp, #32
  403e06:	f43f ae1d 	beq.w	403a44 <_svfprintf_r+0x464>
  403e0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403e0c:	3507      	adds	r5, #7
  403e0e:	f025 0307 	bic.w	r3, r5, #7
  403e12:	f103 0208 	add.w	r2, r3, #8
  403e16:	e9d3 4500 	ldrd	r4, r5, [r3]
  403e1a:	920f      	str	r2, [sp, #60]	; 0x3c
  403e1c:	2300      	movs	r3, #0
  403e1e:	e4d2      	b.n	4037c6 <_svfprintf_r+0x1e6>
  403e20:	9311      	str	r3, [sp, #68]	; 0x44
  403e22:	2a00      	cmp	r2, #0
  403e24:	f040 85e7 	bne.w	4049f6 <_svfprintf_r+0x1416>
  403e28:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403e2a:	2a00      	cmp	r2, #0
  403e2c:	f43f aca3 	beq.w	403776 <_svfprintf_r+0x196>
  403e30:	2300      	movs	r3, #0
  403e32:	2101      	movs	r1, #1
  403e34:	461f      	mov	r7, r3
  403e36:	9108      	str	r1, [sp, #32]
  403e38:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403e3c:	f8cd b01c 	str.w	fp, [sp, #28]
  403e40:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403e44:	930a      	str	r3, [sp, #40]	; 0x28
  403e46:	9312      	str	r3, [sp, #72]	; 0x48
  403e48:	910e      	str	r1, [sp, #56]	; 0x38
  403e4a:	ae28      	add	r6, sp, #160	; 0xa0
  403e4c:	e4e4      	b.n	403818 <_svfprintf_r+0x238>
  403e4e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403e50:	e534      	b.n	4038bc <_svfprintf_r+0x2dc>
  403e52:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403e54:	2b65      	cmp	r3, #101	; 0x65
  403e56:	f340 80a7 	ble.w	403fa8 <_svfprintf_r+0x9c8>
  403e5a:	a815      	add	r0, sp, #84	; 0x54
  403e5c:	c80d      	ldmia	r0, {r0, r2, r3}
  403e5e:	9914      	ldr	r1, [sp, #80]	; 0x50
  403e60:	f003 fdb0 	bl	4079c4 <__aeabi_dcmpeq>
  403e64:	2800      	cmp	r0, #0
  403e66:	f000 8150 	beq.w	40410a <_svfprintf_r+0xb2a>
  403e6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e6c:	4a20      	ldr	r2, [pc, #128]	; (403ef0 <_svfprintf_r+0x910>)
  403e6e:	f8c8 2000 	str.w	r2, [r8]
  403e72:	3301      	adds	r3, #1
  403e74:	3401      	adds	r4, #1
  403e76:	2201      	movs	r2, #1
  403e78:	2b07      	cmp	r3, #7
  403e7a:	9427      	str	r4, [sp, #156]	; 0x9c
  403e7c:	9326      	str	r3, [sp, #152]	; 0x98
  403e7e:	f8c8 2004 	str.w	r2, [r8, #4]
  403e82:	f300 836a 	bgt.w	40455a <_svfprintf_r+0xf7a>
  403e86:	f108 0808 	add.w	r8, r8, #8
  403e8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403e8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403e8e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403e90:	4293      	cmp	r3, r2
  403e92:	db03      	blt.n	403e9c <_svfprintf_r+0x8bc>
  403e94:	9b07      	ldr	r3, [sp, #28]
  403e96:	07dd      	lsls	r5, r3, #31
  403e98:	f57f ad82 	bpl.w	4039a0 <_svfprintf_r+0x3c0>
  403e9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e9e:	9919      	ldr	r1, [sp, #100]	; 0x64
  403ea0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  403ea2:	f8c8 2000 	str.w	r2, [r8]
  403ea6:	3301      	adds	r3, #1
  403ea8:	440c      	add	r4, r1
  403eaa:	2b07      	cmp	r3, #7
  403eac:	f8c8 1004 	str.w	r1, [r8, #4]
  403eb0:	9427      	str	r4, [sp, #156]	; 0x9c
  403eb2:	9326      	str	r3, [sp, #152]	; 0x98
  403eb4:	f300 839e 	bgt.w	4045f4 <_svfprintf_r+0x1014>
  403eb8:	f108 0808 	add.w	r8, r8, #8
  403ebc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403ebe:	1e5e      	subs	r6, r3, #1
  403ec0:	2e00      	cmp	r6, #0
  403ec2:	f77f ad6d 	ble.w	4039a0 <_svfprintf_r+0x3c0>
  403ec6:	2e10      	cmp	r6, #16
  403ec8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403eca:	4d0a      	ldr	r5, [pc, #40]	; (403ef4 <_svfprintf_r+0x914>)
  403ecc:	f340 81f5 	ble.w	4042ba <_svfprintf_r+0xcda>
  403ed0:	4622      	mov	r2, r4
  403ed2:	2710      	movs	r7, #16
  403ed4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403ed8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403eda:	e013      	b.n	403f04 <_svfprintf_r+0x924>
  403edc:	00408584 	.word	0x00408584
  403ee0:	00408570 	.word	0x00408570
  403ee4:	7fefffff 	.word	0x7fefffff
  403ee8:	00408564 	.word	0x00408564
  403eec:	00408560 	.word	0x00408560
  403ef0:	004085a0 	.word	0x004085a0
  403ef4:	004085b4 	.word	0x004085b4
  403ef8:	f108 0808 	add.w	r8, r8, #8
  403efc:	3e10      	subs	r6, #16
  403efe:	2e10      	cmp	r6, #16
  403f00:	f340 81da 	ble.w	4042b8 <_svfprintf_r+0xcd8>
  403f04:	3301      	adds	r3, #1
  403f06:	3210      	adds	r2, #16
  403f08:	2b07      	cmp	r3, #7
  403f0a:	9227      	str	r2, [sp, #156]	; 0x9c
  403f0c:	9326      	str	r3, [sp, #152]	; 0x98
  403f0e:	e888 00a0 	stmia.w	r8, {r5, r7}
  403f12:	ddf1      	ble.n	403ef8 <_svfprintf_r+0x918>
  403f14:	aa25      	add	r2, sp, #148	; 0x94
  403f16:	4621      	mov	r1, r4
  403f18:	4658      	mov	r0, fp
  403f1a:	f002 fcbf 	bl	40689c <__ssprint_r>
  403f1e:	2800      	cmp	r0, #0
  403f20:	f47f ac30 	bne.w	403784 <_svfprintf_r+0x1a4>
  403f24:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403f26:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f28:	46c8      	mov	r8, r9
  403f2a:	e7e7      	b.n	403efc <_svfprintf_r+0x91c>
  403f2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403f2e:	9a08      	ldr	r2, [sp, #32]
  403f30:	1a9f      	subs	r7, r3, r2
  403f32:	2f00      	cmp	r7, #0
  403f34:	f77f ace5 	ble.w	403902 <_svfprintf_r+0x322>
  403f38:	2f10      	cmp	r7, #16
  403f3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f3c:	4db6      	ldr	r5, [pc, #728]	; (404218 <_svfprintf_r+0xc38>)
  403f3e:	dd27      	ble.n	403f90 <_svfprintf_r+0x9b0>
  403f40:	4642      	mov	r2, r8
  403f42:	4621      	mov	r1, r4
  403f44:	46b0      	mov	r8, r6
  403f46:	f04f 0b10 	mov.w	fp, #16
  403f4a:	462e      	mov	r6, r5
  403f4c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403f4e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403f50:	e004      	b.n	403f5c <_svfprintf_r+0x97c>
  403f52:	3f10      	subs	r7, #16
  403f54:	2f10      	cmp	r7, #16
  403f56:	f102 0208 	add.w	r2, r2, #8
  403f5a:	dd15      	ble.n	403f88 <_svfprintf_r+0x9a8>
  403f5c:	3301      	adds	r3, #1
  403f5e:	3110      	adds	r1, #16
  403f60:	2b07      	cmp	r3, #7
  403f62:	9127      	str	r1, [sp, #156]	; 0x9c
  403f64:	9326      	str	r3, [sp, #152]	; 0x98
  403f66:	e882 0840 	stmia.w	r2, {r6, fp}
  403f6a:	ddf2      	ble.n	403f52 <_svfprintf_r+0x972>
  403f6c:	aa25      	add	r2, sp, #148	; 0x94
  403f6e:	4629      	mov	r1, r5
  403f70:	4620      	mov	r0, r4
  403f72:	f002 fc93 	bl	40689c <__ssprint_r>
  403f76:	2800      	cmp	r0, #0
  403f78:	f47f ac04 	bne.w	403784 <_svfprintf_r+0x1a4>
  403f7c:	3f10      	subs	r7, #16
  403f7e:	2f10      	cmp	r7, #16
  403f80:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403f82:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f84:	464a      	mov	r2, r9
  403f86:	dce9      	bgt.n	403f5c <_svfprintf_r+0x97c>
  403f88:	4635      	mov	r5, r6
  403f8a:	460c      	mov	r4, r1
  403f8c:	4646      	mov	r6, r8
  403f8e:	4690      	mov	r8, r2
  403f90:	3301      	adds	r3, #1
  403f92:	443c      	add	r4, r7
  403f94:	2b07      	cmp	r3, #7
  403f96:	9427      	str	r4, [sp, #156]	; 0x9c
  403f98:	9326      	str	r3, [sp, #152]	; 0x98
  403f9a:	e888 00a0 	stmia.w	r8, {r5, r7}
  403f9e:	f300 8232 	bgt.w	404406 <_svfprintf_r+0xe26>
  403fa2:	f108 0808 	add.w	r8, r8, #8
  403fa6:	e4ac      	b.n	403902 <_svfprintf_r+0x322>
  403fa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403faa:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403fac:	2b01      	cmp	r3, #1
  403fae:	f340 81fe 	ble.w	4043ae <_svfprintf_r+0xdce>
  403fb2:	3701      	adds	r7, #1
  403fb4:	3401      	adds	r4, #1
  403fb6:	2301      	movs	r3, #1
  403fb8:	2f07      	cmp	r7, #7
  403fba:	9427      	str	r4, [sp, #156]	; 0x9c
  403fbc:	9726      	str	r7, [sp, #152]	; 0x98
  403fbe:	f8c8 6000 	str.w	r6, [r8]
  403fc2:	f8c8 3004 	str.w	r3, [r8, #4]
  403fc6:	f300 8203 	bgt.w	4043d0 <_svfprintf_r+0xdf0>
  403fca:	f108 0808 	add.w	r8, r8, #8
  403fce:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403fd0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  403fd2:	f8c8 3000 	str.w	r3, [r8]
  403fd6:	3701      	adds	r7, #1
  403fd8:	4414      	add	r4, r2
  403fda:	2f07      	cmp	r7, #7
  403fdc:	9427      	str	r4, [sp, #156]	; 0x9c
  403fde:	9726      	str	r7, [sp, #152]	; 0x98
  403fe0:	f8c8 2004 	str.w	r2, [r8, #4]
  403fe4:	f300 8200 	bgt.w	4043e8 <_svfprintf_r+0xe08>
  403fe8:	f108 0808 	add.w	r8, r8, #8
  403fec:	a815      	add	r0, sp, #84	; 0x54
  403fee:	c80d      	ldmia	r0, {r0, r2, r3}
  403ff0:	9914      	ldr	r1, [sp, #80]	; 0x50
  403ff2:	f003 fce7 	bl	4079c4 <__aeabi_dcmpeq>
  403ff6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403ff8:	2800      	cmp	r0, #0
  403ffa:	f040 8101 	bne.w	404200 <_svfprintf_r+0xc20>
  403ffe:	3b01      	subs	r3, #1
  404000:	3701      	adds	r7, #1
  404002:	3601      	adds	r6, #1
  404004:	441c      	add	r4, r3
  404006:	2f07      	cmp	r7, #7
  404008:	9726      	str	r7, [sp, #152]	; 0x98
  40400a:	9427      	str	r4, [sp, #156]	; 0x9c
  40400c:	f8c8 6000 	str.w	r6, [r8]
  404010:	f8c8 3004 	str.w	r3, [r8, #4]
  404014:	f300 8127 	bgt.w	404266 <_svfprintf_r+0xc86>
  404018:	f108 0808 	add.w	r8, r8, #8
  40401c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40401e:	f8c8 2004 	str.w	r2, [r8, #4]
  404022:	3701      	adds	r7, #1
  404024:	4414      	add	r4, r2
  404026:	ab21      	add	r3, sp, #132	; 0x84
  404028:	2f07      	cmp	r7, #7
  40402a:	9427      	str	r4, [sp, #156]	; 0x9c
  40402c:	9726      	str	r7, [sp, #152]	; 0x98
  40402e:	f8c8 3000 	str.w	r3, [r8]
  404032:	f77f acb3 	ble.w	40399c <_svfprintf_r+0x3bc>
  404036:	aa25      	add	r2, sp, #148	; 0x94
  404038:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40403a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40403c:	f002 fc2e 	bl	40689c <__ssprint_r>
  404040:	2800      	cmp	r0, #0
  404042:	f47f ab9f 	bne.w	403784 <_svfprintf_r+0x1a4>
  404046:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404048:	46c8      	mov	r8, r9
  40404a:	e4a9      	b.n	4039a0 <_svfprintf_r+0x3c0>
  40404c:	aa25      	add	r2, sp, #148	; 0x94
  40404e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404050:	980c      	ldr	r0, [sp, #48]	; 0x30
  404052:	f002 fc23 	bl	40689c <__ssprint_r>
  404056:	2800      	cmp	r0, #0
  404058:	f43f aceb 	beq.w	403a32 <_svfprintf_r+0x452>
  40405c:	f7ff bb92 	b.w	403784 <_svfprintf_r+0x1a4>
  404060:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404064:	2b01      	cmp	r3, #1
  404066:	f000 8134 	beq.w	4042d2 <_svfprintf_r+0xcf2>
  40406a:	2b02      	cmp	r3, #2
  40406c:	d125      	bne.n	4040ba <_svfprintf_r+0xada>
  40406e:	f8cd b01c 	str.w	fp, [sp, #28]
  404072:	2400      	movs	r4, #0
  404074:	2500      	movs	r5, #0
  404076:	e61e      	b.n	403cb6 <_svfprintf_r+0x6d6>
  404078:	aa25      	add	r2, sp, #148	; 0x94
  40407a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40407c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40407e:	f002 fc0d 	bl	40689c <__ssprint_r>
  404082:	2800      	cmp	r0, #0
  404084:	f47f ab7e 	bne.w	403784 <_svfprintf_r+0x1a4>
  404088:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40408a:	46c8      	mov	r8, r9
  40408c:	e475      	b.n	40397a <_svfprintf_r+0x39a>
  40408e:	aa25      	add	r2, sp, #148	; 0x94
  404090:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404092:	980c      	ldr	r0, [sp, #48]	; 0x30
  404094:	f002 fc02 	bl	40689c <__ssprint_r>
  404098:	2800      	cmp	r0, #0
  40409a:	f47f ab73 	bne.w	403784 <_svfprintf_r+0x1a4>
  40409e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4040a0:	46c8      	mov	r8, r9
  4040a2:	e41b      	b.n	4038dc <_svfprintf_r+0x2fc>
  4040a4:	aa25      	add	r2, sp, #148	; 0x94
  4040a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4040a8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4040aa:	f002 fbf7 	bl	40689c <__ssprint_r>
  4040ae:	2800      	cmp	r0, #0
  4040b0:	f47f ab68 	bne.w	403784 <_svfprintf_r+0x1a4>
  4040b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4040b6:	46c8      	mov	r8, r9
  4040b8:	e420      	b.n	4038fc <_svfprintf_r+0x31c>
  4040ba:	f8cd b01c 	str.w	fp, [sp, #28]
  4040be:	2400      	movs	r4, #0
  4040c0:	2500      	movs	r5, #0
  4040c2:	4649      	mov	r1, r9
  4040c4:	e000      	b.n	4040c8 <_svfprintf_r+0xae8>
  4040c6:	4631      	mov	r1, r6
  4040c8:	08e2      	lsrs	r2, r4, #3
  4040ca:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4040ce:	08e8      	lsrs	r0, r5, #3
  4040d0:	f004 0307 	and.w	r3, r4, #7
  4040d4:	4605      	mov	r5, r0
  4040d6:	4614      	mov	r4, r2
  4040d8:	3330      	adds	r3, #48	; 0x30
  4040da:	ea54 0205 	orrs.w	r2, r4, r5
  4040de:	f801 3c01 	strb.w	r3, [r1, #-1]
  4040e2:	f101 36ff 	add.w	r6, r1, #4294967295
  4040e6:	d1ee      	bne.n	4040c6 <_svfprintf_r+0xae6>
  4040e8:	9a07      	ldr	r2, [sp, #28]
  4040ea:	07d2      	lsls	r2, r2, #31
  4040ec:	f57f adf3 	bpl.w	403cd6 <_svfprintf_r+0x6f6>
  4040f0:	2b30      	cmp	r3, #48	; 0x30
  4040f2:	f43f adf0 	beq.w	403cd6 <_svfprintf_r+0x6f6>
  4040f6:	3902      	subs	r1, #2
  4040f8:	2330      	movs	r3, #48	; 0x30
  4040fa:	f806 3c01 	strb.w	r3, [r6, #-1]
  4040fe:	eba9 0301 	sub.w	r3, r9, r1
  404102:	930e      	str	r3, [sp, #56]	; 0x38
  404104:	460e      	mov	r6, r1
  404106:	f7ff bb7b 	b.w	403800 <_svfprintf_r+0x220>
  40410a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40410c:	2900      	cmp	r1, #0
  40410e:	f340 822e 	ble.w	40456e <_svfprintf_r+0xf8e>
  404112:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404114:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404116:	4293      	cmp	r3, r2
  404118:	bfa8      	it	ge
  40411a:	4613      	movge	r3, r2
  40411c:	2b00      	cmp	r3, #0
  40411e:	461f      	mov	r7, r3
  404120:	dd0d      	ble.n	40413e <_svfprintf_r+0xb5e>
  404122:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404124:	f8c8 6000 	str.w	r6, [r8]
  404128:	3301      	adds	r3, #1
  40412a:	443c      	add	r4, r7
  40412c:	2b07      	cmp	r3, #7
  40412e:	9427      	str	r4, [sp, #156]	; 0x9c
  404130:	f8c8 7004 	str.w	r7, [r8, #4]
  404134:	9326      	str	r3, [sp, #152]	; 0x98
  404136:	f300 831f 	bgt.w	404778 <_svfprintf_r+0x1198>
  40413a:	f108 0808 	add.w	r8, r8, #8
  40413e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404140:	2f00      	cmp	r7, #0
  404142:	bfa8      	it	ge
  404144:	1bdb      	subge	r3, r3, r7
  404146:	2b00      	cmp	r3, #0
  404148:	461f      	mov	r7, r3
  40414a:	f340 80d6 	ble.w	4042fa <_svfprintf_r+0xd1a>
  40414e:	2f10      	cmp	r7, #16
  404150:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404152:	4d31      	ldr	r5, [pc, #196]	; (404218 <_svfprintf_r+0xc38>)
  404154:	f340 81ed 	ble.w	404532 <_svfprintf_r+0xf52>
  404158:	4642      	mov	r2, r8
  40415a:	4621      	mov	r1, r4
  40415c:	46b0      	mov	r8, r6
  40415e:	f04f 0b10 	mov.w	fp, #16
  404162:	462e      	mov	r6, r5
  404164:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404166:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404168:	e004      	b.n	404174 <_svfprintf_r+0xb94>
  40416a:	3208      	adds	r2, #8
  40416c:	3f10      	subs	r7, #16
  40416e:	2f10      	cmp	r7, #16
  404170:	f340 81db 	ble.w	40452a <_svfprintf_r+0xf4a>
  404174:	3301      	adds	r3, #1
  404176:	3110      	adds	r1, #16
  404178:	2b07      	cmp	r3, #7
  40417a:	9127      	str	r1, [sp, #156]	; 0x9c
  40417c:	9326      	str	r3, [sp, #152]	; 0x98
  40417e:	e882 0840 	stmia.w	r2, {r6, fp}
  404182:	ddf2      	ble.n	40416a <_svfprintf_r+0xb8a>
  404184:	aa25      	add	r2, sp, #148	; 0x94
  404186:	4629      	mov	r1, r5
  404188:	4620      	mov	r0, r4
  40418a:	f002 fb87 	bl	40689c <__ssprint_r>
  40418e:	2800      	cmp	r0, #0
  404190:	f47f aaf8 	bne.w	403784 <_svfprintf_r+0x1a4>
  404194:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404196:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404198:	464a      	mov	r2, r9
  40419a:	e7e7      	b.n	40416c <_svfprintf_r+0xb8c>
  40419c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40419e:	930e      	str	r3, [sp, #56]	; 0x38
  4041a0:	464e      	mov	r6, r9
  4041a2:	f7ff bb2d 	b.w	403800 <_svfprintf_r+0x220>
  4041a6:	2d00      	cmp	r5, #0
  4041a8:	bf08      	it	eq
  4041aa:	2c0a      	cmpeq	r4, #10
  4041ac:	f0c0 808f 	bcc.w	4042ce <_svfprintf_r+0xcee>
  4041b0:	464e      	mov	r6, r9
  4041b2:	4620      	mov	r0, r4
  4041b4:	4629      	mov	r1, r5
  4041b6:	220a      	movs	r2, #10
  4041b8:	2300      	movs	r3, #0
  4041ba:	f7fe ffed 	bl	403198 <__aeabi_uldivmod>
  4041be:	3230      	adds	r2, #48	; 0x30
  4041c0:	f806 2d01 	strb.w	r2, [r6, #-1]!
  4041c4:	4620      	mov	r0, r4
  4041c6:	4629      	mov	r1, r5
  4041c8:	2300      	movs	r3, #0
  4041ca:	220a      	movs	r2, #10
  4041cc:	f7fe ffe4 	bl	403198 <__aeabi_uldivmod>
  4041d0:	4604      	mov	r4, r0
  4041d2:	460d      	mov	r5, r1
  4041d4:	ea54 0305 	orrs.w	r3, r4, r5
  4041d8:	d1eb      	bne.n	4041b2 <_svfprintf_r+0xbd2>
  4041da:	eba9 0306 	sub.w	r3, r9, r6
  4041de:	930e      	str	r3, [sp, #56]	; 0x38
  4041e0:	f7ff bb0e 	b.w	403800 <_svfprintf_r+0x220>
  4041e4:	aa25      	add	r2, sp, #148	; 0x94
  4041e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4041e8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4041ea:	f002 fb57 	bl	40689c <__ssprint_r>
  4041ee:	2800      	cmp	r0, #0
  4041f0:	f47f aac8 	bne.w	403784 <_svfprintf_r+0x1a4>
  4041f4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4041f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4041fa:	46c8      	mov	r8, r9
  4041fc:	f7ff bb5e 	b.w	4038bc <_svfprintf_r+0x2dc>
  404200:	1e5e      	subs	r6, r3, #1
  404202:	2e00      	cmp	r6, #0
  404204:	f77f af0a 	ble.w	40401c <_svfprintf_r+0xa3c>
  404208:	2e10      	cmp	r6, #16
  40420a:	4d03      	ldr	r5, [pc, #12]	; (404218 <_svfprintf_r+0xc38>)
  40420c:	dd22      	ble.n	404254 <_svfprintf_r+0xc74>
  40420e:	4622      	mov	r2, r4
  404210:	f04f 0b10 	mov.w	fp, #16
  404214:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404216:	e006      	b.n	404226 <_svfprintf_r+0xc46>
  404218:	004085b4 	.word	0x004085b4
  40421c:	3e10      	subs	r6, #16
  40421e:	2e10      	cmp	r6, #16
  404220:	f108 0808 	add.w	r8, r8, #8
  404224:	dd15      	ble.n	404252 <_svfprintf_r+0xc72>
  404226:	3701      	adds	r7, #1
  404228:	3210      	adds	r2, #16
  40422a:	2f07      	cmp	r7, #7
  40422c:	9227      	str	r2, [sp, #156]	; 0x9c
  40422e:	9726      	str	r7, [sp, #152]	; 0x98
  404230:	e888 0820 	stmia.w	r8, {r5, fp}
  404234:	ddf2      	ble.n	40421c <_svfprintf_r+0xc3c>
  404236:	aa25      	add	r2, sp, #148	; 0x94
  404238:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40423a:	4620      	mov	r0, r4
  40423c:	f002 fb2e 	bl	40689c <__ssprint_r>
  404240:	2800      	cmp	r0, #0
  404242:	f47f aa9f 	bne.w	403784 <_svfprintf_r+0x1a4>
  404246:	3e10      	subs	r6, #16
  404248:	2e10      	cmp	r6, #16
  40424a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40424c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40424e:	46c8      	mov	r8, r9
  404250:	dce9      	bgt.n	404226 <_svfprintf_r+0xc46>
  404252:	4614      	mov	r4, r2
  404254:	3701      	adds	r7, #1
  404256:	4434      	add	r4, r6
  404258:	2f07      	cmp	r7, #7
  40425a:	9427      	str	r4, [sp, #156]	; 0x9c
  40425c:	9726      	str	r7, [sp, #152]	; 0x98
  40425e:	e888 0060 	stmia.w	r8, {r5, r6}
  404262:	f77f aed9 	ble.w	404018 <_svfprintf_r+0xa38>
  404266:	aa25      	add	r2, sp, #148	; 0x94
  404268:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40426a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40426c:	f002 fb16 	bl	40689c <__ssprint_r>
  404270:	2800      	cmp	r0, #0
  404272:	f47f aa87 	bne.w	403784 <_svfprintf_r+0x1a4>
  404276:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404278:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40427a:	46c8      	mov	r8, r9
  40427c:	e6ce      	b.n	40401c <_svfprintf_r+0xa3c>
  40427e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404280:	6814      	ldr	r4, [r2, #0]
  404282:	4613      	mov	r3, r2
  404284:	3304      	adds	r3, #4
  404286:	17e5      	asrs	r5, r4, #31
  404288:	930f      	str	r3, [sp, #60]	; 0x3c
  40428a:	4622      	mov	r2, r4
  40428c:	462b      	mov	r3, r5
  40428e:	e4fa      	b.n	403c86 <_svfprintf_r+0x6a6>
  404290:	3204      	adds	r2, #4
  404292:	681c      	ldr	r4, [r3, #0]
  404294:	920f      	str	r2, [sp, #60]	; 0x3c
  404296:	2301      	movs	r3, #1
  404298:	2500      	movs	r5, #0
  40429a:	f7ff ba94 	b.w	4037c6 <_svfprintf_r+0x1e6>
  40429e:	681c      	ldr	r4, [r3, #0]
  4042a0:	3304      	adds	r3, #4
  4042a2:	930f      	str	r3, [sp, #60]	; 0x3c
  4042a4:	2500      	movs	r5, #0
  4042a6:	e421      	b.n	403aec <_svfprintf_r+0x50c>
  4042a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4042aa:	460a      	mov	r2, r1
  4042ac:	3204      	adds	r2, #4
  4042ae:	680c      	ldr	r4, [r1, #0]
  4042b0:	920f      	str	r2, [sp, #60]	; 0x3c
  4042b2:	2500      	movs	r5, #0
  4042b4:	f7ff ba87 	b.w	4037c6 <_svfprintf_r+0x1e6>
  4042b8:	4614      	mov	r4, r2
  4042ba:	3301      	adds	r3, #1
  4042bc:	4434      	add	r4, r6
  4042be:	2b07      	cmp	r3, #7
  4042c0:	9427      	str	r4, [sp, #156]	; 0x9c
  4042c2:	9326      	str	r3, [sp, #152]	; 0x98
  4042c4:	e888 0060 	stmia.w	r8, {r5, r6}
  4042c8:	f77f ab68 	ble.w	40399c <_svfprintf_r+0x3bc>
  4042cc:	e6b3      	b.n	404036 <_svfprintf_r+0xa56>
  4042ce:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4042d2:	f8cd b01c 	str.w	fp, [sp, #28]
  4042d6:	ae42      	add	r6, sp, #264	; 0x108
  4042d8:	3430      	adds	r4, #48	; 0x30
  4042da:	2301      	movs	r3, #1
  4042dc:	f806 4d41 	strb.w	r4, [r6, #-65]!
  4042e0:	930e      	str	r3, [sp, #56]	; 0x38
  4042e2:	f7ff ba8d 	b.w	403800 <_svfprintf_r+0x220>
  4042e6:	aa25      	add	r2, sp, #148	; 0x94
  4042e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4042ea:	980c      	ldr	r0, [sp, #48]	; 0x30
  4042ec:	f002 fad6 	bl	40689c <__ssprint_r>
  4042f0:	2800      	cmp	r0, #0
  4042f2:	f47f aa47 	bne.w	403784 <_svfprintf_r+0x1a4>
  4042f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4042f8:	46c8      	mov	r8, r9
  4042fa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4042fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4042fe:	429a      	cmp	r2, r3
  404300:	db44      	blt.n	40438c <_svfprintf_r+0xdac>
  404302:	9b07      	ldr	r3, [sp, #28]
  404304:	07d9      	lsls	r1, r3, #31
  404306:	d441      	bmi.n	40438c <_svfprintf_r+0xdac>
  404308:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40430a:	9812      	ldr	r0, [sp, #72]	; 0x48
  40430c:	1a9a      	subs	r2, r3, r2
  40430e:	1a1d      	subs	r5, r3, r0
  404310:	4295      	cmp	r5, r2
  404312:	bfa8      	it	ge
  404314:	4615      	movge	r5, r2
  404316:	2d00      	cmp	r5, #0
  404318:	dd0e      	ble.n	404338 <_svfprintf_r+0xd58>
  40431a:	9926      	ldr	r1, [sp, #152]	; 0x98
  40431c:	f8c8 5004 	str.w	r5, [r8, #4]
  404320:	3101      	adds	r1, #1
  404322:	4406      	add	r6, r0
  404324:	442c      	add	r4, r5
  404326:	2907      	cmp	r1, #7
  404328:	f8c8 6000 	str.w	r6, [r8]
  40432c:	9427      	str	r4, [sp, #156]	; 0x9c
  40432e:	9126      	str	r1, [sp, #152]	; 0x98
  404330:	f300 823b 	bgt.w	4047aa <_svfprintf_r+0x11ca>
  404334:	f108 0808 	add.w	r8, r8, #8
  404338:	2d00      	cmp	r5, #0
  40433a:	bfac      	ite	ge
  40433c:	1b56      	subge	r6, r2, r5
  40433e:	4616      	movlt	r6, r2
  404340:	2e00      	cmp	r6, #0
  404342:	f77f ab2d 	ble.w	4039a0 <_svfprintf_r+0x3c0>
  404346:	2e10      	cmp	r6, #16
  404348:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40434a:	4db0      	ldr	r5, [pc, #704]	; (40460c <_svfprintf_r+0x102c>)
  40434c:	ddb5      	ble.n	4042ba <_svfprintf_r+0xcda>
  40434e:	4622      	mov	r2, r4
  404350:	2710      	movs	r7, #16
  404352:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404356:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404358:	e004      	b.n	404364 <_svfprintf_r+0xd84>
  40435a:	f108 0808 	add.w	r8, r8, #8
  40435e:	3e10      	subs	r6, #16
  404360:	2e10      	cmp	r6, #16
  404362:	dda9      	ble.n	4042b8 <_svfprintf_r+0xcd8>
  404364:	3301      	adds	r3, #1
  404366:	3210      	adds	r2, #16
  404368:	2b07      	cmp	r3, #7
  40436a:	9227      	str	r2, [sp, #156]	; 0x9c
  40436c:	9326      	str	r3, [sp, #152]	; 0x98
  40436e:	e888 00a0 	stmia.w	r8, {r5, r7}
  404372:	ddf2      	ble.n	40435a <_svfprintf_r+0xd7a>
  404374:	aa25      	add	r2, sp, #148	; 0x94
  404376:	4621      	mov	r1, r4
  404378:	4658      	mov	r0, fp
  40437a:	f002 fa8f 	bl	40689c <__ssprint_r>
  40437e:	2800      	cmp	r0, #0
  404380:	f47f aa00 	bne.w	403784 <_svfprintf_r+0x1a4>
  404384:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404386:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404388:	46c8      	mov	r8, r9
  40438a:	e7e8      	b.n	40435e <_svfprintf_r+0xd7e>
  40438c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40438e:	9819      	ldr	r0, [sp, #100]	; 0x64
  404390:	991a      	ldr	r1, [sp, #104]	; 0x68
  404392:	f8c8 1000 	str.w	r1, [r8]
  404396:	3301      	adds	r3, #1
  404398:	4404      	add	r4, r0
  40439a:	2b07      	cmp	r3, #7
  40439c:	9427      	str	r4, [sp, #156]	; 0x9c
  40439e:	f8c8 0004 	str.w	r0, [r8, #4]
  4043a2:	9326      	str	r3, [sp, #152]	; 0x98
  4043a4:	f300 81f5 	bgt.w	404792 <_svfprintf_r+0x11b2>
  4043a8:	f108 0808 	add.w	r8, r8, #8
  4043ac:	e7ac      	b.n	404308 <_svfprintf_r+0xd28>
  4043ae:	9b07      	ldr	r3, [sp, #28]
  4043b0:	07da      	lsls	r2, r3, #31
  4043b2:	f53f adfe 	bmi.w	403fb2 <_svfprintf_r+0x9d2>
  4043b6:	3701      	adds	r7, #1
  4043b8:	3401      	adds	r4, #1
  4043ba:	2301      	movs	r3, #1
  4043bc:	2f07      	cmp	r7, #7
  4043be:	9427      	str	r4, [sp, #156]	; 0x9c
  4043c0:	9726      	str	r7, [sp, #152]	; 0x98
  4043c2:	f8c8 6000 	str.w	r6, [r8]
  4043c6:	f8c8 3004 	str.w	r3, [r8, #4]
  4043ca:	f77f ae25 	ble.w	404018 <_svfprintf_r+0xa38>
  4043ce:	e74a      	b.n	404266 <_svfprintf_r+0xc86>
  4043d0:	aa25      	add	r2, sp, #148	; 0x94
  4043d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4043d4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4043d6:	f002 fa61 	bl	40689c <__ssprint_r>
  4043da:	2800      	cmp	r0, #0
  4043dc:	f47f a9d2 	bne.w	403784 <_svfprintf_r+0x1a4>
  4043e0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4043e2:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4043e4:	46c8      	mov	r8, r9
  4043e6:	e5f2      	b.n	403fce <_svfprintf_r+0x9ee>
  4043e8:	aa25      	add	r2, sp, #148	; 0x94
  4043ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4043ec:	980c      	ldr	r0, [sp, #48]	; 0x30
  4043ee:	f002 fa55 	bl	40689c <__ssprint_r>
  4043f2:	2800      	cmp	r0, #0
  4043f4:	f47f a9c6 	bne.w	403784 <_svfprintf_r+0x1a4>
  4043f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4043fa:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4043fc:	46c8      	mov	r8, r9
  4043fe:	e5f5      	b.n	403fec <_svfprintf_r+0xa0c>
  404400:	464e      	mov	r6, r9
  404402:	f7ff b9fd 	b.w	403800 <_svfprintf_r+0x220>
  404406:	aa25      	add	r2, sp, #148	; 0x94
  404408:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40440a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40440c:	f002 fa46 	bl	40689c <__ssprint_r>
  404410:	2800      	cmp	r0, #0
  404412:	f47f a9b7 	bne.w	403784 <_svfprintf_r+0x1a4>
  404416:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404418:	46c8      	mov	r8, r9
  40441a:	f7ff ba72 	b.w	403902 <_svfprintf_r+0x322>
  40441e:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404420:	4622      	mov	r2, r4
  404422:	4620      	mov	r0, r4
  404424:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404426:	4623      	mov	r3, r4
  404428:	4621      	mov	r1, r4
  40442a:	f003 fafd 	bl	407a28 <__aeabi_dcmpun>
  40442e:	2800      	cmp	r0, #0
  404430:	f040 8286 	bne.w	404940 <_svfprintf_r+0x1360>
  404434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404436:	3301      	adds	r3, #1
  404438:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40443a:	f023 0320 	bic.w	r3, r3, #32
  40443e:	930e      	str	r3, [sp, #56]	; 0x38
  404440:	f000 81e2 	beq.w	404808 <_svfprintf_r+0x1228>
  404444:	2b47      	cmp	r3, #71	; 0x47
  404446:	f000 811e 	beq.w	404686 <_svfprintf_r+0x10a6>
  40444a:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40444e:	9307      	str	r3, [sp, #28]
  404450:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404452:	1e1f      	subs	r7, r3, #0
  404454:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404456:	9308      	str	r3, [sp, #32]
  404458:	bfbb      	ittet	lt
  40445a:	463b      	movlt	r3, r7
  40445c:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404460:	2300      	movge	r3, #0
  404462:	232d      	movlt	r3, #45	; 0x2d
  404464:	9310      	str	r3, [sp, #64]	; 0x40
  404466:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404468:	2b66      	cmp	r3, #102	; 0x66
  40446a:	f000 81bb 	beq.w	4047e4 <_svfprintf_r+0x1204>
  40446e:	2b46      	cmp	r3, #70	; 0x46
  404470:	f000 80df 	beq.w	404632 <_svfprintf_r+0x1052>
  404474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404476:	9a08      	ldr	r2, [sp, #32]
  404478:	2b45      	cmp	r3, #69	; 0x45
  40447a:	bf0c      	ite	eq
  40447c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40447e:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  404480:	a823      	add	r0, sp, #140	; 0x8c
  404482:	a920      	add	r1, sp, #128	; 0x80
  404484:	bf08      	it	eq
  404486:	1c5d      	addeq	r5, r3, #1
  404488:	9004      	str	r0, [sp, #16]
  40448a:	9103      	str	r1, [sp, #12]
  40448c:	a81f      	add	r0, sp, #124	; 0x7c
  40448e:	2102      	movs	r1, #2
  404490:	463b      	mov	r3, r7
  404492:	9002      	str	r0, [sp, #8]
  404494:	9501      	str	r5, [sp, #4]
  404496:	9100      	str	r1, [sp, #0]
  404498:	980c      	ldr	r0, [sp, #48]	; 0x30
  40449a:	f000 fb75 	bl	404b88 <_dtoa_r>
  40449e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4044a0:	2b67      	cmp	r3, #103	; 0x67
  4044a2:	4606      	mov	r6, r0
  4044a4:	f040 81e0 	bne.w	404868 <_svfprintf_r+0x1288>
  4044a8:	f01b 0f01 	tst.w	fp, #1
  4044ac:	f000 8246 	beq.w	40493c <_svfprintf_r+0x135c>
  4044b0:	1974      	adds	r4, r6, r5
  4044b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4044b4:	9808      	ldr	r0, [sp, #32]
  4044b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4044b8:	4639      	mov	r1, r7
  4044ba:	f003 fa83 	bl	4079c4 <__aeabi_dcmpeq>
  4044be:	2800      	cmp	r0, #0
  4044c0:	f040 8165 	bne.w	40478e <_svfprintf_r+0x11ae>
  4044c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4044c6:	42a3      	cmp	r3, r4
  4044c8:	d206      	bcs.n	4044d8 <_svfprintf_r+0xef8>
  4044ca:	2130      	movs	r1, #48	; 0x30
  4044cc:	1c5a      	adds	r2, r3, #1
  4044ce:	9223      	str	r2, [sp, #140]	; 0x8c
  4044d0:	7019      	strb	r1, [r3, #0]
  4044d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4044d4:	429c      	cmp	r4, r3
  4044d6:	d8f9      	bhi.n	4044cc <_svfprintf_r+0xeec>
  4044d8:	1b9b      	subs	r3, r3, r6
  4044da:	9313      	str	r3, [sp, #76]	; 0x4c
  4044dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4044de:	2b47      	cmp	r3, #71	; 0x47
  4044e0:	f000 80e9 	beq.w	4046b6 <_svfprintf_r+0x10d6>
  4044e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4044e6:	2b65      	cmp	r3, #101	; 0x65
  4044e8:	f340 81cd 	ble.w	404886 <_svfprintf_r+0x12a6>
  4044ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4044ee:	2b66      	cmp	r3, #102	; 0x66
  4044f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4044f2:	9312      	str	r3, [sp, #72]	; 0x48
  4044f4:	f000 819e 	beq.w	404834 <_svfprintf_r+0x1254>
  4044f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4044fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4044fc:	4619      	mov	r1, r3
  4044fe:	4291      	cmp	r1, r2
  404500:	f300 818a 	bgt.w	404818 <_svfprintf_r+0x1238>
  404504:	f01b 0f01 	tst.w	fp, #1
  404508:	f040 8213 	bne.w	404932 <_svfprintf_r+0x1352>
  40450c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404510:	9308      	str	r3, [sp, #32]
  404512:	2367      	movs	r3, #103	; 0x67
  404514:	920e      	str	r2, [sp, #56]	; 0x38
  404516:	9311      	str	r3, [sp, #68]	; 0x44
  404518:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40451a:	2b00      	cmp	r3, #0
  40451c:	f040 80c4 	bne.w	4046a8 <_svfprintf_r+0x10c8>
  404520:	930a      	str	r3, [sp, #40]	; 0x28
  404522:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404526:	f7ff b973 	b.w	403810 <_svfprintf_r+0x230>
  40452a:	4635      	mov	r5, r6
  40452c:	460c      	mov	r4, r1
  40452e:	4646      	mov	r6, r8
  404530:	4690      	mov	r8, r2
  404532:	3301      	adds	r3, #1
  404534:	443c      	add	r4, r7
  404536:	2b07      	cmp	r3, #7
  404538:	9427      	str	r4, [sp, #156]	; 0x9c
  40453a:	9326      	str	r3, [sp, #152]	; 0x98
  40453c:	e888 00a0 	stmia.w	r8, {r5, r7}
  404540:	f73f aed1 	bgt.w	4042e6 <_svfprintf_r+0xd06>
  404544:	f108 0808 	add.w	r8, r8, #8
  404548:	e6d7      	b.n	4042fa <_svfprintf_r+0xd1a>
  40454a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40454c:	6813      	ldr	r3, [r2, #0]
  40454e:	3204      	adds	r2, #4
  404550:	920f      	str	r2, [sp, #60]	; 0x3c
  404552:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404554:	601a      	str	r2, [r3, #0]
  404556:	f7ff b86a 	b.w	40362e <_svfprintf_r+0x4e>
  40455a:	aa25      	add	r2, sp, #148	; 0x94
  40455c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40455e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404560:	f002 f99c 	bl	40689c <__ssprint_r>
  404564:	2800      	cmp	r0, #0
  404566:	f47f a90d 	bne.w	403784 <_svfprintf_r+0x1a4>
  40456a:	46c8      	mov	r8, r9
  40456c:	e48d      	b.n	403e8a <_svfprintf_r+0x8aa>
  40456e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404570:	4a27      	ldr	r2, [pc, #156]	; (404610 <_svfprintf_r+0x1030>)
  404572:	f8c8 2000 	str.w	r2, [r8]
  404576:	3301      	adds	r3, #1
  404578:	3401      	adds	r4, #1
  40457a:	2201      	movs	r2, #1
  40457c:	2b07      	cmp	r3, #7
  40457e:	9427      	str	r4, [sp, #156]	; 0x9c
  404580:	9326      	str	r3, [sp, #152]	; 0x98
  404582:	f8c8 2004 	str.w	r2, [r8, #4]
  404586:	dc72      	bgt.n	40466e <_svfprintf_r+0x108e>
  404588:	f108 0808 	add.w	r8, r8, #8
  40458c:	b929      	cbnz	r1, 40459a <_svfprintf_r+0xfba>
  40458e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404590:	b91b      	cbnz	r3, 40459a <_svfprintf_r+0xfba>
  404592:	9b07      	ldr	r3, [sp, #28]
  404594:	07d8      	lsls	r0, r3, #31
  404596:	f57f aa03 	bpl.w	4039a0 <_svfprintf_r+0x3c0>
  40459a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40459c:	9819      	ldr	r0, [sp, #100]	; 0x64
  40459e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4045a0:	f8c8 2000 	str.w	r2, [r8]
  4045a4:	3301      	adds	r3, #1
  4045a6:	4602      	mov	r2, r0
  4045a8:	4422      	add	r2, r4
  4045aa:	2b07      	cmp	r3, #7
  4045ac:	9227      	str	r2, [sp, #156]	; 0x9c
  4045ae:	f8c8 0004 	str.w	r0, [r8, #4]
  4045b2:	9326      	str	r3, [sp, #152]	; 0x98
  4045b4:	f300 818d 	bgt.w	4048d2 <_svfprintf_r+0x12f2>
  4045b8:	f108 0808 	add.w	r8, r8, #8
  4045bc:	2900      	cmp	r1, #0
  4045be:	f2c0 8165 	blt.w	40488c <_svfprintf_r+0x12ac>
  4045c2:	9913      	ldr	r1, [sp, #76]	; 0x4c
  4045c4:	f8c8 6000 	str.w	r6, [r8]
  4045c8:	3301      	adds	r3, #1
  4045ca:	188c      	adds	r4, r1, r2
  4045cc:	2b07      	cmp	r3, #7
  4045ce:	9427      	str	r4, [sp, #156]	; 0x9c
  4045d0:	9326      	str	r3, [sp, #152]	; 0x98
  4045d2:	f8c8 1004 	str.w	r1, [r8, #4]
  4045d6:	f77f a9e1 	ble.w	40399c <_svfprintf_r+0x3bc>
  4045da:	e52c      	b.n	404036 <_svfprintf_r+0xa56>
  4045dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4045de:	9909      	ldr	r1, [sp, #36]	; 0x24
  4045e0:	6813      	ldr	r3, [r2, #0]
  4045e2:	17cd      	asrs	r5, r1, #31
  4045e4:	4608      	mov	r0, r1
  4045e6:	3204      	adds	r2, #4
  4045e8:	4629      	mov	r1, r5
  4045ea:	920f      	str	r2, [sp, #60]	; 0x3c
  4045ec:	e9c3 0100 	strd	r0, r1, [r3]
  4045f0:	f7ff b81d 	b.w	40362e <_svfprintf_r+0x4e>
  4045f4:	aa25      	add	r2, sp, #148	; 0x94
  4045f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4045f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045fa:	f002 f94f 	bl	40689c <__ssprint_r>
  4045fe:	2800      	cmp	r0, #0
  404600:	f47f a8c0 	bne.w	403784 <_svfprintf_r+0x1a4>
  404604:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404606:	46c8      	mov	r8, r9
  404608:	e458      	b.n	403ebc <_svfprintf_r+0x8dc>
  40460a:	bf00      	nop
  40460c:	004085b4 	.word	0x004085b4
  404610:	004085a0 	.word	0x004085a0
  404614:	2140      	movs	r1, #64	; 0x40
  404616:	980c      	ldr	r0, [sp, #48]	; 0x30
  404618:	f001 fa0c 	bl	405a34 <_malloc_r>
  40461c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40461e:	6010      	str	r0, [r2, #0]
  404620:	6110      	str	r0, [r2, #16]
  404622:	2800      	cmp	r0, #0
  404624:	f000 81f2 	beq.w	404a0c <_svfprintf_r+0x142c>
  404628:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40462a:	2340      	movs	r3, #64	; 0x40
  40462c:	6153      	str	r3, [r2, #20]
  40462e:	f7fe bfee 	b.w	40360e <_svfprintf_r+0x2e>
  404632:	a823      	add	r0, sp, #140	; 0x8c
  404634:	a920      	add	r1, sp, #128	; 0x80
  404636:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404638:	9004      	str	r0, [sp, #16]
  40463a:	9103      	str	r1, [sp, #12]
  40463c:	a81f      	add	r0, sp, #124	; 0x7c
  40463e:	2103      	movs	r1, #3
  404640:	9002      	str	r0, [sp, #8]
  404642:	9a08      	ldr	r2, [sp, #32]
  404644:	9401      	str	r4, [sp, #4]
  404646:	463b      	mov	r3, r7
  404648:	9100      	str	r1, [sp, #0]
  40464a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40464c:	f000 fa9c 	bl	404b88 <_dtoa_r>
  404650:	4625      	mov	r5, r4
  404652:	4606      	mov	r6, r0
  404654:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404656:	2b46      	cmp	r3, #70	; 0x46
  404658:	eb06 0405 	add.w	r4, r6, r5
  40465c:	f47f af29 	bne.w	4044b2 <_svfprintf_r+0xed2>
  404660:	7833      	ldrb	r3, [r6, #0]
  404662:	2b30      	cmp	r3, #48	; 0x30
  404664:	f000 8178 	beq.w	404958 <_svfprintf_r+0x1378>
  404668:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  40466a:	442c      	add	r4, r5
  40466c:	e721      	b.n	4044b2 <_svfprintf_r+0xed2>
  40466e:	aa25      	add	r2, sp, #148	; 0x94
  404670:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404672:	980c      	ldr	r0, [sp, #48]	; 0x30
  404674:	f002 f912 	bl	40689c <__ssprint_r>
  404678:	2800      	cmp	r0, #0
  40467a:	f47f a883 	bne.w	403784 <_svfprintf_r+0x1a4>
  40467e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404680:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404682:	46c8      	mov	r8, r9
  404684:	e782      	b.n	40458c <_svfprintf_r+0xfac>
  404686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404688:	2b00      	cmp	r3, #0
  40468a:	bf08      	it	eq
  40468c:	2301      	moveq	r3, #1
  40468e:	930a      	str	r3, [sp, #40]	; 0x28
  404690:	e6db      	b.n	40444a <_svfprintf_r+0xe6a>
  404692:	4630      	mov	r0, r6
  404694:	940a      	str	r4, [sp, #40]	; 0x28
  404696:	f002 f893 	bl	4067c0 <strlen>
  40469a:	950f      	str	r5, [sp, #60]	; 0x3c
  40469c:	900e      	str	r0, [sp, #56]	; 0x38
  40469e:	f8cd b01c 	str.w	fp, [sp, #28]
  4046a2:	4603      	mov	r3, r0
  4046a4:	f7ff b9f9 	b.w	403a9a <_svfprintf_r+0x4ba>
  4046a8:	272d      	movs	r7, #45	; 0x2d
  4046aa:	2300      	movs	r3, #0
  4046ac:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4046b0:	930a      	str	r3, [sp, #40]	; 0x28
  4046b2:	f7ff b8ae 	b.w	403812 <_svfprintf_r+0x232>
  4046b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4046b8:	9312      	str	r3, [sp, #72]	; 0x48
  4046ba:	461a      	mov	r2, r3
  4046bc:	3303      	adds	r3, #3
  4046be:	db04      	blt.n	4046ca <_svfprintf_r+0x10ea>
  4046c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4046c2:	4619      	mov	r1, r3
  4046c4:	4291      	cmp	r1, r2
  4046c6:	f6bf af17 	bge.w	4044f8 <_svfprintf_r+0xf18>
  4046ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4046cc:	3b02      	subs	r3, #2
  4046ce:	9311      	str	r3, [sp, #68]	; 0x44
  4046d0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  4046d4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  4046d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4046da:	3b01      	subs	r3, #1
  4046dc:	2b00      	cmp	r3, #0
  4046de:	931f      	str	r3, [sp, #124]	; 0x7c
  4046e0:	bfbd      	ittte	lt
  4046e2:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4046e4:	f1c3 0301 	rsblt	r3, r3, #1
  4046e8:	222d      	movlt	r2, #45	; 0x2d
  4046ea:	222b      	movge	r2, #43	; 0x2b
  4046ec:	2b09      	cmp	r3, #9
  4046ee:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4046f2:	f340 8116 	ble.w	404922 <_svfprintf_r+0x1342>
  4046f6:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4046fa:	4620      	mov	r0, r4
  4046fc:	4dab      	ldr	r5, [pc, #684]	; (4049ac <_svfprintf_r+0x13cc>)
  4046fe:	e000      	b.n	404702 <_svfprintf_r+0x1122>
  404700:	4610      	mov	r0, r2
  404702:	fb85 1203 	smull	r1, r2, r5, r3
  404706:	17d9      	asrs	r1, r3, #31
  404708:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  40470c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404710:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404714:	3230      	adds	r2, #48	; 0x30
  404716:	2909      	cmp	r1, #9
  404718:	f800 2c01 	strb.w	r2, [r0, #-1]
  40471c:	460b      	mov	r3, r1
  40471e:	f100 32ff 	add.w	r2, r0, #4294967295
  404722:	dced      	bgt.n	404700 <_svfprintf_r+0x1120>
  404724:	3330      	adds	r3, #48	; 0x30
  404726:	3802      	subs	r0, #2
  404728:	b2d9      	uxtb	r1, r3
  40472a:	4284      	cmp	r4, r0
  40472c:	f802 1c01 	strb.w	r1, [r2, #-1]
  404730:	f240 8165 	bls.w	4049fe <_svfprintf_r+0x141e>
  404734:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  404738:	4613      	mov	r3, r2
  40473a:	e001      	b.n	404740 <_svfprintf_r+0x1160>
  40473c:	f813 1b01 	ldrb.w	r1, [r3], #1
  404740:	f800 1b01 	strb.w	r1, [r0], #1
  404744:	42a3      	cmp	r3, r4
  404746:	d1f9      	bne.n	40473c <_svfprintf_r+0x115c>
  404748:	3301      	adds	r3, #1
  40474a:	1a9b      	subs	r3, r3, r2
  40474c:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  404750:	4413      	add	r3, r2
  404752:	aa21      	add	r2, sp, #132	; 0x84
  404754:	1a9b      	subs	r3, r3, r2
  404756:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404758:	931b      	str	r3, [sp, #108]	; 0x6c
  40475a:	2a01      	cmp	r2, #1
  40475c:	4413      	add	r3, r2
  40475e:	930e      	str	r3, [sp, #56]	; 0x38
  404760:	f340 8119 	ble.w	404996 <_svfprintf_r+0x13b6>
  404764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404766:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404768:	4413      	add	r3, r2
  40476a:	930e      	str	r3, [sp, #56]	; 0x38
  40476c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404770:	9308      	str	r3, [sp, #32]
  404772:	2300      	movs	r3, #0
  404774:	9312      	str	r3, [sp, #72]	; 0x48
  404776:	e6cf      	b.n	404518 <_svfprintf_r+0xf38>
  404778:	aa25      	add	r2, sp, #148	; 0x94
  40477a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40477c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40477e:	f002 f88d 	bl	40689c <__ssprint_r>
  404782:	2800      	cmp	r0, #0
  404784:	f47e affe 	bne.w	403784 <_svfprintf_r+0x1a4>
  404788:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40478a:	46c8      	mov	r8, r9
  40478c:	e4d7      	b.n	40413e <_svfprintf_r+0xb5e>
  40478e:	4623      	mov	r3, r4
  404790:	e6a2      	b.n	4044d8 <_svfprintf_r+0xef8>
  404792:	aa25      	add	r2, sp, #148	; 0x94
  404794:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404796:	980c      	ldr	r0, [sp, #48]	; 0x30
  404798:	f002 f880 	bl	40689c <__ssprint_r>
  40479c:	2800      	cmp	r0, #0
  40479e:	f47e aff1 	bne.w	403784 <_svfprintf_r+0x1a4>
  4047a2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4047a4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4047a6:	46c8      	mov	r8, r9
  4047a8:	e5ae      	b.n	404308 <_svfprintf_r+0xd28>
  4047aa:	aa25      	add	r2, sp, #148	; 0x94
  4047ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4047ae:	980c      	ldr	r0, [sp, #48]	; 0x30
  4047b0:	f002 f874 	bl	40689c <__ssprint_r>
  4047b4:	2800      	cmp	r0, #0
  4047b6:	f47e afe5 	bne.w	403784 <_svfprintf_r+0x1a4>
  4047ba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4047bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4047be:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4047c0:	1a9a      	subs	r2, r3, r2
  4047c2:	46c8      	mov	r8, r9
  4047c4:	e5b8      	b.n	404338 <_svfprintf_r+0xd58>
  4047c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4047c8:	9612      	str	r6, [sp, #72]	; 0x48
  4047ca:	2b06      	cmp	r3, #6
  4047cc:	bf28      	it	cs
  4047ce:	2306      	movcs	r3, #6
  4047d0:	960a      	str	r6, [sp, #40]	; 0x28
  4047d2:	4637      	mov	r7, r6
  4047d4:	9308      	str	r3, [sp, #32]
  4047d6:	950f      	str	r5, [sp, #60]	; 0x3c
  4047d8:	f8cd b01c 	str.w	fp, [sp, #28]
  4047dc:	930e      	str	r3, [sp, #56]	; 0x38
  4047de:	4e74      	ldr	r6, [pc, #464]	; (4049b0 <_svfprintf_r+0x13d0>)
  4047e0:	f7ff b816 	b.w	403810 <_svfprintf_r+0x230>
  4047e4:	a823      	add	r0, sp, #140	; 0x8c
  4047e6:	a920      	add	r1, sp, #128	; 0x80
  4047e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4047ea:	9004      	str	r0, [sp, #16]
  4047ec:	9103      	str	r1, [sp, #12]
  4047ee:	a81f      	add	r0, sp, #124	; 0x7c
  4047f0:	2103      	movs	r1, #3
  4047f2:	9002      	str	r0, [sp, #8]
  4047f4:	9a08      	ldr	r2, [sp, #32]
  4047f6:	9501      	str	r5, [sp, #4]
  4047f8:	463b      	mov	r3, r7
  4047fa:	9100      	str	r1, [sp, #0]
  4047fc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4047fe:	f000 f9c3 	bl	404b88 <_dtoa_r>
  404802:	4606      	mov	r6, r0
  404804:	1944      	adds	r4, r0, r5
  404806:	e72b      	b.n	404660 <_svfprintf_r+0x1080>
  404808:	2306      	movs	r3, #6
  40480a:	930a      	str	r3, [sp, #40]	; 0x28
  40480c:	e61d      	b.n	40444a <_svfprintf_r+0xe6a>
  40480e:	272d      	movs	r7, #45	; 0x2d
  404810:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404814:	f7ff bacd 	b.w	403db2 <_svfprintf_r+0x7d2>
  404818:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40481a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40481c:	4413      	add	r3, r2
  40481e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404820:	930e      	str	r3, [sp, #56]	; 0x38
  404822:	2a00      	cmp	r2, #0
  404824:	f340 80b0 	ble.w	404988 <_svfprintf_r+0x13a8>
  404828:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40482c:	9308      	str	r3, [sp, #32]
  40482e:	2367      	movs	r3, #103	; 0x67
  404830:	9311      	str	r3, [sp, #68]	; 0x44
  404832:	e671      	b.n	404518 <_svfprintf_r+0xf38>
  404834:	2b00      	cmp	r3, #0
  404836:	f340 80c3 	ble.w	4049c0 <_svfprintf_r+0x13e0>
  40483a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40483c:	2a00      	cmp	r2, #0
  40483e:	f040 8099 	bne.w	404974 <_svfprintf_r+0x1394>
  404842:	f01b 0f01 	tst.w	fp, #1
  404846:	f040 8095 	bne.w	404974 <_svfprintf_r+0x1394>
  40484a:	9308      	str	r3, [sp, #32]
  40484c:	930e      	str	r3, [sp, #56]	; 0x38
  40484e:	e663      	b.n	404518 <_svfprintf_r+0xf38>
  404850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404852:	9308      	str	r3, [sp, #32]
  404854:	930e      	str	r3, [sp, #56]	; 0x38
  404856:	900a      	str	r0, [sp, #40]	; 0x28
  404858:	950f      	str	r5, [sp, #60]	; 0x3c
  40485a:	f8cd b01c 	str.w	fp, [sp, #28]
  40485e:	9012      	str	r0, [sp, #72]	; 0x48
  404860:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404864:	f7fe bfd4 	b.w	403810 <_svfprintf_r+0x230>
  404868:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40486a:	2b47      	cmp	r3, #71	; 0x47
  40486c:	f47f ae20 	bne.w	4044b0 <_svfprintf_r+0xed0>
  404870:	f01b 0f01 	tst.w	fp, #1
  404874:	f47f aeee 	bne.w	404654 <_svfprintf_r+0x1074>
  404878:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40487a:	1b9b      	subs	r3, r3, r6
  40487c:	9313      	str	r3, [sp, #76]	; 0x4c
  40487e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404880:	2b47      	cmp	r3, #71	; 0x47
  404882:	f43f af18 	beq.w	4046b6 <_svfprintf_r+0x10d6>
  404886:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404888:	9312      	str	r3, [sp, #72]	; 0x48
  40488a:	e721      	b.n	4046d0 <_svfprintf_r+0x10f0>
  40488c:	424f      	negs	r7, r1
  40488e:	3110      	adds	r1, #16
  404890:	4d48      	ldr	r5, [pc, #288]	; (4049b4 <_svfprintf_r+0x13d4>)
  404892:	da2f      	bge.n	4048f4 <_svfprintf_r+0x1314>
  404894:	2410      	movs	r4, #16
  404896:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40489a:	e004      	b.n	4048a6 <_svfprintf_r+0x12c6>
  40489c:	f108 0808 	add.w	r8, r8, #8
  4048a0:	3f10      	subs	r7, #16
  4048a2:	2f10      	cmp	r7, #16
  4048a4:	dd26      	ble.n	4048f4 <_svfprintf_r+0x1314>
  4048a6:	3301      	adds	r3, #1
  4048a8:	3210      	adds	r2, #16
  4048aa:	2b07      	cmp	r3, #7
  4048ac:	9227      	str	r2, [sp, #156]	; 0x9c
  4048ae:	9326      	str	r3, [sp, #152]	; 0x98
  4048b0:	f8c8 5000 	str.w	r5, [r8]
  4048b4:	f8c8 4004 	str.w	r4, [r8, #4]
  4048b8:	ddf0      	ble.n	40489c <_svfprintf_r+0x12bc>
  4048ba:	aa25      	add	r2, sp, #148	; 0x94
  4048bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048be:	4658      	mov	r0, fp
  4048c0:	f001 ffec 	bl	40689c <__ssprint_r>
  4048c4:	2800      	cmp	r0, #0
  4048c6:	f47e af5d 	bne.w	403784 <_svfprintf_r+0x1a4>
  4048ca:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4048cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048ce:	46c8      	mov	r8, r9
  4048d0:	e7e6      	b.n	4048a0 <_svfprintf_r+0x12c0>
  4048d2:	aa25      	add	r2, sp, #148	; 0x94
  4048d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048d6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048d8:	f001 ffe0 	bl	40689c <__ssprint_r>
  4048dc:	2800      	cmp	r0, #0
  4048de:	f47e af51 	bne.w	403784 <_svfprintf_r+0x1a4>
  4048e2:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4048e4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4048e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048e8:	46c8      	mov	r8, r9
  4048ea:	e667      	b.n	4045bc <_svfprintf_r+0xfdc>
  4048ec:	2000      	movs	r0, #0
  4048ee:	900a      	str	r0, [sp, #40]	; 0x28
  4048f0:	f7fe bed0 	b.w	403694 <_svfprintf_r+0xb4>
  4048f4:	3301      	adds	r3, #1
  4048f6:	443a      	add	r2, r7
  4048f8:	2b07      	cmp	r3, #7
  4048fa:	e888 00a0 	stmia.w	r8, {r5, r7}
  4048fe:	9227      	str	r2, [sp, #156]	; 0x9c
  404900:	9326      	str	r3, [sp, #152]	; 0x98
  404902:	f108 0808 	add.w	r8, r8, #8
  404906:	f77f ae5c 	ble.w	4045c2 <_svfprintf_r+0xfe2>
  40490a:	aa25      	add	r2, sp, #148	; 0x94
  40490c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40490e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404910:	f001 ffc4 	bl	40689c <__ssprint_r>
  404914:	2800      	cmp	r0, #0
  404916:	f47e af35 	bne.w	403784 <_svfprintf_r+0x1a4>
  40491a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40491c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40491e:	46c8      	mov	r8, r9
  404920:	e64f      	b.n	4045c2 <_svfprintf_r+0xfe2>
  404922:	3330      	adds	r3, #48	; 0x30
  404924:	2230      	movs	r2, #48	; 0x30
  404926:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  40492a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  40492e:	ab22      	add	r3, sp, #136	; 0x88
  404930:	e70f      	b.n	404752 <_svfprintf_r+0x1172>
  404932:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404934:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404936:	4413      	add	r3, r2
  404938:	930e      	str	r3, [sp, #56]	; 0x38
  40493a:	e775      	b.n	404828 <_svfprintf_r+0x1248>
  40493c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40493e:	e5cb      	b.n	4044d8 <_svfprintf_r+0xef8>
  404940:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404942:	4e1d      	ldr	r6, [pc, #116]	; (4049b8 <_svfprintf_r+0x13d8>)
  404944:	2b00      	cmp	r3, #0
  404946:	bfb6      	itet	lt
  404948:	272d      	movlt	r7, #45	; 0x2d
  40494a:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40494e:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  404952:	4b1a      	ldr	r3, [pc, #104]	; (4049bc <_svfprintf_r+0x13dc>)
  404954:	f7ff ba2f 	b.w	403db6 <_svfprintf_r+0x7d6>
  404958:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40495a:	9808      	ldr	r0, [sp, #32]
  40495c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40495e:	4639      	mov	r1, r7
  404960:	f003 f830 	bl	4079c4 <__aeabi_dcmpeq>
  404964:	2800      	cmp	r0, #0
  404966:	f47f ae7f 	bne.w	404668 <_svfprintf_r+0x1088>
  40496a:	f1c5 0501 	rsb	r5, r5, #1
  40496e:	951f      	str	r5, [sp, #124]	; 0x7c
  404970:	442c      	add	r4, r5
  404972:	e59e      	b.n	4044b2 <_svfprintf_r+0xed2>
  404974:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404976:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404978:	4413      	add	r3, r2
  40497a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40497c:	441a      	add	r2, r3
  40497e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404982:	920e      	str	r2, [sp, #56]	; 0x38
  404984:	9308      	str	r3, [sp, #32]
  404986:	e5c7      	b.n	404518 <_svfprintf_r+0xf38>
  404988:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40498a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40498c:	f1c3 0301 	rsb	r3, r3, #1
  404990:	441a      	add	r2, r3
  404992:	4613      	mov	r3, r2
  404994:	e7d0      	b.n	404938 <_svfprintf_r+0x1358>
  404996:	f01b 0301 	ands.w	r3, fp, #1
  40499a:	9312      	str	r3, [sp, #72]	; 0x48
  40499c:	f47f aee2 	bne.w	404764 <_svfprintf_r+0x1184>
  4049a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4049a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4049a6:	9308      	str	r3, [sp, #32]
  4049a8:	e5b6      	b.n	404518 <_svfprintf_r+0xf38>
  4049aa:	bf00      	nop
  4049ac:	66666667 	.word	0x66666667
  4049b0:	00408598 	.word	0x00408598
  4049b4:	004085b4 	.word	0x004085b4
  4049b8:	0040856c 	.word	0x0040856c
  4049bc:	00408568 	.word	0x00408568
  4049c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4049c2:	b913      	cbnz	r3, 4049ca <_svfprintf_r+0x13ea>
  4049c4:	f01b 0f01 	tst.w	fp, #1
  4049c8:	d002      	beq.n	4049d0 <_svfprintf_r+0x13f0>
  4049ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4049cc:	3301      	adds	r3, #1
  4049ce:	e7d4      	b.n	40497a <_svfprintf_r+0x139a>
  4049d0:	2301      	movs	r3, #1
  4049d2:	e73a      	b.n	40484a <_svfprintf_r+0x126a>
  4049d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4049d6:	f89a 3001 	ldrb.w	r3, [sl, #1]
  4049da:	6828      	ldr	r0, [r5, #0]
  4049dc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  4049e0:	900a      	str	r0, [sp, #40]	; 0x28
  4049e2:	4628      	mov	r0, r5
  4049e4:	3004      	adds	r0, #4
  4049e6:	46a2      	mov	sl, r4
  4049e8:	900f      	str	r0, [sp, #60]	; 0x3c
  4049ea:	f7fe be51 	b.w	403690 <_svfprintf_r+0xb0>
  4049ee:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049f2:	f7ff b867 	b.w	403ac4 <_svfprintf_r+0x4e4>
  4049f6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049fa:	f7ff ba15 	b.w	403e28 <_svfprintf_r+0x848>
  4049fe:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  404a02:	e6a6      	b.n	404752 <_svfprintf_r+0x1172>
  404a04:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404a08:	f7ff b8eb 	b.w	403be2 <_svfprintf_r+0x602>
  404a0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404a0e:	230c      	movs	r3, #12
  404a10:	6013      	str	r3, [r2, #0]
  404a12:	f04f 33ff 	mov.w	r3, #4294967295
  404a16:	9309      	str	r3, [sp, #36]	; 0x24
  404a18:	f7fe bebd 	b.w	403796 <_svfprintf_r+0x1b6>
  404a1c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404a20:	f7ff b99a 	b.w	403d58 <_svfprintf_r+0x778>
  404a24:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404a28:	f7ff b976 	b.w	403d18 <_svfprintf_r+0x738>
  404a2c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404a30:	f7ff b959 	b.w	403ce6 <_svfprintf_r+0x706>
  404a34:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404a38:	f7ff b912 	b.w	403c60 <_svfprintf_r+0x680>

00404a3c <register_fini>:
  404a3c:	4b02      	ldr	r3, [pc, #8]	; (404a48 <register_fini+0xc>)
  404a3e:	b113      	cbz	r3, 404a46 <register_fini+0xa>
  404a40:	4802      	ldr	r0, [pc, #8]	; (404a4c <register_fini+0x10>)
  404a42:	f000 b805 	b.w	404a50 <atexit>
  404a46:	4770      	bx	lr
  404a48:	00000000 	.word	0x00000000
  404a4c:	004059dd 	.word	0x004059dd

00404a50 <atexit>:
  404a50:	2300      	movs	r3, #0
  404a52:	4601      	mov	r1, r0
  404a54:	461a      	mov	r2, r3
  404a56:	4618      	mov	r0, r3
  404a58:	f001 bf9e 	b.w	406998 <__register_exitproc>

00404a5c <quorem>:
  404a5c:	6902      	ldr	r2, [r0, #16]
  404a5e:	690b      	ldr	r3, [r1, #16]
  404a60:	4293      	cmp	r3, r2
  404a62:	f300 808d 	bgt.w	404b80 <quorem+0x124>
  404a66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a6a:	f103 38ff 	add.w	r8, r3, #4294967295
  404a6e:	f101 0714 	add.w	r7, r1, #20
  404a72:	f100 0b14 	add.w	fp, r0, #20
  404a76:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  404a7a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  404a7e:	ea4f 0488 	mov.w	r4, r8, lsl #2
  404a82:	b083      	sub	sp, #12
  404a84:	3201      	adds	r2, #1
  404a86:	fbb3 f9f2 	udiv	r9, r3, r2
  404a8a:	eb0b 0304 	add.w	r3, fp, r4
  404a8e:	9400      	str	r4, [sp, #0]
  404a90:	eb07 0a04 	add.w	sl, r7, r4
  404a94:	9301      	str	r3, [sp, #4]
  404a96:	f1b9 0f00 	cmp.w	r9, #0
  404a9a:	d039      	beq.n	404b10 <quorem+0xb4>
  404a9c:	2500      	movs	r5, #0
  404a9e:	462e      	mov	r6, r5
  404aa0:	46bc      	mov	ip, r7
  404aa2:	46de      	mov	lr, fp
  404aa4:	f85c 4b04 	ldr.w	r4, [ip], #4
  404aa8:	f8de 3000 	ldr.w	r3, [lr]
  404aac:	b2a2      	uxth	r2, r4
  404aae:	fb09 5502 	mla	r5, r9, r2, r5
  404ab2:	0c22      	lsrs	r2, r4, #16
  404ab4:	0c2c      	lsrs	r4, r5, #16
  404ab6:	fb09 4202 	mla	r2, r9, r2, r4
  404aba:	b2ad      	uxth	r5, r5
  404abc:	1b75      	subs	r5, r6, r5
  404abe:	b296      	uxth	r6, r2
  404ac0:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  404ac4:	fa15 f383 	uxtah	r3, r5, r3
  404ac8:	eb06 4623 	add.w	r6, r6, r3, asr #16
  404acc:	b29b      	uxth	r3, r3
  404ace:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  404ad2:	45e2      	cmp	sl, ip
  404ad4:	ea4f 4512 	mov.w	r5, r2, lsr #16
  404ad8:	f84e 3b04 	str.w	r3, [lr], #4
  404adc:	ea4f 4626 	mov.w	r6, r6, asr #16
  404ae0:	d2e0      	bcs.n	404aa4 <quorem+0x48>
  404ae2:	9b00      	ldr	r3, [sp, #0]
  404ae4:	f85b 3003 	ldr.w	r3, [fp, r3]
  404ae8:	b993      	cbnz	r3, 404b10 <quorem+0xb4>
  404aea:	9c01      	ldr	r4, [sp, #4]
  404aec:	1f23      	subs	r3, r4, #4
  404aee:	459b      	cmp	fp, r3
  404af0:	d20c      	bcs.n	404b0c <quorem+0xb0>
  404af2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  404af6:	b94b      	cbnz	r3, 404b0c <quorem+0xb0>
  404af8:	f1a4 0308 	sub.w	r3, r4, #8
  404afc:	e002      	b.n	404b04 <quorem+0xa8>
  404afe:	681a      	ldr	r2, [r3, #0]
  404b00:	3b04      	subs	r3, #4
  404b02:	b91a      	cbnz	r2, 404b0c <quorem+0xb0>
  404b04:	459b      	cmp	fp, r3
  404b06:	f108 38ff 	add.w	r8, r8, #4294967295
  404b0a:	d3f8      	bcc.n	404afe <quorem+0xa2>
  404b0c:	f8c0 8010 	str.w	r8, [r0, #16]
  404b10:	4604      	mov	r4, r0
  404b12:	f001 fd39 	bl	406588 <__mcmp>
  404b16:	2800      	cmp	r0, #0
  404b18:	db2e      	blt.n	404b78 <quorem+0x11c>
  404b1a:	f109 0901 	add.w	r9, r9, #1
  404b1e:	465d      	mov	r5, fp
  404b20:	2300      	movs	r3, #0
  404b22:	f857 1b04 	ldr.w	r1, [r7], #4
  404b26:	6828      	ldr	r0, [r5, #0]
  404b28:	b28a      	uxth	r2, r1
  404b2a:	1a9a      	subs	r2, r3, r2
  404b2c:	0c0b      	lsrs	r3, r1, #16
  404b2e:	fa12 f280 	uxtah	r2, r2, r0
  404b32:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  404b36:	eb03 4322 	add.w	r3, r3, r2, asr #16
  404b3a:	b292      	uxth	r2, r2
  404b3c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  404b40:	45ba      	cmp	sl, r7
  404b42:	f845 2b04 	str.w	r2, [r5], #4
  404b46:	ea4f 4323 	mov.w	r3, r3, asr #16
  404b4a:	d2ea      	bcs.n	404b22 <quorem+0xc6>
  404b4c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  404b50:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  404b54:	b982      	cbnz	r2, 404b78 <quorem+0x11c>
  404b56:	1f1a      	subs	r2, r3, #4
  404b58:	4593      	cmp	fp, r2
  404b5a:	d20b      	bcs.n	404b74 <quorem+0x118>
  404b5c:	f853 2c04 	ldr.w	r2, [r3, #-4]
  404b60:	b942      	cbnz	r2, 404b74 <quorem+0x118>
  404b62:	3b08      	subs	r3, #8
  404b64:	e002      	b.n	404b6c <quorem+0x110>
  404b66:	681a      	ldr	r2, [r3, #0]
  404b68:	3b04      	subs	r3, #4
  404b6a:	b91a      	cbnz	r2, 404b74 <quorem+0x118>
  404b6c:	459b      	cmp	fp, r3
  404b6e:	f108 38ff 	add.w	r8, r8, #4294967295
  404b72:	d3f8      	bcc.n	404b66 <quorem+0x10a>
  404b74:	f8c4 8010 	str.w	r8, [r4, #16]
  404b78:	4648      	mov	r0, r9
  404b7a:	b003      	add	sp, #12
  404b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b80:	2000      	movs	r0, #0
  404b82:	4770      	bx	lr
  404b84:	0000      	movs	r0, r0
	...

00404b88 <_dtoa_r>:
  404b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b8c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  404b8e:	b09b      	sub	sp, #108	; 0x6c
  404b90:	4604      	mov	r4, r0
  404b92:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  404b94:	4692      	mov	sl, r2
  404b96:	469b      	mov	fp, r3
  404b98:	b141      	cbz	r1, 404bac <_dtoa_r+0x24>
  404b9a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  404b9c:	604a      	str	r2, [r1, #4]
  404b9e:	2301      	movs	r3, #1
  404ba0:	4093      	lsls	r3, r2
  404ba2:	608b      	str	r3, [r1, #8]
  404ba4:	f001 fb18 	bl	4061d8 <_Bfree>
  404ba8:	2300      	movs	r3, #0
  404baa:	6423      	str	r3, [r4, #64]	; 0x40
  404bac:	f1bb 0f00 	cmp.w	fp, #0
  404bb0:	465d      	mov	r5, fp
  404bb2:	db35      	blt.n	404c20 <_dtoa_r+0x98>
  404bb4:	2300      	movs	r3, #0
  404bb6:	6033      	str	r3, [r6, #0]
  404bb8:	4b9d      	ldr	r3, [pc, #628]	; (404e30 <_dtoa_r+0x2a8>)
  404bba:	43ab      	bics	r3, r5
  404bbc:	d015      	beq.n	404bea <_dtoa_r+0x62>
  404bbe:	4650      	mov	r0, sl
  404bc0:	4659      	mov	r1, fp
  404bc2:	2200      	movs	r2, #0
  404bc4:	2300      	movs	r3, #0
  404bc6:	f002 fefd 	bl	4079c4 <__aeabi_dcmpeq>
  404bca:	4680      	mov	r8, r0
  404bcc:	2800      	cmp	r0, #0
  404bce:	d02d      	beq.n	404c2c <_dtoa_r+0xa4>
  404bd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404bd2:	2301      	movs	r3, #1
  404bd4:	6013      	str	r3, [r2, #0]
  404bd6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404bd8:	2b00      	cmp	r3, #0
  404bda:	f000 80bd 	beq.w	404d58 <_dtoa_r+0x1d0>
  404bde:	4895      	ldr	r0, [pc, #596]	; (404e34 <_dtoa_r+0x2ac>)
  404be0:	6018      	str	r0, [r3, #0]
  404be2:	3801      	subs	r0, #1
  404be4:	b01b      	add	sp, #108	; 0x6c
  404be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404bea:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404bec:	f242 730f 	movw	r3, #9999	; 0x270f
  404bf0:	6013      	str	r3, [r2, #0]
  404bf2:	f1ba 0f00 	cmp.w	sl, #0
  404bf6:	d10d      	bne.n	404c14 <_dtoa_r+0x8c>
  404bf8:	f3c5 0513 	ubfx	r5, r5, #0, #20
  404bfc:	b955      	cbnz	r5, 404c14 <_dtoa_r+0x8c>
  404bfe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404c00:	488d      	ldr	r0, [pc, #564]	; (404e38 <_dtoa_r+0x2b0>)
  404c02:	2b00      	cmp	r3, #0
  404c04:	d0ee      	beq.n	404be4 <_dtoa_r+0x5c>
  404c06:	f100 0308 	add.w	r3, r0, #8
  404c0a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  404c0c:	6013      	str	r3, [r2, #0]
  404c0e:	b01b      	add	sp, #108	; 0x6c
  404c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404c16:	4889      	ldr	r0, [pc, #548]	; (404e3c <_dtoa_r+0x2b4>)
  404c18:	2b00      	cmp	r3, #0
  404c1a:	d0e3      	beq.n	404be4 <_dtoa_r+0x5c>
  404c1c:	1cc3      	adds	r3, r0, #3
  404c1e:	e7f4      	b.n	404c0a <_dtoa_r+0x82>
  404c20:	2301      	movs	r3, #1
  404c22:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  404c26:	6033      	str	r3, [r6, #0]
  404c28:	46ab      	mov	fp, r5
  404c2a:	e7c5      	b.n	404bb8 <_dtoa_r+0x30>
  404c2c:	aa18      	add	r2, sp, #96	; 0x60
  404c2e:	ab19      	add	r3, sp, #100	; 0x64
  404c30:	9201      	str	r2, [sp, #4]
  404c32:	9300      	str	r3, [sp, #0]
  404c34:	4652      	mov	r2, sl
  404c36:	465b      	mov	r3, fp
  404c38:	4620      	mov	r0, r4
  404c3a:	f001 fd45 	bl	4066c8 <__d2b>
  404c3e:	0d2b      	lsrs	r3, r5, #20
  404c40:	4681      	mov	r9, r0
  404c42:	d071      	beq.n	404d28 <_dtoa_r+0x1a0>
  404c44:	f3cb 0213 	ubfx	r2, fp, #0, #20
  404c48:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  404c4c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  404c4e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  404c52:	4650      	mov	r0, sl
  404c54:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  404c58:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404c5c:	2200      	movs	r2, #0
  404c5e:	4b78      	ldr	r3, [pc, #480]	; (404e40 <_dtoa_r+0x2b8>)
  404c60:	f002 fa94 	bl	40718c <__aeabi_dsub>
  404c64:	a36c      	add	r3, pc, #432	; (adr r3, 404e18 <_dtoa_r+0x290>)
  404c66:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c6a:	f002 fc43 	bl	4074f4 <__aeabi_dmul>
  404c6e:	a36c      	add	r3, pc, #432	; (adr r3, 404e20 <_dtoa_r+0x298>)
  404c70:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c74:	f002 fa8c 	bl	407190 <__adddf3>
  404c78:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404c7c:	4630      	mov	r0, r6
  404c7e:	f002 fbd3 	bl	407428 <__aeabi_i2d>
  404c82:	a369      	add	r3, pc, #420	; (adr r3, 404e28 <_dtoa_r+0x2a0>)
  404c84:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c88:	f002 fc34 	bl	4074f4 <__aeabi_dmul>
  404c8c:	4602      	mov	r2, r0
  404c8e:	460b      	mov	r3, r1
  404c90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404c94:	f002 fa7c 	bl	407190 <__adddf3>
  404c98:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404c9c:	f002 feda 	bl	407a54 <__aeabi_d2iz>
  404ca0:	2200      	movs	r2, #0
  404ca2:	9002      	str	r0, [sp, #8]
  404ca4:	2300      	movs	r3, #0
  404ca6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404caa:	f002 fe95 	bl	4079d8 <__aeabi_dcmplt>
  404cae:	2800      	cmp	r0, #0
  404cb0:	f040 8173 	bne.w	404f9a <_dtoa_r+0x412>
  404cb4:	9d02      	ldr	r5, [sp, #8]
  404cb6:	2d16      	cmp	r5, #22
  404cb8:	f200 815d 	bhi.w	404f76 <_dtoa_r+0x3ee>
  404cbc:	4b61      	ldr	r3, [pc, #388]	; (404e44 <_dtoa_r+0x2bc>)
  404cbe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  404cc2:	e9d3 0100 	ldrd	r0, r1, [r3]
  404cc6:	4652      	mov	r2, sl
  404cc8:	465b      	mov	r3, fp
  404cca:	f002 fea3 	bl	407a14 <__aeabi_dcmpgt>
  404cce:	2800      	cmp	r0, #0
  404cd0:	f000 81c5 	beq.w	40505e <_dtoa_r+0x4d6>
  404cd4:	1e6b      	subs	r3, r5, #1
  404cd6:	9302      	str	r3, [sp, #8]
  404cd8:	2300      	movs	r3, #0
  404cda:	930e      	str	r3, [sp, #56]	; 0x38
  404cdc:	1bbf      	subs	r7, r7, r6
  404cde:	1e7b      	subs	r3, r7, #1
  404ce0:	9306      	str	r3, [sp, #24]
  404ce2:	f100 8154 	bmi.w	404f8e <_dtoa_r+0x406>
  404ce6:	2300      	movs	r3, #0
  404ce8:	9308      	str	r3, [sp, #32]
  404cea:	9b02      	ldr	r3, [sp, #8]
  404cec:	2b00      	cmp	r3, #0
  404cee:	f2c0 8145 	blt.w	404f7c <_dtoa_r+0x3f4>
  404cf2:	9a06      	ldr	r2, [sp, #24]
  404cf4:	930d      	str	r3, [sp, #52]	; 0x34
  404cf6:	4611      	mov	r1, r2
  404cf8:	4419      	add	r1, r3
  404cfa:	2300      	movs	r3, #0
  404cfc:	9106      	str	r1, [sp, #24]
  404cfe:	930c      	str	r3, [sp, #48]	; 0x30
  404d00:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d02:	2b09      	cmp	r3, #9
  404d04:	d82a      	bhi.n	404d5c <_dtoa_r+0x1d4>
  404d06:	2b05      	cmp	r3, #5
  404d08:	f340 865b 	ble.w	4059c2 <_dtoa_r+0xe3a>
  404d0c:	3b04      	subs	r3, #4
  404d0e:	9324      	str	r3, [sp, #144]	; 0x90
  404d10:	2500      	movs	r5, #0
  404d12:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d14:	3b02      	subs	r3, #2
  404d16:	2b03      	cmp	r3, #3
  404d18:	f200 8642 	bhi.w	4059a0 <_dtoa_r+0xe18>
  404d1c:	e8df f013 	tbh	[pc, r3, lsl #1]
  404d20:	02c903d4 	.word	0x02c903d4
  404d24:	046103df 	.word	0x046103df
  404d28:	9f18      	ldr	r7, [sp, #96]	; 0x60
  404d2a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  404d2c:	443e      	add	r6, r7
  404d2e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  404d32:	2b20      	cmp	r3, #32
  404d34:	f340 818e 	ble.w	405054 <_dtoa_r+0x4cc>
  404d38:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  404d3c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  404d40:	409d      	lsls	r5, r3
  404d42:	fa2a f000 	lsr.w	r0, sl, r0
  404d46:	4328      	orrs	r0, r5
  404d48:	f002 fb5e 	bl	407408 <__aeabi_ui2d>
  404d4c:	2301      	movs	r3, #1
  404d4e:	3e01      	subs	r6, #1
  404d50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  404d54:	9314      	str	r3, [sp, #80]	; 0x50
  404d56:	e781      	b.n	404c5c <_dtoa_r+0xd4>
  404d58:	483b      	ldr	r0, [pc, #236]	; (404e48 <_dtoa_r+0x2c0>)
  404d5a:	e743      	b.n	404be4 <_dtoa_r+0x5c>
  404d5c:	2100      	movs	r1, #0
  404d5e:	6461      	str	r1, [r4, #68]	; 0x44
  404d60:	4620      	mov	r0, r4
  404d62:	9125      	str	r1, [sp, #148]	; 0x94
  404d64:	f001 fa12 	bl	40618c <_Balloc>
  404d68:	f04f 33ff 	mov.w	r3, #4294967295
  404d6c:	930a      	str	r3, [sp, #40]	; 0x28
  404d6e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404d70:	930f      	str	r3, [sp, #60]	; 0x3c
  404d72:	2301      	movs	r3, #1
  404d74:	9004      	str	r0, [sp, #16]
  404d76:	6420      	str	r0, [r4, #64]	; 0x40
  404d78:	9224      	str	r2, [sp, #144]	; 0x90
  404d7a:	930b      	str	r3, [sp, #44]	; 0x2c
  404d7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404d7e:	2b00      	cmp	r3, #0
  404d80:	f2c0 80d9 	blt.w	404f36 <_dtoa_r+0x3ae>
  404d84:	9a02      	ldr	r2, [sp, #8]
  404d86:	2a0e      	cmp	r2, #14
  404d88:	f300 80d5 	bgt.w	404f36 <_dtoa_r+0x3ae>
  404d8c:	4b2d      	ldr	r3, [pc, #180]	; (404e44 <_dtoa_r+0x2bc>)
  404d8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404d92:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d96:	e9cd 2308 	strd	r2, r3, [sp, #32]
  404d9a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404d9c:	2b00      	cmp	r3, #0
  404d9e:	f2c0 83ba 	blt.w	405516 <_dtoa_r+0x98e>
  404da2:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  404da6:	4650      	mov	r0, sl
  404da8:	462a      	mov	r2, r5
  404daa:	4633      	mov	r3, r6
  404dac:	4659      	mov	r1, fp
  404dae:	f002 fccb 	bl	407748 <__aeabi_ddiv>
  404db2:	f002 fe4f 	bl	407a54 <__aeabi_d2iz>
  404db6:	4680      	mov	r8, r0
  404db8:	f002 fb36 	bl	407428 <__aeabi_i2d>
  404dbc:	462a      	mov	r2, r5
  404dbe:	4633      	mov	r3, r6
  404dc0:	f002 fb98 	bl	4074f4 <__aeabi_dmul>
  404dc4:	460b      	mov	r3, r1
  404dc6:	4602      	mov	r2, r0
  404dc8:	4659      	mov	r1, fp
  404dca:	4650      	mov	r0, sl
  404dcc:	f002 f9de 	bl	40718c <__aeabi_dsub>
  404dd0:	9d04      	ldr	r5, [sp, #16]
  404dd2:	f108 0330 	add.w	r3, r8, #48	; 0x30
  404dd6:	702b      	strb	r3, [r5, #0]
  404dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404dda:	2b01      	cmp	r3, #1
  404ddc:	4606      	mov	r6, r0
  404dde:	460f      	mov	r7, r1
  404de0:	f105 0501 	add.w	r5, r5, #1
  404de4:	d068      	beq.n	404eb8 <_dtoa_r+0x330>
  404de6:	2200      	movs	r2, #0
  404de8:	4b18      	ldr	r3, [pc, #96]	; (404e4c <_dtoa_r+0x2c4>)
  404dea:	f002 fb83 	bl	4074f4 <__aeabi_dmul>
  404dee:	2200      	movs	r2, #0
  404df0:	2300      	movs	r3, #0
  404df2:	4606      	mov	r6, r0
  404df4:	460f      	mov	r7, r1
  404df6:	f002 fde5 	bl	4079c4 <__aeabi_dcmpeq>
  404dfa:	2800      	cmp	r0, #0
  404dfc:	f040 8088 	bne.w	404f10 <_dtoa_r+0x388>
  404e00:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  404e04:	f04f 0a00 	mov.w	sl, #0
  404e08:	f8df b040 	ldr.w	fp, [pc, #64]	; 404e4c <_dtoa_r+0x2c4>
  404e0c:	940c      	str	r4, [sp, #48]	; 0x30
  404e0e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  404e12:	e028      	b.n	404e66 <_dtoa_r+0x2de>
  404e14:	f3af 8000 	nop.w
  404e18:	636f4361 	.word	0x636f4361
  404e1c:	3fd287a7 	.word	0x3fd287a7
  404e20:	8b60c8b3 	.word	0x8b60c8b3
  404e24:	3fc68a28 	.word	0x3fc68a28
  404e28:	509f79fb 	.word	0x509f79fb
  404e2c:	3fd34413 	.word	0x3fd34413
  404e30:	7ff00000 	.word	0x7ff00000
  404e34:	004085a1 	.word	0x004085a1
  404e38:	004085c4 	.word	0x004085c4
  404e3c:	004085d0 	.word	0x004085d0
  404e40:	3ff80000 	.word	0x3ff80000
  404e44:	00408600 	.word	0x00408600
  404e48:	004085a0 	.word	0x004085a0
  404e4c:	40240000 	.word	0x40240000
  404e50:	f002 fb50 	bl	4074f4 <__aeabi_dmul>
  404e54:	2200      	movs	r2, #0
  404e56:	2300      	movs	r3, #0
  404e58:	4606      	mov	r6, r0
  404e5a:	460f      	mov	r7, r1
  404e5c:	f002 fdb2 	bl	4079c4 <__aeabi_dcmpeq>
  404e60:	2800      	cmp	r0, #0
  404e62:	f040 83c1 	bne.w	4055e8 <_dtoa_r+0xa60>
  404e66:	4642      	mov	r2, r8
  404e68:	464b      	mov	r3, r9
  404e6a:	4630      	mov	r0, r6
  404e6c:	4639      	mov	r1, r7
  404e6e:	f002 fc6b 	bl	407748 <__aeabi_ddiv>
  404e72:	f002 fdef 	bl	407a54 <__aeabi_d2iz>
  404e76:	4604      	mov	r4, r0
  404e78:	f002 fad6 	bl	407428 <__aeabi_i2d>
  404e7c:	4642      	mov	r2, r8
  404e7e:	464b      	mov	r3, r9
  404e80:	f002 fb38 	bl	4074f4 <__aeabi_dmul>
  404e84:	4602      	mov	r2, r0
  404e86:	460b      	mov	r3, r1
  404e88:	4630      	mov	r0, r6
  404e8a:	4639      	mov	r1, r7
  404e8c:	f002 f97e 	bl	40718c <__aeabi_dsub>
  404e90:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  404e94:	9e04      	ldr	r6, [sp, #16]
  404e96:	f805 eb01 	strb.w	lr, [r5], #1
  404e9a:	eba5 0e06 	sub.w	lr, r5, r6
  404e9e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  404ea0:	45b6      	cmp	lr, r6
  404ea2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404ea6:	4652      	mov	r2, sl
  404ea8:	465b      	mov	r3, fp
  404eaa:	d1d1      	bne.n	404e50 <_dtoa_r+0x2c8>
  404eac:	46a0      	mov	r8, r4
  404eae:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  404eb2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404eb4:	4606      	mov	r6, r0
  404eb6:	460f      	mov	r7, r1
  404eb8:	4632      	mov	r2, r6
  404eba:	463b      	mov	r3, r7
  404ebc:	4630      	mov	r0, r6
  404ebe:	4639      	mov	r1, r7
  404ec0:	f002 f966 	bl	407190 <__adddf3>
  404ec4:	4606      	mov	r6, r0
  404ec6:	460f      	mov	r7, r1
  404ec8:	4602      	mov	r2, r0
  404eca:	460b      	mov	r3, r1
  404ecc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404ed0:	f002 fd82 	bl	4079d8 <__aeabi_dcmplt>
  404ed4:	b948      	cbnz	r0, 404eea <_dtoa_r+0x362>
  404ed6:	4632      	mov	r2, r6
  404ed8:	463b      	mov	r3, r7
  404eda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404ede:	f002 fd71 	bl	4079c4 <__aeabi_dcmpeq>
  404ee2:	b1a8      	cbz	r0, 404f10 <_dtoa_r+0x388>
  404ee4:	f018 0f01 	tst.w	r8, #1
  404ee8:	d012      	beq.n	404f10 <_dtoa_r+0x388>
  404eea:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404eee:	9a04      	ldr	r2, [sp, #16]
  404ef0:	1e6b      	subs	r3, r5, #1
  404ef2:	e004      	b.n	404efe <_dtoa_r+0x376>
  404ef4:	429a      	cmp	r2, r3
  404ef6:	f000 8401 	beq.w	4056fc <_dtoa_r+0xb74>
  404efa:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  404efe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  404f02:	f103 0501 	add.w	r5, r3, #1
  404f06:	d0f5      	beq.n	404ef4 <_dtoa_r+0x36c>
  404f08:	f108 0801 	add.w	r8, r8, #1
  404f0c:	f883 8000 	strb.w	r8, [r3]
  404f10:	4649      	mov	r1, r9
  404f12:	4620      	mov	r0, r4
  404f14:	f001 f960 	bl	4061d8 <_Bfree>
  404f18:	2200      	movs	r2, #0
  404f1a:	9b02      	ldr	r3, [sp, #8]
  404f1c:	702a      	strb	r2, [r5, #0]
  404f1e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404f20:	3301      	adds	r3, #1
  404f22:	6013      	str	r3, [r2, #0]
  404f24:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404f26:	2b00      	cmp	r3, #0
  404f28:	f000 839e 	beq.w	405668 <_dtoa_r+0xae0>
  404f2c:	9804      	ldr	r0, [sp, #16]
  404f2e:	601d      	str	r5, [r3, #0]
  404f30:	b01b      	add	sp, #108	; 0x6c
  404f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404f38:	2a00      	cmp	r2, #0
  404f3a:	d03e      	beq.n	404fba <_dtoa_r+0x432>
  404f3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404f3e:	2a01      	cmp	r2, #1
  404f40:	f340 8311 	ble.w	405566 <_dtoa_r+0x9de>
  404f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404f48:	1e5f      	subs	r7, r3, #1
  404f4a:	42ba      	cmp	r2, r7
  404f4c:	f2c0 838f 	blt.w	40566e <_dtoa_r+0xae6>
  404f50:	1bd7      	subs	r7, r2, r7
  404f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f54:	2b00      	cmp	r3, #0
  404f56:	f2c0 848b 	blt.w	405870 <_dtoa_r+0xce8>
  404f5a:	9d08      	ldr	r5, [sp, #32]
  404f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f5e:	9a08      	ldr	r2, [sp, #32]
  404f60:	441a      	add	r2, r3
  404f62:	9208      	str	r2, [sp, #32]
  404f64:	9a06      	ldr	r2, [sp, #24]
  404f66:	2101      	movs	r1, #1
  404f68:	441a      	add	r2, r3
  404f6a:	4620      	mov	r0, r4
  404f6c:	9206      	str	r2, [sp, #24]
  404f6e:	f001 f9cd 	bl	40630c <__i2b>
  404f72:	4606      	mov	r6, r0
  404f74:	e024      	b.n	404fc0 <_dtoa_r+0x438>
  404f76:	2301      	movs	r3, #1
  404f78:	930e      	str	r3, [sp, #56]	; 0x38
  404f7a:	e6af      	b.n	404cdc <_dtoa_r+0x154>
  404f7c:	9a08      	ldr	r2, [sp, #32]
  404f7e:	9b02      	ldr	r3, [sp, #8]
  404f80:	1ad2      	subs	r2, r2, r3
  404f82:	425b      	negs	r3, r3
  404f84:	930c      	str	r3, [sp, #48]	; 0x30
  404f86:	2300      	movs	r3, #0
  404f88:	9208      	str	r2, [sp, #32]
  404f8a:	930d      	str	r3, [sp, #52]	; 0x34
  404f8c:	e6b8      	b.n	404d00 <_dtoa_r+0x178>
  404f8e:	f1c7 0301 	rsb	r3, r7, #1
  404f92:	9308      	str	r3, [sp, #32]
  404f94:	2300      	movs	r3, #0
  404f96:	9306      	str	r3, [sp, #24]
  404f98:	e6a7      	b.n	404cea <_dtoa_r+0x162>
  404f9a:	9d02      	ldr	r5, [sp, #8]
  404f9c:	4628      	mov	r0, r5
  404f9e:	f002 fa43 	bl	407428 <__aeabi_i2d>
  404fa2:	4602      	mov	r2, r0
  404fa4:	460b      	mov	r3, r1
  404fa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404faa:	f002 fd0b 	bl	4079c4 <__aeabi_dcmpeq>
  404fae:	2800      	cmp	r0, #0
  404fb0:	f47f ae80 	bne.w	404cb4 <_dtoa_r+0x12c>
  404fb4:	1e6b      	subs	r3, r5, #1
  404fb6:	9302      	str	r3, [sp, #8]
  404fb8:	e67c      	b.n	404cb4 <_dtoa_r+0x12c>
  404fba:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404fbc:	9d08      	ldr	r5, [sp, #32]
  404fbe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  404fc0:	2d00      	cmp	r5, #0
  404fc2:	dd0c      	ble.n	404fde <_dtoa_r+0x456>
  404fc4:	9906      	ldr	r1, [sp, #24]
  404fc6:	2900      	cmp	r1, #0
  404fc8:	460b      	mov	r3, r1
  404fca:	dd08      	ble.n	404fde <_dtoa_r+0x456>
  404fcc:	42a9      	cmp	r1, r5
  404fce:	9a08      	ldr	r2, [sp, #32]
  404fd0:	bfa8      	it	ge
  404fd2:	462b      	movge	r3, r5
  404fd4:	1ad2      	subs	r2, r2, r3
  404fd6:	1aed      	subs	r5, r5, r3
  404fd8:	1acb      	subs	r3, r1, r3
  404fda:	9208      	str	r2, [sp, #32]
  404fdc:	9306      	str	r3, [sp, #24]
  404fde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404fe0:	b1d3      	cbz	r3, 405018 <_dtoa_r+0x490>
  404fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404fe4:	2b00      	cmp	r3, #0
  404fe6:	f000 82b7 	beq.w	405558 <_dtoa_r+0x9d0>
  404fea:	2f00      	cmp	r7, #0
  404fec:	dd10      	ble.n	405010 <_dtoa_r+0x488>
  404fee:	4631      	mov	r1, r6
  404ff0:	463a      	mov	r2, r7
  404ff2:	4620      	mov	r0, r4
  404ff4:	f001 fa26 	bl	406444 <__pow5mult>
  404ff8:	464a      	mov	r2, r9
  404ffa:	4601      	mov	r1, r0
  404ffc:	4606      	mov	r6, r0
  404ffe:	4620      	mov	r0, r4
  405000:	f001 f98e 	bl	406320 <__multiply>
  405004:	4649      	mov	r1, r9
  405006:	4680      	mov	r8, r0
  405008:	4620      	mov	r0, r4
  40500a:	f001 f8e5 	bl	4061d8 <_Bfree>
  40500e:	46c1      	mov	r9, r8
  405010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405012:	1bda      	subs	r2, r3, r7
  405014:	f040 82a1 	bne.w	40555a <_dtoa_r+0x9d2>
  405018:	2101      	movs	r1, #1
  40501a:	4620      	mov	r0, r4
  40501c:	f001 f976 	bl	40630c <__i2b>
  405020:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405022:	2b00      	cmp	r3, #0
  405024:	4680      	mov	r8, r0
  405026:	dd1c      	ble.n	405062 <_dtoa_r+0x4da>
  405028:	4601      	mov	r1, r0
  40502a:	461a      	mov	r2, r3
  40502c:	4620      	mov	r0, r4
  40502e:	f001 fa09 	bl	406444 <__pow5mult>
  405032:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405034:	2b01      	cmp	r3, #1
  405036:	4680      	mov	r8, r0
  405038:	f340 8254 	ble.w	4054e4 <_dtoa_r+0x95c>
  40503c:	2300      	movs	r3, #0
  40503e:	930c      	str	r3, [sp, #48]	; 0x30
  405040:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405044:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405048:	6918      	ldr	r0, [r3, #16]
  40504a:	f001 f90f 	bl	40626c <__hi0bits>
  40504e:	f1c0 0020 	rsb	r0, r0, #32
  405052:	e010      	b.n	405076 <_dtoa_r+0x4ee>
  405054:	f1c3 0520 	rsb	r5, r3, #32
  405058:	fa0a f005 	lsl.w	r0, sl, r5
  40505c:	e674      	b.n	404d48 <_dtoa_r+0x1c0>
  40505e:	900e      	str	r0, [sp, #56]	; 0x38
  405060:	e63c      	b.n	404cdc <_dtoa_r+0x154>
  405062:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405064:	2b01      	cmp	r3, #1
  405066:	f340 8287 	ble.w	405578 <_dtoa_r+0x9f0>
  40506a:	2300      	movs	r3, #0
  40506c:	930c      	str	r3, [sp, #48]	; 0x30
  40506e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405070:	2001      	movs	r0, #1
  405072:	2b00      	cmp	r3, #0
  405074:	d1e4      	bne.n	405040 <_dtoa_r+0x4b8>
  405076:	9a06      	ldr	r2, [sp, #24]
  405078:	4410      	add	r0, r2
  40507a:	f010 001f 	ands.w	r0, r0, #31
  40507e:	f000 80a1 	beq.w	4051c4 <_dtoa_r+0x63c>
  405082:	f1c0 0320 	rsb	r3, r0, #32
  405086:	2b04      	cmp	r3, #4
  405088:	f340 849e 	ble.w	4059c8 <_dtoa_r+0xe40>
  40508c:	9b08      	ldr	r3, [sp, #32]
  40508e:	f1c0 001c 	rsb	r0, r0, #28
  405092:	4403      	add	r3, r0
  405094:	9308      	str	r3, [sp, #32]
  405096:	4613      	mov	r3, r2
  405098:	4403      	add	r3, r0
  40509a:	4405      	add	r5, r0
  40509c:	9306      	str	r3, [sp, #24]
  40509e:	9b08      	ldr	r3, [sp, #32]
  4050a0:	2b00      	cmp	r3, #0
  4050a2:	dd05      	ble.n	4050b0 <_dtoa_r+0x528>
  4050a4:	4649      	mov	r1, r9
  4050a6:	461a      	mov	r2, r3
  4050a8:	4620      	mov	r0, r4
  4050aa:	f001 fa1b 	bl	4064e4 <__lshift>
  4050ae:	4681      	mov	r9, r0
  4050b0:	9b06      	ldr	r3, [sp, #24]
  4050b2:	2b00      	cmp	r3, #0
  4050b4:	dd05      	ble.n	4050c2 <_dtoa_r+0x53a>
  4050b6:	4641      	mov	r1, r8
  4050b8:	461a      	mov	r2, r3
  4050ba:	4620      	mov	r0, r4
  4050bc:	f001 fa12 	bl	4064e4 <__lshift>
  4050c0:	4680      	mov	r8, r0
  4050c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4050c4:	2b00      	cmp	r3, #0
  4050c6:	f040 8086 	bne.w	4051d6 <_dtoa_r+0x64e>
  4050ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4050cc:	2b00      	cmp	r3, #0
  4050ce:	f340 8266 	ble.w	40559e <_dtoa_r+0xa16>
  4050d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4050d4:	2b00      	cmp	r3, #0
  4050d6:	f000 8098 	beq.w	40520a <_dtoa_r+0x682>
  4050da:	2d00      	cmp	r5, #0
  4050dc:	dd05      	ble.n	4050ea <_dtoa_r+0x562>
  4050de:	4631      	mov	r1, r6
  4050e0:	462a      	mov	r2, r5
  4050e2:	4620      	mov	r0, r4
  4050e4:	f001 f9fe 	bl	4064e4 <__lshift>
  4050e8:	4606      	mov	r6, r0
  4050ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4050ec:	2b00      	cmp	r3, #0
  4050ee:	f040 8337 	bne.w	405760 <_dtoa_r+0xbd8>
  4050f2:	9606      	str	r6, [sp, #24]
  4050f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4050f6:	9a04      	ldr	r2, [sp, #16]
  4050f8:	f8dd b018 	ldr.w	fp, [sp, #24]
  4050fc:	3b01      	subs	r3, #1
  4050fe:	18d3      	adds	r3, r2, r3
  405100:	930b      	str	r3, [sp, #44]	; 0x2c
  405102:	f00a 0301 	and.w	r3, sl, #1
  405106:	930c      	str	r3, [sp, #48]	; 0x30
  405108:	4617      	mov	r7, r2
  40510a:	46c2      	mov	sl, r8
  40510c:	4651      	mov	r1, sl
  40510e:	4648      	mov	r0, r9
  405110:	f7ff fca4 	bl	404a5c <quorem>
  405114:	4631      	mov	r1, r6
  405116:	4605      	mov	r5, r0
  405118:	4648      	mov	r0, r9
  40511a:	f001 fa35 	bl	406588 <__mcmp>
  40511e:	465a      	mov	r2, fp
  405120:	900a      	str	r0, [sp, #40]	; 0x28
  405122:	4651      	mov	r1, sl
  405124:	4620      	mov	r0, r4
  405126:	f001 fa4b 	bl	4065c0 <__mdiff>
  40512a:	68c2      	ldr	r2, [r0, #12]
  40512c:	4680      	mov	r8, r0
  40512e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  405132:	2a00      	cmp	r2, #0
  405134:	f040 822b 	bne.w	40558e <_dtoa_r+0xa06>
  405138:	4601      	mov	r1, r0
  40513a:	4648      	mov	r0, r9
  40513c:	9308      	str	r3, [sp, #32]
  40513e:	f001 fa23 	bl	406588 <__mcmp>
  405142:	4641      	mov	r1, r8
  405144:	9006      	str	r0, [sp, #24]
  405146:	4620      	mov	r0, r4
  405148:	f001 f846 	bl	4061d8 <_Bfree>
  40514c:	9a06      	ldr	r2, [sp, #24]
  40514e:	9b08      	ldr	r3, [sp, #32]
  405150:	b932      	cbnz	r2, 405160 <_dtoa_r+0x5d8>
  405152:	9924      	ldr	r1, [sp, #144]	; 0x90
  405154:	b921      	cbnz	r1, 405160 <_dtoa_r+0x5d8>
  405156:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405158:	2a00      	cmp	r2, #0
  40515a:	f000 83ef 	beq.w	40593c <_dtoa_r+0xdb4>
  40515e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405160:	990a      	ldr	r1, [sp, #40]	; 0x28
  405162:	2900      	cmp	r1, #0
  405164:	f2c0 829f 	blt.w	4056a6 <_dtoa_r+0xb1e>
  405168:	d105      	bne.n	405176 <_dtoa_r+0x5ee>
  40516a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40516c:	b919      	cbnz	r1, 405176 <_dtoa_r+0x5ee>
  40516e:	990c      	ldr	r1, [sp, #48]	; 0x30
  405170:	2900      	cmp	r1, #0
  405172:	f000 8298 	beq.w	4056a6 <_dtoa_r+0xb1e>
  405176:	2a00      	cmp	r2, #0
  405178:	f300 8306 	bgt.w	405788 <_dtoa_r+0xc00>
  40517c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40517e:	703b      	strb	r3, [r7, #0]
  405180:	f107 0801 	add.w	r8, r7, #1
  405184:	4297      	cmp	r7, r2
  405186:	4645      	mov	r5, r8
  405188:	f000 830c 	beq.w	4057a4 <_dtoa_r+0xc1c>
  40518c:	4649      	mov	r1, r9
  40518e:	2300      	movs	r3, #0
  405190:	220a      	movs	r2, #10
  405192:	4620      	mov	r0, r4
  405194:	f001 f82a 	bl	4061ec <__multadd>
  405198:	455e      	cmp	r6, fp
  40519a:	4681      	mov	r9, r0
  40519c:	4631      	mov	r1, r6
  40519e:	f04f 0300 	mov.w	r3, #0
  4051a2:	f04f 020a 	mov.w	r2, #10
  4051a6:	4620      	mov	r0, r4
  4051a8:	f000 81eb 	beq.w	405582 <_dtoa_r+0x9fa>
  4051ac:	f001 f81e 	bl	4061ec <__multadd>
  4051b0:	4659      	mov	r1, fp
  4051b2:	4606      	mov	r6, r0
  4051b4:	2300      	movs	r3, #0
  4051b6:	220a      	movs	r2, #10
  4051b8:	4620      	mov	r0, r4
  4051ba:	f001 f817 	bl	4061ec <__multadd>
  4051be:	4647      	mov	r7, r8
  4051c0:	4683      	mov	fp, r0
  4051c2:	e7a3      	b.n	40510c <_dtoa_r+0x584>
  4051c4:	201c      	movs	r0, #28
  4051c6:	9b08      	ldr	r3, [sp, #32]
  4051c8:	4403      	add	r3, r0
  4051ca:	9308      	str	r3, [sp, #32]
  4051cc:	9b06      	ldr	r3, [sp, #24]
  4051ce:	4403      	add	r3, r0
  4051d0:	4405      	add	r5, r0
  4051d2:	9306      	str	r3, [sp, #24]
  4051d4:	e763      	b.n	40509e <_dtoa_r+0x516>
  4051d6:	4641      	mov	r1, r8
  4051d8:	4648      	mov	r0, r9
  4051da:	f001 f9d5 	bl	406588 <__mcmp>
  4051de:	2800      	cmp	r0, #0
  4051e0:	f6bf af73 	bge.w	4050ca <_dtoa_r+0x542>
  4051e4:	9f02      	ldr	r7, [sp, #8]
  4051e6:	4649      	mov	r1, r9
  4051e8:	2300      	movs	r3, #0
  4051ea:	220a      	movs	r2, #10
  4051ec:	4620      	mov	r0, r4
  4051ee:	3f01      	subs	r7, #1
  4051f0:	9702      	str	r7, [sp, #8]
  4051f2:	f000 fffb 	bl	4061ec <__multadd>
  4051f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4051f8:	4681      	mov	r9, r0
  4051fa:	2b00      	cmp	r3, #0
  4051fc:	f040 83b6 	bne.w	40596c <_dtoa_r+0xde4>
  405200:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405202:	2b00      	cmp	r3, #0
  405204:	f340 83bf 	ble.w	405986 <_dtoa_r+0xdfe>
  405208:	930a      	str	r3, [sp, #40]	; 0x28
  40520a:	f8dd b010 	ldr.w	fp, [sp, #16]
  40520e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405210:	465d      	mov	r5, fp
  405212:	e002      	b.n	40521a <_dtoa_r+0x692>
  405214:	f000 ffea 	bl	4061ec <__multadd>
  405218:	4681      	mov	r9, r0
  40521a:	4641      	mov	r1, r8
  40521c:	4648      	mov	r0, r9
  40521e:	f7ff fc1d 	bl	404a5c <quorem>
  405222:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  405226:	f805 ab01 	strb.w	sl, [r5], #1
  40522a:	eba5 030b 	sub.w	r3, r5, fp
  40522e:	42bb      	cmp	r3, r7
  405230:	f04f 020a 	mov.w	r2, #10
  405234:	f04f 0300 	mov.w	r3, #0
  405238:	4649      	mov	r1, r9
  40523a:	4620      	mov	r0, r4
  40523c:	dbea      	blt.n	405214 <_dtoa_r+0x68c>
  40523e:	9b04      	ldr	r3, [sp, #16]
  405240:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405242:	2a01      	cmp	r2, #1
  405244:	bfac      	ite	ge
  405246:	189b      	addge	r3, r3, r2
  405248:	3301      	addlt	r3, #1
  40524a:	461d      	mov	r5, r3
  40524c:	f04f 0b00 	mov.w	fp, #0
  405250:	4649      	mov	r1, r9
  405252:	2201      	movs	r2, #1
  405254:	4620      	mov	r0, r4
  405256:	f001 f945 	bl	4064e4 <__lshift>
  40525a:	4641      	mov	r1, r8
  40525c:	4681      	mov	r9, r0
  40525e:	f001 f993 	bl	406588 <__mcmp>
  405262:	2800      	cmp	r0, #0
  405264:	f340 823d 	ble.w	4056e2 <_dtoa_r+0xb5a>
  405268:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40526c:	9904      	ldr	r1, [sp, #16]
  40526e:	1e6b      	subs	r3, r5, #1
  405270:	e004      	b.n	40527c <_dtoa_r+0x6f4>
  405272:	428b      	cmp	r3, r1
  405274:	f000 81ae 	beq.w	4055d4 <_dtoa_r+0xa4c>
  405278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40527c:	2a39      	cmp	r2, #57	; 0x39
  40527e:	f103 0501 	add.w	r5, r3, #1
  405282:	d0f6      	beq.n	405272 <_dtoa_r+0x6ea>
  405284:	3201      	adds	r2, #1
  405286:	701a      	strb	r2, [r3, #0]
  405288:	4641      	mov	r1, r8
  40528a:	4620      	mov	r0, r4
  40528c:	f000 ffa4 	bl	4061d8 <_Bfree>
  405290:	2e00      	cmp	r6, #0
  405292:	f43f ae3d 	beq.w	404f10 <_dtoa_r+0x388>
  405296:	f1bb 0f00 	cmp.w	fp, #0
  40529a:	d005      	beq.n	4052a8 <_dtoa_r+0x720>
  40529c:	45b3      	cmp	fp, r6
  40529e:	d003      	beq.n	4052a8 <_dtoa_r+0x720>
  4052a0:	4659      	mov	r1, fp
  4052a2:	4620      	mov	r0, r4
  4052a4:	f000 ff98 	bl	4061d8 <_Bfree>
  4052a8:	4631      	mov	r1, r6
  4052aa:	4620      	mov	r0, r4
  4052ac:	f000 ff94 	bl	4061d8 <_Bfree>
  4052b0:	e62e      	b.n	404f10 <_dtoa_r+0x388>
  4052b2:	2300      	movs	r3, #0
  4052b4:	930b      	str	r3, [sp, #44]	; 0x2c
  4052b6:	9b02      	ldr	r3, [sp, #8]
  4052b8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4052ba:	4413      	add	r3, r2
  4052bc:	930f      	str	r3, [sp, #60]	; 0x3c
  4052be:	3301      	adds	r3, #1
  4052c0:	2b01      	cmp	r3, #1
  4052c2:	461f      	mov	r7, r3
  4052c4:	461e      	mov	r6, r3
  4052c6:	930a      	str	r3, [sp, #40]	; 0x28
  4052c8:	bfb8      	it	lt
  4052ca:	2701      	movlt	r7, #1
  4052cc:	2100      	movs	r1, #0
  4052ce:	2f17      	cmp	r7, #23
  4052d0:	6461      	str	r1, [r4, #68]	; 0x44
  4052d2:	d90a      	bls.n	4052ea <_dtoa_r+0x762>
  4052d4:	2201      	movs	r2, #1
  4052d6:	2304      	movs	r3, #4
  4052d8:	005b      	lsls	r3, r3, #1
  4052da:	f103 0014 	add.w	r0, r3, #20
  4052de:	4287      	cmp	r7, r0
  4052e0:	4611      	mov	r1, r2
  4052e2:	f102 0201 	add.w	r2, r2, #1
  4052e6:	d2f7      	bcs.n	4052d8 <_dtoa_r+0x750>
  4052e8:	6461      	str	r1, [r4, #68]	; 0x44
  4052ea:	4620      	mov	r0, r4
  4052ec:	f000 ff4e 	bl	40618c <_Balloc>
  4052f0:	2e0e      	cmp	r6, #14
  4052f2:	9004      	str	r0, [sp, #16]
  4052f4:	6420      	str	r0, [r4, #64]	; 0x40
  4052f6:	f63f ad41 	bhi.w	404d7c <_dtoa_r+0x1f4>
  4052fa:	2d00      	cmp	r5, #0
  4052fc:	f43f ad3e 	beq.w	404d7c <_dtoa_r+0x1f4>
  405300:	9902      	ldr	r1, [sp, #8]
  405302:	2900      	cmp	r1, #0
  405304:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  405308:	f340 8202 	ble.w	405710 <_dtoa_r+0xb88>
  40530c:	4bb8      	ldr	r3, [pc, #736]	; (4055f0 <_dtoa_r+0xa68>)
  40530e:	f001 020f 	and.w	r2, r1, #15
  405312:	110d      	asrs	r5, r1, #4
  405314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405318:	06e9      	lsls	r1, r5, #27
  40531a:	e9d3 6700 	ldrd	r6, r7, [r3]
  40531e:	f140 81ae 	bpl.w	40567e <_dtoa_r+0xaf6>
  405322:	4bb4      	ldr	r3, [pc, #720]	; (4055f4 <_dtoa_r+0xa6c>)
  405324:	4650      	mov	r0, sl
  405326:	4659      	mov	r1, fp
  405328:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40532c:	f002 fa0c 	bl	407748 <__aeabi_ddiv>
  405330:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  405334:	f005 050f 	and.w	r5, r5, #15
  405338:	f04f 0a03 	mov.w	sl, #3
  40533c:	b18d      	cbz	r5, 405362 <_dtoa_r+0x7da>
  40533e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4055f4 <_dtoa_r+0xa6c>
  405342:	07ea      	lsls	r2, r5, #31
  405344:	d509      	bpl.n	40535a <_dtoa_r+0x7d2>
  405346:	4630      	mov	r0, r6
  405348:	4639      	mov	r1, r7
  40534a:	e9d8 2300 	ldrd	r2, r3, [r8]
  40534e:	f002 f8d1 	bl	4074f4 <__aeabi_dmul>
  405352:	f10a 0a01 	add.w	sl, sl, #1
  405356:	4606      	mov	r6, r0
  405358:	460f      	mov	r7, r1
  40535a:	106d      	asrs	r5, r5, #1
  40535c:	f108 0808 	add.w	r8, r8, #8
  405360:	d1ef      	bne.n	405342 <_dtoa_r+0x7ba>
  405362:	463b      	mov	r3, r7
  405364:	4632      	mov	r2, r6
  405366:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40536a:	f002 f9ed 	bl	407748 <__aeabi_ddiv>
  40536e:	4607      	mov	r7, r0
  405370:	4688      	mov	r8, r1
  405372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405374:	b143      	cbz	r3, 405388 <_dtoa_r+0x800>
  405376:	2200      	movs	r2, #0
  405378:	4b9f      	ldr	r3, [pc, #636]	; (4055f8 <_dtoa_r+0xa70>)
  40537a:	4638      	mov	r0, r7
  40537c:	4641      	mov	r1, r8
  40537e:	f002 fb2b 	bl	4079d8 <__aeabi_dcmplt>
  405382:	2800      	cmp	r0, #0
  405384:	f040 8286 	bne.w	405894 <_dtoa_r+0xd0c>
  405388:	4650      	mov	r0, sl
  40538a:	f002 f84d 	bl	407428 <__aeabi_i2d>
  40538e:	463a      	mov	r2, r7
  405390:	4643      	mov	r3, r8
  405392:	f002 f8af 	bl	4074f4 <__aeabi_dmul>
  405396:	4b99      	ldr	r3, [pc, #612]	; (4055fc <_dtoa_r+0xa74>)
  405398:	2200      	movs	r2, #0
  40539a:	f001 fef9 	bl	407190 <__adddf3>
  40539e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4053a0:	4605      	mov	r5, r0
  4053a2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4053a6:	2b00      	cmp	r3, #0
  4053a8:	f000 813e 	beq.w	405628 <_dtoa_r+0xaa0>
  4053ac:	9b02      	ldr	r3, [sp, #8]
  4053ae:	9315      	str	r3, [sp, #84]	; 0x54
  4053b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4053b2:	9312      	str	r3, [sp, #72]	; 0x48
  4053b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4053b6:	2b00      	cmp	r3, #0
  4053b8:	f000 81fa 	beq.w	4057b0 <_dtoa_r+0xc28>
  4053bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4053be:	4b8c      	ldr	r3, [pc, #560]	; (4055f0 <_dtoa_r+0xa68>)
  4053c0:	498f      	ldr	r1, [pc, #572]	; (405600 <_dtoa_r+0xa78>)
  4053c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4053c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4053ca:	2000      	movs	r0, #0
  4053cc:	f002 f9bc 	bl	407748 <__aeabi_ddiv>
  4053d0:	462a      	mov	r2, r5
  4053d2:	4633      	mov	r3, r6
  4053d4:	f001 feda 	bl	40718c <__aeabi_dsub>
  4053d8:	4682      	mov	sl, r0
  4053da:	468b      	mov	fp, r1
  4053dc:	4638      	mov	r0, r7
  4053de:	4641      	mov	r1, r8
  4053e0:	f002 fb38 	bl	407a54 <__aeabi_d2iz>
  4053e4:	4605      	mov	r5, r0
  4053e6:	f002 f81f 	bl	407428 <__aeabi_i2d>
  4053ea:	4602      	mov	r2, r0
  4053ec:	460b      	mov	r3, r1
  4053ee:	4638      	mov	r0, r7
  4053f0:	4641      	mov	r1, r8
  4053f2:	f001 fecb 	bl	40718c <__aeabi_dsub>
  4053f6:	3530      	adds	r5, #48	; 0x30
  4053f8:	fa5f f885 	uxtb.w	r8, r5
  4053fc:	9d04      	ldr	r5, [sp, #16]
  4053fe:	4606      	mov	r6, r0
  405400:	460f      	mov	r7, r1
  405402:	f885 8000 	strb.w	r8, [r5]
  405406:	4602      	mov	r2, r0
  405408:	460b      	mov	r3, r1
  40540a:	4650      	mov	r0, sl
  40540c:	4659      	mov	r1, fp
  40540e:	3501      	adds	r5, #1
  405410:	f002 fb00 	bl	407a14 <__aeabi_dcmpgt>
  405414:	2800      	cmp	r0, #0
  405416:	d154      	bne.n	4054c2 <_dtoa_r+0x93a>
  405418:	4632      	mov	r2, r6
  40541a:	463b      	mov	r3, r7
  40541c:	2000      	movs	r0, #0
  40541e:	4976      	ldr	r1, [pc, #472]	; (4055f8 <_dtoa_r+0xa70>)
  405420:	f001 feb4 	bl	40718c <__aeabi_dsub>
  405424:	4602      	mov	r2, r0
  405426:	460b      	mov	r3, r1
  405428:	4650      	mov	r0, sl
  40542a:	4659      	mov	r1, fp
  40542c:	f002 faf2 	bl	407a14 <__aeabi_dcmpgt>
  405430:	2800      	cmp	r0, #0
  405432:	f040 8270 	bne.w	405916 <_dtoa_r+0xd8e>
  405436:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405438:	2a01      	cmp	r2, #1
  40543a:	f000 8111 	beq.w	405660 <_dtoa_r+0xad8>
  40543e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405440:	9a04      	ldr	r2, [sp, #16]
  405442:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405446:	4413      	add	r3, r2
  405448:	4699      	mov	r9, r3
  40544a:	e00d      	b.n	405468 <_dtoa_r+0x8e0>
  40544c:	2000      	movs	r0, #0
  40544e:	496a      	ldr	r1, [pc, #424]	; (4055f8 <_dtoa_r+0xa70>)
  405450:	f001 fe9c 	bl	40718c <__aeabi_dsub>
  405454:	4652      	mov	r2, sl
  405456:	465b      	mov	r3, fp
  405458:	f002 fabe 	bl	4079d8 <__aeabi_dcmplt>
  40545c:	2800      	cmp	r0, #0
  40545e:	f040 8258 	bne.w	405912 <_dtoa_r+0xd8a>
  405462:	454d      	cmp	r5, r9
  405464:	f000 80fa 	beq.w	40565c <_dtoa_r+0xad4>
  405468:	4650      	mov	r0, sl
  40546a:	4659      	mov	r1, fp
  40546c:	2200      	movs	r2, #0
  40546e:	4b65      	ldr	r3, [pc, #404]	; (405604 <_dtoa_r+0xa7c>)
  405470:	f002 f840 	bl	4074f4 <__aeabi_dmul>
  405474:	2200      	movs	r2, #0
  405476:	4b63      	ldr	r3, [pc, #396]	; (405604 <_dtoa_r+0xa7c>)
  405478:	4682      	mov	sl, r0
  40547a:	468b      	mov	fp, r1
  40547c:	4630      	mov	r0, r6
  40547e:	4639      	mov	r1, r7
  405480:	f002 f838 	bl	4074f4 <__aeabi_dmul>
  405484:	460f      	mov	r7, r1
  405486:	4606      	mov	r6, r0
  405488:	f002 fae4 	bl	407a54 <__aeabi_d2iz>
  40548c:	4680      	mov	r8, r0
  40548e:	f001 ffcb 	bl	407428 <__aeabi_i2d>
  405492:	4602      	mov	r2, r0
  405494:	460b      	mov	r3, r1
  405496:	4630      	mov	r0, r6
  405498:	4639      	mov	r1, r7
  40549a:	f001 fe77 	bl	40718c <__aeabi_dsub>
  40549e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4054a2:	fa5f f888 	uxtb.w	r8, r8
  4054a6:	4652      	mov	r2, sl
  4054a8:	465b      	mov	r3, fp
  4054aa:	f805 8b01 	strb.w	r8, [r5], #1
  4054ae:	4606      	mov	r6, r0
  4054b0:	460f      	mov	r7, r1
  4054b2:	f002 fa91 	bl	4079d8 <__aeabi_dcmplt>
  4054b6:	4632      	mov	r2, r6
  4054b8:	463b      	mov	r3, r7
  4054ba:	2800      	cmp	r0, #0
  4054bc:	d0c6      	beq.n	40544c <_dtoa_r+0x8c4>
  4054be:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4054c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4054c4:	9302      	str	r3, [sp, #8]
  4054c6:	e523      	b.n	404f10 <_dtoa_r+0x388>
  4054c8:	2300      	movs	r3, #0
  4054ca:	930b      	str	r3, [sp, #44]	; 0x2c
  4054cc:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4054ce:	2b00      	cmp	r3, #0
  4054d0:	f340 80dc 	ble.w	40568c <_dtoa_r+0xb04>
  4054d4:	461f      	mov	r7, r3
  4054d6:	461e      	mov	r6, r3
  4054d8:	930f      	str	r3, [sp, #60]	; 0x3c
  4054da:	930a      	str	r3, [sp, #40]	; 0x28
  4054dc:	e6f6      	b.n	4052cc <_dtoa_r+0x744>
  4054de:	2301      	movs	r3, #1
  4054e0:	930b      	str	r3, [sp, #44]	; 0x2c
  4054e2:	e7f3      	b.n	4054cc <_dtoa_r+0x944>
  4054e4:	f1ba 0f00 	cmp.w	sl, #0
  4054e8:	f47f ada8 	bne.w	40503c <_dtoa_r+0x4b4>
  4054ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4054f0:	2b00      	cmp	r3, #0
  4054f2:	f47f adba 	bne.w	40506a <_dtoa_r+0x4e2>
  4054f6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4054fa:	0d3f      	lsrs	r7, r7, #20
  4054fc:	053f      	lsls	r7, r7, #20
  4054fe:	2f00      	cmp	r7, #0
  405500:	f000 820d 	beq.w	40591e <_dtoa_r+0xd96>
  405504:	9b08      	ldr	r3, [sp, #32]
  405506:	3301      	adds	r3, #1
  405508:	9308      	str	r3, [sp, #32]
  40550a:	9b06      	ldr	r3, [sp, #24]
  40550c:	3301      	adds	r3, #1
  40550e:	9306      	str	r3, [sp, #24]
  405510:	2301      	movs	r3, #1
  405512:	930c      	str	r3, [sp, #48]	; 0x30
  405514:	e5ab      	b.n	40506e <_dtoa_r+0x4e6>
  405516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405518:	2b00      	cmp	r3, #0
  40551a:	f73f ac42 	bgt.w	404da2 <_dtoa_r+0x21a>
  40551e:	f040 8221 	bne.w	405964 <_dtoa_r+0xddc>
  405522:	2200      	movs	r2, #0
  405524:	4b38      	ldr	r3, [pc, #224]	; (405608 <_dtoa_r+0xa80>)
  405526:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40552a:	f001 ffe3 	bl	4074f4 <__aeabi_dmul>
  40552e:	4652      	mov	r2, sl
  405530:	465b      	mov	r3, fp
  405532:	f002 fa65 	bl	407a00 <__aeabi_dcmpge>
  405536:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40553a:	4646      	mov	r6, r8
  40553c:	2800      	cmp	r0, #0
  40553e:	d041      	beq.n	4055c4 <_dtoa_r+0xa3c>
  405540:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405542:	9d04      	ldr	r5, [sp, #16]
  405544:	43db      	mvns	r3, r3
  405546:	9302      	str	r3, [sp, #8]
  405548:	4641      	mov	r1, r8
  40554a:	4620      	mov	r0, r4
  40554c:	f000 fe44 	bl	4061d8 <_Bfree>
  405550:	2e00      	cmp	r6, #0
  405552:	f43f acdd 	beq.w	404f10 <_dtoa_r+0x388>
  405556:	e6a7      	b.n	4052a8 <_dtoa_r+0x720>
  405558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40555a:	4649      	mov	r1, r9
  40555c:	4620      	mov	r0, r4
  40555e:	f000 ff71 	bl	406444 <__pow5mult>
  405562:	4681      	mov	r9, r0
  405564:	e558      	b.n	405018 <_dtoa_r+0x490>
  405566:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405568:	2a00      	cmp	r2, #0
  40556a:	f000 8187 	beq.w	40587c <_dtoa_r+0xcf4>
  40556e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405572:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405574:	9d08      	ldr	r5, [sp, #32]
  405576:	e4f2      	b.n	404f5e <_dtoa_r+0x3d6>
  405578:	f1ba 0f00 	cmp.w	sl, #0
  40557c:	f47f ad75 	bne.w	40506a <_dtoa_r+0x4e2>
  405580:	e7b4      	b.n	4054ec <_dtoa_r+0x964>
  405582:	f000 fe33 	bl	4061ec <__multadd>
  405586:	4647      	mov	r7, r8
  405588:	4606      	mov	r6, r0
  40558a:	4683      	mov	fp, r0
  40558c:	e5be      	b.n	40510c <_dtoa_r+0x584>
  40558e:	4601      	mov	r1, r0
  405590:	4620      	mov	r0, r4
  405592:	9306      	str	r3, [sp, #24]
  405594:	f000 fe20 	bl	4061d8 <_Bfree>
  405598:	2201      	movs	r2, #1
  40559a:	9b06      	ldr	r3, [sp, #24]
  40559c:	e5e0      	b.n	405160 <_dtoa_r+0x5d8>
  40559e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4055a0:	2b02      	cmp	r3, #2
  4055a2:	f77f ad96 	ble.w	4050d2 <_dtoa_r+0x54a>
  4055a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4055a8:	2b00      	cmp	r3, #0
  4055aa:	d1c9      	bne.n	405540 <_dtoa_r+0x9b8>
  4055ac:	4641      	mov	r1, r8
  4055ae:	2205      	movs	r2, #5
  4055b0:	4620      	mov	r0, r4
  4055b2:	f000 fe1b 	bl	4061ec <__multadd>
  4055b6:	4601      	mov	r1, r0
  4055b8:	4680      	mov	r8, r0
  4055ba:	4648      	mov	r0, r9
  4055bc:	f000 ffe4 	bl	406588 <__mcmp>
  4055c0:	2800      	cmp	r0, #0
  4055c2:	ddbd      	ble.n	405540 <_dtoa_r+0x9b8>
  4055c4:	9a02      	ldr	r2, [sp, #8]
  4055c6:	9904      	ldr	r1, [sp, #16]
  4055c8:	2331      	movs	r3, #49	; 0x31
  4055ca:	3201      	adds	r2, #1
  4055cc:	9202      	str	r2, [sp, #8]
  4055ce:	700b      	strb	r3, [r1, #0]
  4055d0:	1c4d      	adds	r5, r1, #1
  4055d2:	e7b9      	b.n	405548 <_dtoa_r+0x9c0>
  4055d4:	9a02      	ldr	r2, [sp, #8]
  4055d6:	3201      	adds	r2, #1
  4055d8:	9202      	str	r2, [sp, #8]
  4055da:	9a04      	ldr	r2, [sp, #16]
  4055dc:	2331      	movs	r3, #49	; 0x31
  4055de:	7013      	strb	r3, [r2, #0]
  4055e0:	e652      	b.n	405288 <_dtoa_r+0x700>
  4055e2:	2301      	movs	r3, #1
  4055e4:	930b      	str	r3, [sp, #44]	; 0x2c
  4055e6:	e666      	b.n	4052b6 <_dtoa_r+0x72e>
  4055e8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4055ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4055ee:	e48f      	b.n	404f10 <_dtoa_r+0x388>
  4055f0:	00408600 	.word	0x00408600
  4055f4:	004085d8 	.word	0x004085d8
  4055f8:	3ff00000 	.word	0x3ff00000
  4055fc:	401c0000 	.word	0x401c0000
  405600:	3fe00000 	.word	0x3fe00000
  405604:	40240000 	.word	0x40240000
  405608:	40140000 	.word	0x40140000
  40560c:	4650      	mov	r0, sl
  40560e:	f001 ff0b 	bl	407428 <__aeabi_i2d>
  405612:	463a      	mov	r2, r7
  405614:	4643      	mov	r3, r8
  405616:	f001 ff6d 	bl	4074f4 <__aeabi_dmul>
  40561a:	2200      	movs	r2, #0
  40561c:	4bc1      	ldr	r3, [pc, #772]	; (405924 <_dtoa_r+0xd9c>)
  40561e:	f001 fdb7 	bl	407190 <__adddf3>
  405622:	4605      	mov	r5, r0
  405624:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405628:	4641      	mov	r1, r8
  40562a:	2200      	movs	r2, #0
  40562c:	4bbe      	ldr	r3, [pc, #760]	; (405928 <_dtoa_r+0xda0>)
  40562e:	4638      	mov	r0, r7
  405630:	f001 fdac 	bl	40718c <__aeabi_dsub>
  405634:	462a      	mov	r2, r5
  405636:	4633      	mov	r3, r6
  405638:	4682      	mov	sl, r0
  40563a:	468b      	mov	fp, r1
  40563c:	f002 f9ea 	bl	407a14 <__aeabi_dcmpgt>
  405640:	4680      	mov	r8, r0
  405642:	2800      	cmp	r0, #0
  405644:	f040 8110 	bne.w	405868 <_dtoa_r+0xce0>
  405648:	462a      	mov	r2, r5
  40564a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40564e:	4650      	mov	r0, sl
  405650:	4659      	mov	r1, fp
  405652:	f002 f9c1 	bl	4079d8 <__aeabi_dcmplt>
  405656:	b118      	cbz	r0, 405660 <_dtoa_r+0xad8>
  405658:	4646      	mov	r6, r8
  40565a:	e771      	b.n	405540 <_dtoa_r+0x9b8>
  40565c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405660:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  405664:	f7ff bb8a 	b.w	404d7c <_dtoa_r+0x1f4>
  405668:	9804      	ldr	r0, [sp, #16]
  40566a:	f7ff babb 	b.w	404be4 <_dtoa_r+0x5c>
  40566e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405670:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405672:	970c      	str	r7, [sp, #48]	; 0x30
  405674:	1afb      	subs	r3, r7, r3
  405676:	441a      	add	r2, r3
  405678:	920d      	str	r2, [sp, #52]	; 0x34
  40567a:	2700      	movs	r7, #0
  40567c:	e469      	b.n	404f52 <_dtoa_r+0x3ca>
  40567e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  405682:	f04f 0a02 	mov.w	sl, #2
  405686:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40568a:	e657      	b.n	40533c <_dtoa_r+0x7b4>
  40568c:	2100      	movs	r1, #0
  40568e:	2301      	movs	r3, #1
  405690:	6461      	str	r1, [r4, #68]	; 0x44
  405692:	4620      	mov	r0, r4
  405694:	9325      	str	r3, [sp, #148]	; 0x94
  405696:	f000 fd79 	bl	40618c <_Balloc>
  40569a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40569c:	9004      	str	r0, [sp, #16]
  40569e:	6420      	str	r0, [r4, #64]	; 0x40
  4056a0:	930a      	str	r3, [sp, #40]	; 0x28
  4056a2:	930f      	str	r3, [sp, #60]	; 0x3c
  4056a4:	e629      	b.n	4052fa <_dtoa_r+0x772>
  4056a6:	2a00      	cmp	r2, #0
  4056a8:	46d0      	mov	r8, sl
  4056aa:	f8cd b018 	str.w	fp, [sp, #24]
  4056ae:	469a      	mov	sl, r3
  4056b0:	dd11      	ble.n	4056d6 <_dtoa_r+0xb4e>
  4056b2:	4649      	mov	r1, r9
  4056b4:	2201      	movs	r2, #1
  4056b6:	4620      	mov	r0, r4
  4056b8:	f000 ff14 	bl	4064e4 <__lshift>
  4056bc:	4641      	mov	r1, r8
  4056be:	4681      	mov	r9, r0
  4056c0:	f000 ff62 	bl	406588 <__mcmp>
  4056c4:	2800      	cmp	r0, #0
  4056c6:	f340 8146 	ble.w	405956 <_dtoa_r+0xdce>
  4056ca:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4056ce:	f000 8106 	beq.w	4058de <_dtoa_r+0xd56>
  4056d2:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4056d6:	46b3      	mov	fp, r6
  4056d8:	f887 a000 	strb.w	sl, [r7]
  4056dc:	1c7d      	adds	r5, r7, #1
  4056de:	9e06      	ldr	r6, [sp, #24]
  4056e0:	e5d2      	b.n	405288 <_dtoa_r+0x700>
  4056e2:	d104      	bne.n	4056ee <_dtoa_r+0xb66>
  4056e4:	f01a 0f01 	tst.w	sl, #1
  4056e8:	d001      	beq.n	4056ee <_dtoa_r+0xb66>
  4056ea:	e5bd      	b.n	405268 <_dtoa_r+0x6e0>
  4056ec:	4615      	mov	r5, r2
  4056ee:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4056f2:	2b30      	cmp	r3, #48	; 0x30
  4056f4:	f105 32ff 	add.w	r2, r5, #4294967295
  4056f8:	d0f8      	beq.n	4056ec <_dtoa_r+0xb64>
  4056fa:	e5c5      	b.n	405288 <_dtoa_r+0x700>
  4056fc:	9904      	ldr	r1, [sp, #16]
  4056fe:	2230      	movs	r2, #48	; 0x30
  405700:	700a      	strb	r2, [r1, #0]
  405702:	9a02      	ldr	r2, [sp, #8]
  405704:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405708:	3201      	adds	r2, #1
  40570a:	9202      	str	r2, [sp, #8]
  40570c:	f7ff bbfc 	b.w	404f08 <_dtoa_r+0x380>
  405710:	f000 80bb 	beq.w	40588a <_dtoa_r+0xd02>
  405714:	9b02      	ldr	r3, [sp, #8]
  405716:	425d      	negs	r5, r3
  405718:	4b84      	ldr	r3, [pc, #528]	; (40592c <_dtoa_r+0xda4>)
  40571a:	f005 020f 	and.w	r2, r5, #15
  40571e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405722:	e9d3 2300 	ldrd	r2, r3, [r3]
  405726:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40572a:	f001 fee3 	bl	4074f4 <__aeabi_dmul>
  40572e:	112d      	asrs	r5, r5, #4
  405730:	4607      	mov	r7, r0
  405732:	4688      	mov	r8, r1
  405734:	f000 812c 	beq.w	405990 <_dtoa_r+0xe08>
  405738:	4e7d      	ldr	r6, [pc, #500]	; (405930 <_dtoa_r+0xda8>)
  40573a:	f04f 0a02 	mov.w	sl, #2
  40573e:	07eb      	lsls	r3, r5, #31
  405740:	d509      	bpl.n	405756 <_dtoa_r+0xbce>
  405742:	4638      	mov	r0, r7
  405744:	4641      	mov	r1, r8
  405746:	e9d6 2300 	ldrd	r2, r3, [r6]
  40574a:	f001 fed3 	bl	4074f4 <__aeabi_dmul>
  40574e:	f10a 0a01 	add.w	sl, sl, #1
  405752:	4607      	mov	r7, r0
  405754:	4688      	mov	r8, r1
  405756:	106d      	asrs	r5, r5, #1
  405758:	f106 0608 	add.w	r6, r6, #8
  40575c:	d1ef      	bne.n	40573e <_dtoa_r+0xbb6>
  40575e:	e608      	b.n	405372 <_dtoa_r+0x7ea>
  405760:	6871      	ldr	r1, [r6, #4]
  405762:	4620      	mov	r0, r4
  405764:	f000 fd12 	bl	40618c <_Balloc>
  405768:	6933      	ldr	r3, [r6, #16]
  40576a:	3302      	adds	r3, #2
  40576c:	009a      	lsls	r2, r3, #2
  40576e:	4605      	mov	r5, r0
  405770:	f106 010c 	add.w	r1, r6, #12
  405774:	300c      	adds	r0, #12
  405776:	f000 fc63 	bl	406040 <memcpy>
  40577a:	4629      	mov	r1, r5
  40577c:	2201      	movs	r2, #1
  40577e:	4620      	mov	r0, r4
  405780:	f000 feb0 	bl	4064e4 <__lshift>
  405784:	9006      	str	r0, [sp, #24]
  405786:	e4b5      	b.n	4050f4 <_dtoa_r+0x56c>
  405788:	2b39      	cmp	r3, #57	; 0x39
  40578a:	f8cd b018 	str.w	fp, [sp, #24]
  40578e:	46d0      	mov	r8, sl
  405790:	f000 80a5 	beq.w	4058de <_dtoa_r+0xd56>
  405794:	f103 0a01 	add.w	sl, r3, #1
  405798:	46b3      	mov	fp, r6
  40579a:	f887 a000 	strb.w	sl, [r7]
  40579e:	1c7d      	adds	r5, r7, #1
  4057a0:	9e06      	ldr	r6, [sp, #24]
  4057a2:	e571      	b.n	405288 <_dtoa_r+0x700>
  4057a4:	465a      	mov	r2, fp
  4057a6:	46d0      	mov	r8, sl
  4057a8:	46b3      	mov	fp, r6
  4057aa:	469a      	mov	sl, r3
  4057ac:	4616      	mov	r6, r2
  4057ae:	e54f      	b.n	405250 <_dtoa_r+0x6c8>
  4057b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4057b2:	495e      	ldr	r1, [pc, #376]	; (40592c <_dtoa_r+0xda4>)
  4057b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4057b8:	462a      	mov	r2, r5
  4057ba:	4633      	mov	r3, r6
  4057bc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4057c0:	f001 fe98 	bl	4074f4 <__aeabi_dmul>
  4057c4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4057c8:	4638      	mov	r0, r7
  4057ca:	4641      	mov	r1, r8
  4057cc:	f002 f942 	bl	407a54 <__aeabi_d2iz>
  4057d0:	4605      	mov	r5, r0
  4057d2:	f001 fe29 	bl	407428 <__aeabi_i2d>
  4057d6:	460b      	mov	r3, r1
  4057d8:	4602      	mov	r2, r0
  4057da:	4641      	mov	r1, r8
  4057dc:	4638      	mov	r0, r7
  4057de:	f001 fcd5 	bl	40718c <__aeabi_dsub>
  4057e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4057e4:	460f      	mov	r7, r1
  4057e6:	9904      	ldr	r1, [sp, #16]
  4057e8:	3530      	adds	r5, #48	; 0x30
  4057ea:	2b01      	cmp	r3, #1
  4057ec:	700d      	strb	r5, [r1, #0]
  4057ee:	4606      	mov	r6, r0
  4057f0:	f101 0501 	add.w	r5, r1, #1
  4057f4:	d026      	beq.n	405844 <_dtoa_r+0xcbc>
  4057f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4057f8:	9a04      	ldr	r2, [sp, #16]
  4057fa:	f8df b13c 	ldr.w	fp, [pc, #316]	; 405938 <_dtoa_r+0xdb0>
  4057fe:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405802:	4413      	add	r3, r2
  405804:	f04f 0a00 	mov.w	sl, #0
  405808:	4699      	mov	r9, r3
  40580a:	4652      	mov	r2, sl
  40580c:	465b      	mov	r3, fp
  40580e:	4630      	mov	r0, r6
  405810:	4639      	mov	r1, r7
  405812:	f001 fe6f 	bl	4074f4 <__aeabi_dmul>
  405816:	460f      	mov	r7, r1
  405818:	4606      	mov	r6, r0
  40581a:	f002 f91b 	bl	407a54 <__aeabi_d2iz>
  40581e:	4680      	mov	r8, r0
  405820:	f001 fe02 	bl	407428 <__aeabi_i2d>
  405824:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405828:	4602      	mov	r2, r0
  40582a:	460b      	mov	r3, r1
  40582c:	4630      	mov	r0, r6
  40582e:	4639      	mov	r1, r7
  405830:	f001 fcac 	bl	40718c <__aeabi_dsub>
  405834:	f805 8b01 	strb.w	r8, [r5], #1
  405838:	454d      	cmp	r5, r9
  40583a:	4606      	mov	r6, r0
  40583c:	460f      	mov	r7, r1
  40583e:	d1e4      	bne.n	40580a <_dtoa_r+0xc82>
  405840:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405844:	4b3b      	ldr	r3, [pc, #236]	; (405934 <_dtoa_r+0xdac>)
  405846:	2200      	movs	r2, #0
  405848:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40584c:	f001 fca0 	bl	407190 <__adddf3>
  405850:	4632      	mov	r2, r6
  405852:	463b      	mov	r3, r7
  405854:	f002 f8c0 	bl	4079d8 <__aeabi_dcmplt>
  405858:	2800      	cmp	r0, #0
  40585a:	d046      	beq.n	4058ea <_dtoa_r+0xd62>
  40585c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40585e:	9302      	str	r3, [sp, #8]
  405860:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405864:	f7ff bb43 	b.w	404eee <_dtoa_r+0x366>
  405868:	f04f 0800 	mov.w	r8, #0
  40586c:	4646      	mov	r6, r8
  40586e:	e6a9      	b.n	4055c4 <_dtoa_r+0xa3c>
  405870:	9b08      	ldr	r3, [sp, #32]
  405872:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405874:	1a9d      	subs	r5, r3, r2
  405876:	2300      	movs	r3, #0
  405878:	f7ff bb71 	b.w	404f5e <_dtoa_r+0x3d6>
  40587c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40587e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405880:	9d08      	ldr	r5, [sp, #32]
  405882:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  405886:	f7ff bb6a 	b.w	404f5e <_dtoa_r+0x3d6>
  40588a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40588e:	f04f 0a02 	mov.w	sl, #2
  405892:	e56e      	b.n	405372 <_dtoa_r+0x7ea>
  405894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405896:	2b00      	cmp	r3, #0
  405898:	f43f aeb8 	beq.w	40560c <_dtoa_r+0xa84>
  40589c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40589e:	2b00      	cmp	r3, #0
  4058a0:	f77f aede 	ble.w	405660 <_dtoa_r+0xad8>
  4058a4:	2200      	movs	r2, #0
  4058a6:	4b24      	ldr	r3, [pc, #144]	; (405938 <_dtoa_r+0xdb0>)
  4058a8:	4638      	mov	r0, r7
  4058aa:	4641      	mov	r1, r8
  4058ac:	f001 fe22 	bl	4074f4 <__aeabi_dmul>
  4058b0:	4607      	mov	r7, r0
  4058b2:	4688      	mov	r8, r1
  4058b4:	f10a 0001 	add.w	r0, sl, #1
  4058b8:	f001 fdb6 	bl	407428 <__aeabi_i2d>
  4058bc:	463a      	mov	r2, r7
  4058be:	4643      	mov	r3, r8
  4058c0:	f001 fe18 	bl	4074f4 <__aeabi_dmul>
  4058c4:	2200      	movs	r2, #0
  4058c6:	4b17      	ldr	r3, [pc, #92]	; (405924 <_dtoa_r+0xd9c>)
  4058c8:	f001 fc62 	bl	407190 <__adddf3>
  4058cc:	9a02      	ldr	r2, [sp, #8]
  4058ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4058d0:	9312      	str	r3, [sp, #72]	; 0x48
  4058d2:	3a01      	subs	r2, #1
  4058d4:	4605      	mov	r5, r0
  4058d6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4058da:	9215      	str	r2, [sp, #84]	; 0x54
  4058dc:	e56a      	b.n	4053b4 <_dtoa_r+0x82c>
  4058de:	2239      	movs	r2, #57	; 0x39
  4058e0:	46b3      	mov	fp, r6
  4058e2:	703a      	strb	r2, [r7, #0]
  4058e4:	9e06      	ldr	r6, [sp, #24]
  4058e6:	1c7d      	adds	r5, r7, #1
  4058e8:	e4c0      	b.n	40526c <_dtoa_r+0x6e4>
  4058ea:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4058ee:	2000      	movs	r0, #0
  4058f0:	4910      	ldr	r1, [pc, #64]	; (405934 <_dtoa_r+0xdac>)
  4058f2:	f001 fc4b 	bl	40718c <__aeabi_dsub>
  4058f6:	4632      	mov	r2, r6
  4058f8:	463b      	mov	r3, r7
  4058fa:	f002 f88b 	bl	407a14 <__aeabi_dcmpgt>
  4058fe:	b908      	cbnz	r0, 405904 <_dtoa_r+0xd7c>
  405900:	e6ae      	b.n	405660 <_dtoa_r+0xad8>
  405902:	4615      	mov	r5, r2
  405904:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405908:	2b30      	cmp	r3, #48	; 0x30
  40590a:	f105 32ff 	add.w	r2, r5, #4294967295
  40590e:	d0f8      	beq.n	405902 <_dtoa_r+0xd7a>
  405910:	e5d7      	b.n	4054c2 <_dtoa_r+0x93a>
  405912:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405916:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405918:	9302      	str	r3, [sp, #8]
  40591a:	f7ff bae8 	b.w	404eee <_dtoa_r+0x366>
  40591e:	970c      	str	r7, [sp, #48]	; 0x30
  405920:	f7ff bba5 	b.w	40506e <_dtoa_r+0x4e6>
  405924:	401c0000 	.word	0x401c0000
  405928:	40140000 	.word	0x40140000
  40592c:	00408600 	.word	0x00408600
  405930:	004085d8 	.word	0x004085d8
  405934:	3fe00000 	.word	0x3fe00000
  405938:	40240000 	.word	0x40240000
  40593c:	2b39      	cmp	r3, #57	; 0x39
  40593e:	f8cd b018 	str.w	fp, [sp, #24]
  405942:	46d0      	mov	r8, sl
  405944:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405948:	469a      	mov	sl, r3
  40594a:	d0c8      	beq.n	4058de <_dtoa_r+0xd56>
  40594c:	f1bb 0f00 	cmp.w	fp, #0
  405950:	f73f aebf 	bgt.w	4056d2 <_dtoa_r+0xb4a>
  405954:	e6bf      	b.n	4056d6 <_dtoa_r+0xb4e>
  405956:	f47f aebe 	bne.w	4056d6 <_dtoa_r+0xb4e>
  40595a:	f01a 0f01 	tst.w	sl, #1
  40595e:	f43f aeba 	beq.w	4056d6 <_dtoa_r+0xb4e>
  405962:	e6b2      	b.n	4056ca <_dtoa_r+0xb42>
  405964:	f04f 0800 	mov.w	r8, #0
  405968:	4646      	mov	r6, r8
  40596a:	e5e9      	b.n	405540 <_dtoa_r+0x9b8>
  40596c:	4631      	mov	r1, r6
  40596e:	2300      	movs	r3, #0
  405970:	220a      	movs	r2, #10
  405972:	4620      	mov	r0, r4
  405974:	f000 fc3a 	bl	4061ec <__multadd>
  405978:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40597a:	2b00      	cmp	r3, #0
  40597c:	4606      	mov	r6, r0
  40597e:	dd0a      	ble.n	405996 <_dtoa_r+0xe0e>
  405980:	930a      	str	r3, [sp, #40]	; 0x28
  405982:	f7ff bbaa 	b.w	4050da <_dtoa_r+0x552>
  405986:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405988:	2b02      	cmp	r3, #2
  40598a:	dc23      	bgt.n	4059d4 <_dtoa_r+0xe4c>
  40598c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40598e:	e43b      	b.n	405208 <_dtoa_r+0x680>
  405990:	f04f 0a02 	mov.w	sl, #2
  405994:	e4ed      	b.n	405372 <_dtoa_r+0x7ea>
  405996:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405998:	2b02      	cmp	r3, #2
  40599a:	dc1b      	bgt.n	4059d4 <_dtoa_r+0xe4c>
  40599c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40599e:	e7ef      	b.n	405980 <_dtoa_r+0xdf8>
  4059a0:	2500      	movs	r5, #0
  4059a2:	6465      	str	r5, [r4, #68]	; 0x44
  4059a4:	4629      	mov	r1, r5
  4059a6:	4620      	mov	r0, r4
  4059a8:	f000 fbf0 	bl	40618c <_Balloc>
  4059ac:	f04f 33ff 	mov.w	r3, #4294967295
  4059b0:	930a      	str	r3, [sp, #40]	; 0x28
  4059b2:	930f      	str	r3, [sp, #60]	; 0x3c
  4059b4:	2301      	movs	r3, #1
  4059b6:	9004      	str	r0, [sp, #16]
  4059b8:	9525      	str	r5, [sp, #148]	; 0x94
  4059ba:	6420      	str	r0, [r4, #64]	; 0x40
  4059bc:	930b      	str	r3, [sp, #44]	; 0x2c
  4059be:	f7ff b9dd 	b.w	404d7c <_dtoa_r+0x1f4>
  4059c2:	2501      	movs	r5, #1
  4059c4:	f7ff b9a5 	b.w	404d12 <_dtoa_r+0x18a>
  4059c8:	f43f ab69 	beq.w	40509e <_dtoa_r+0x516>
  4059cc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4059d0:	f7ff bbf9 	b.w	4051c6 <_dtoa_r+0x63e>
  4059d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4059d6:	930a      	str	r3, [sp, #40]	; 0x28
  4059d8:	e5e5      	b.n	4055a6 <_dtoa_r+0xa1e>
  4059da:	bf00      	nop

004059dc <__libc_fini_array>:
  4059dc:	b538      	push	{r3, r4, r5, lr}
  4059de:	4c0a      	ldr	r4, [pc, #40]	; (405a08 <__libc_fini_array+0x2c>)
  4059e0:	4d0a      	ldr	r5, [pc, #40]	; (405a0c <__libc_fini_array+0x30>)
  4059e2:	1b64      	subs	r4, r4, r5
  4059e4:	10a4      	asrs	r4, r4, #2
  4059e6:	d00a      	beq.n	4059fe <__libc_fini_array+0x22>
  4059e8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4059ec:	3b01      	subs	r3, #1
  4059ee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4059f2:	3c01      	subs	r4, #1
  4059f4:	f855 3904 	ldr.w	r3, [r5], #-4
  4059f8:	4798      	blx	r3
  4059fa:	2c00      	cmp	r4, #0
  4059fc:	d1f9      	bne.n	4059f2 <__libc_fini_array+0x16>
  4059fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405a02:	f002 befb 	b.w	4087fc <_fini>
  405a06:	bf00      	nop
  405a08:	0040880c 	.word	0x0040880c
  405a0c:	00408808 	.word	0x00408808

00405a10 <_localeconv_r>:
  405a10:	4a04      	ldr	r2, [pc, #16]	; (405a24 <_localeconv_r+0x14>)
  405a12:	4b05      	ldr	r3, [pc, #20]	; (405a28 <_localeconv_r+0x18>)
  405a14:	6812      	ldr	r2, [r2, #0]
  405a16:	6b50      	ldr	r0, [r2, #52]	; 0x34
  405a18:	2800      	cmp	r0, #0
  405a1a:	bf08      	it	eq
  405a1c:	4618      	moveq	r0, r3
  405a1e:	30f0      	adds	r0, #240	; 0xf0
  405a20:	4770      	bx	lr
  405a22:	bf00      	nop
  405a24:	20400020 	.word	0x20400020
  405a28:	20400864 	.word	0x20400864

00405a2c <__retarget_lock_acquire_recursive>:
  405a2c:	4770      	bx	lr
  405a2e:	bf00      	nop

00405a30 <__retarget_lock_release_recursive>:
  405a30:	4770      	bx	lr
  405a32:	bf00      	nop

00405a34 <_malloc_r>:
  405a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405a38:	f101 060b 	add.w	r6, r1, #11
  405a3c:	2e16      	cmp	r6, #22
  405a3e:	b083      	sub	sp, #12
  405a40:	4605      	mov	r5, r0
  405a42:	f240 809e 	bls.w	405b82 <_malloc_r+0x14e>
  405a46:	f036 0607 	bics.w	r6, r6, #7
  405a4a:	f100 80bd 	bmi.w	405bc8 <_malloc_r+0x194>
  405a4e:	42b1      	cmp	r1, r6
  405a50:	f200 80ba 	bhi.w	405bc8 <_malloc_r+0x194>
  405a54:	f000 fb8e 	bl	406174 <__malloc_lock>
  405a58:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  405a5c:	f0c0 8293 	bcc.w	405f86 <_malloc_r+0x552>
  405a60:	0a73      	lsrs	r3, r6, #9
  405a62:	f000 80b8 	beq.w	405bd6 <_malloc_r+0x1a2>
  405a66:	2b04      	cmp	r3, #4
  405a68:	f200 8179 	bhi.w	405d5e <_malloc_r+0x32a>
  405a6c:	09b3      	lsrs	r3, r6, #6
  405a6e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  405a72:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  405a76:	00c3      	lsls	r3, r0, #3
  405a78:	4fbf      	ldr	r7, [pc, #764]	; (405d78 <_malloc_r+0x344>)
  405a7a:	443b      	add	r3, r7
  405a7c:	f1a3 0108 	sub.w	r1, r3, #8
  405a80:	685c      	ldr	r4, [r3, #4]
  405a82:	42a1      	cmp	r1, r4
  405a84:	d106      	bne.n	405a94 <_malloc_r+0x60>
  405a86:	e00c      	b.n	405aa2 <_malloc_r+0x6e>
  405a88:	2a00      	cmp	r2, #0
  405a8a:	f280 80aa 	bge.w	405be2 <_malloc_r+0x1ae>
  405a8e:	68e4      	ldr	r4, [r4, #12]
  405a90:	42a1      	cmp	r1, r4
  405a92:	d006      	beq.n	405aa2 <_malloc_r+0x6e>
  405a94:	6863      	ldr	r3, [r4, #4]
  405a96:	f023 0303 	bic.w	r3, r3, #3
  405a9a:	1b9a      	subs	r2, r3, r6
  405a9c:	2a0f      	cmp	r2, #15
  405a9e:	ddf3      	ble.n	405a88 <_malloc_r+0x54>
  405aa0:	4670      	mov	r0, lr
  405aa2:	693c      	ldr	r4, [r7, #16]
  405aa4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 405d8c <_malloc_r+0x358>
  405aa8:	4574      	cmp	r4, lr
  405aaa:	f000 81ab 	beq.w	405e04 <_malloc_r+0x3d0>
  405aae:	6863      	ldr	r3, [r4, #4]
  405ab0:	f023 0303 	bic.w	r3, r3, #3
  405ab4:	1b9a      	subs	r2, r3, r6
  405ab6:	2a0f      	cmp	r2, #15
  405ab8:	f300 8190 	bgt.w	405ddc <_malloc_r+0x3a8>
  405abc:	2a00      	cmp	r2, #0
  405abe:	f8c7 e014 	str.w	lr, [r7, #20]
  405ac2:	f8c7 e010 	str.w	lr, [r7, #16]
  405ac6:	f280 809d 	bge.w	405c04 <_malloc_r+0x1d0>
  405aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405ace:	f080 8161 	bcs.w	405d94 <_malloc_r+0x360>
  405ad2:	08db      	lsrs	r3, r3, #3
  405ad4:	f103 0c01 	add.w	ip, r3, #1
  405ad8:	1099      	asrs	r1, r3, #2
  405ada:	687a      	ldr	r2, [r7, #4]
  405adc:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  405ae0:	f8c4 8008 	str.w	r8, [r4, #8]
  405ae4:	2301      	movs	r3, #1
  405ae6:	408b      	lsls	r3, r1
  405ae8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  405aec:	4313      	orrs	r3, r2
  405aee:	3908      	subs	r1, #8
  405af0:	60e1      	str	r1, [r4, #12]
  405af2:	607b      	str	r3, [r7, #4]
  405af4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  405af8:	f8c8 400c 	str.w	r4, [r8, #12]
  405afc:	1082      	asrs	r2, r0, #2
  405afe:	2401      	movs	r4, #1
  405b00:	4094      	lsls	r4, r2
  405b02:	429c      	cmp	r4, r3
  405b04:	f200 808b 	bhi.w	405c1e <_malloc_r+0x1ea>
  405b08:	421c      	tst	r4, r3
  405b0a:	d106      	bne.n	405b1a <_malloc_r+0xe6>
  405b0c:	f020 0003 	bic.w	r0, r0, #3
  405b10:	0064      	lsls	r4, r4, #1
  405b12:	421c      	tst	r4, r3
  405b14:	f100 0004 	add.w	r0, r0, #4
  405b18:	d0fa      	beq.n	405b10 <_malloc_r+0xdc>
  405b1a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  405b1e:	46cc      	mov	ip, r9
  405b20:	4680      	mov	r8, r0
  405b22:	f8dc 300c 	ldr.w	r3, [ip, #12]
  405b26:	459c      	cmp	ip, r3
  405b28:	d107      	bne.n	405b3a <_malloc_r+0x106>
  405b2a:	e16d      	b.n	405e08 <_malloc_r+0x3d4>
  405b2c:	2a00      	cmp	r2, #0
  405b2e:	f280 817b 	bge.w	405e28 <_malloc_r+0x3f4>
  405b32:	68db      	ldr	r3, [r3, #12]
  405b34:	459c      	cmp	ip, r3
  405b36:	f000 8167 	beq.w	405e08 <_malloc_r+0x3d4>
  405b3a:	6859      	ldr	r1, [r3, #4]
  405b3c:	f021 0103 	bic.w	r1, r1, #3
  405b40:	1b8a      	subs	r2, r1, r6
  405b42:	2a0f      	cmp	r2, #15
  405b44:	ddf2      	ble.n	405b2c <_malloc_r+0xf8>
  405b46:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405b4a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  405b4e:	9300      	str	r3, [sp, #0]
  405b50:	199c      	adds	r4, r3, r6
  405b52:	4628      	mov	r0, r5
  405b54:	f046 0601 	orr.w	r6, r6, #1
  405b58:	f042 0501 	orr.w	r5, r2, #1
  405b5c:	605e      	str	r6, [r3, #4]
  405b5e:	f8c8 c00c 	str.w	ip, [r8, #12]
  405b62:	f8cc 8008 	str.w	r8, [ip, #8]
  405b66:	617c      	str	r4, [r7, #20]
  405b68:	613c      	str	r4, [r7, #16]
  405b6a:	f8c4 e00c 	str.w	lr, [r4, #12]
  405b6e:	f8c4 e008 	str.w	lr, [r4, #8]
  405b72:	6065      	str	r5, [r4, #4]
  405b74:	505a      	str	r2, [r3, r1]
  405b76:	f000 fb03 	bl	406180 <__malloc_unlock>
  405b7a:	9b00      	ldr	r3, [sp, #0]
  405b7c:	f103 0408 	add.w	r4, r3, #8
  405b80:	e01e      	b.n	405bc0 <_malloc_r+0x18c>
  405b82:	2910      	cmp	r1, #16
  405b84:	d820      	bhi.n	405bc8 <_malloc_r+0x194>
  405b86:	f000 faf5 	bl	406174 <__malloc_lock>
  405b8a:	2610      	movs	r6, #16
  405b8c:	2318      	movs	r3, #24
  405b8e:	2002      	movs	r0, #2
  405b90:	4f79      	ldr	r7, [pc, #484]	; (405d78 <_malloc_r+0x344>)
  405b92:	443b      	add	r3, r7
  405b94:	f1a3 0208 	sub.w	r2, r3, #8
  405b98:	685c      	ldr	r4, [r3, #4]
  405b9a:	4294      	cmp	r4, r2
  405b9c:	f000 813d 	beq.w	405e1a <_malloc_r+0x3e6>
  405ba0:	6863      	ldr	r3, [r4, #4]
  405ba2:	68e1      	ldr	r1, [r4, #12]
  405ba4:	68a6      	ldr	r6, [r4, #8]
  405ba6:	f023 0303 	bic.w	r3, r3, #3
  405baa:	4423      	add	r3, r4
  405bac:	4628      	mov	r0, r5
  405bae:	685a      	ldr	r2, [r3, #4]
  405bb0:	60f1      	str	r1, [r6, #12]
  405bb2:	f042 0201 	orr.w	r2, r2, #1
  405bb6:	608e      	str	r6, [r1, #8]
  405bb8:	605a      	str	r2, [r3, #4]
  405bba:	f000 fae1 	bl	406180 <__malloc_unlock>
  405bbe:	3408      	adds	r4, #8
  405bc0:	4620      	mov	r0, r4
  405bc2:	b003      	add	sp, #12
  405bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405bc8:	2400      	movs	r4, #0
  405bca:	230c      	movs	r3, #12
  405bcc:	4620      	mov	r0, r4
  405bce:	602b      	str	r3, [r5, #0]
  405bd0:	b003      	add	sp, #12
  405bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405bd6:	2040      	movs	r0, #64	; 0x40
  405bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
  405bdc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  405be0:	e74a      	b.n	405a78 <_malloc_r+0x44>
  405be2:	4423      	add	r3, r4
  405be4:	68e1      	ldr	r1, [r4, #12]
  405be6:	685a      	ldr	r2, [r3, #4]
  405be8:	68a6      	ldr	r6, [r4, #8]
  405bea:	f042 0201 	orr.w	r2, r2, #1
  405bee:	60f1      	str	r1, [r6, #12]
  405bf0:	4628      	mov	r0, r5
  405bf2:	608e      	str	r6, [r1, #8]
  405bf4:	605a      	str	r2, [r3, #4]
  405bf6:	f000 fac3 	bl	406180 <__malloc_unlock>
  405bfa:	3408      	adds	r4, #8
  405bfc:	4620      	mov	r0, r4
  405bfe:	b003      	add	sp, #12
  405c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c04:	4423      	add	r3, r4
  405c06:	4628      	mov	r0, r5
  405c08:	685a      	ldr	r2, [r3, #4]
  405c0a:	f042 0201 	orr.w	r2, r2, #1
  405c0e:	605a      	str	r2, [r3, #4]
  405c10:	f000 fab6 	bl	406180 <__malloc_unlock>
  405c14:	3408      	adds	r4, #8
  405c16:	4620      	mov	r0, r4
  405c18:	b003      	add	sp, #12
  405c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c1e:	68bc      	ldr	r4, [r7, #8]
  405c20:	6863      	ldr	r3, [r4, #4]
  405c22:	f023 0803 	bic.w	r8, r3, #3
  405c26:	45b0      	cmp	r8, r6
  405c28:	d304      	bcc.n	405c34 <_malloc_r+0x200>
  405c2a:	eba8 0306 	sub.w	r3, r8, r6
  405c2e:	2b0f      	cmp	r3, #15
  405c30:	f300 8085 	bgt.w	405d3e <_malloc_r+0x30a>
  405c34:	f8df 9158 	ldr.w	r9, [pc, #344]	; 405d90 <_malloc_r+0x35c>
  405c38:	4b50      	ldr	r3, [pc, #320]	; (405d7c <_malloc_r+0x348>)
  405c3a:	f8d9 2000 	ldr.w	r2, [r9]
  405c3e:	681b      	ldr	r3, [r3, #0]
  405c40:	3201      	adds	r2, #1
  405c42:	4433      	add	r3, r6
  405c44:	eb04 0a08 	add.w	sl, r4, r8
  405c48:	f000 8155 	beq.w	405ef6 <_malloc_r+0x4c2>
  405c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  405c50:	330f      	adds	r3, #15
  405c52:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  405c56:	f02b 0b0f 	bic.w	fp, fp, #15
  405c5a:	4659      	mov	r1, fp
  405c5c:	4628      	mov	r0, r5
  405c5e:	f000 fd8f 	bl	406780 <_sbrk_r>
  405c62:	1c41      	adds	r1, r0, #1
  405c64:	4602      	mov	r2, r0
  405c66:	f000 80fc 	beq.w	405e62 <_malloc_r+0x42e>
  405c6a:	4582      	cmp	sl, r0
  405c6c:	f200 80f7 	bhi.w	405e5e <_malloc_r+0x42a>
  405c70:	4b43      	ldr	r3, [pc, #268]	; (405d80 <_malloc_r+0x34c>)
  405c72:	6819      	ldr	r1, [r3, #0]
  405c74:	4459      	add	r1, fp
  405c76:	6019      	str	r1, [r3, #0]
  405c78:	f000 814d 	beq.w	405f16 <_malloc_r+0x4e2>
  405c7c:	f8d9 0000 	ldr.w	r0, [r9]
  405c80:	3001      	adds	r0, #1
  405c82:	bf1b      	ittet	ne
  405c84:	eba2 0a0a 	subne.w	sl, r2, sl
  405c88:	4451      	addne	r1, sl
  405c8a:	f8c9 2000 	streq.w	r2, [r9]
  405c8e:	6019      	strne	r1, [r3, #0]
  405c90:	f012 0107 	ands.w	r1, r2, #7
  405c94:	f000 8115 	beq.w	405ec2 <_malloc_r+0x48e>
  405c98:	f1c1 0008 	rsb	r0, r1, #8
  405c9c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  405ca0:	4402      	add	r2, r0
  405ca2:	3108      	adds	r1, #8
  405ca4:	eb02 090b 	add.w	r9, r2, fp
  405ca8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  405cac:	eba1 0909 	sub.w	r9, r1, r9
  405cb0:	4649      	mov	r1, r9
  405cb2:	4628      	mov	r0, r5
  405cb4:	9301      	str	r3, [sp, #4]
  405cb6:	9200      	str	r2, [sp, #0]
  405cb8:	f000 fd62 	bl	406780 <_sbrk_r>
  405cbc:	1c43      	adds	r3, r0, #1
  405cbe:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405cc2:	f000 8143 	beq.w	405f4c <_malloc_r+0x518>
  405cc6:	1a80      	subs	r0, r0, r2
  405cc8:	4448      	add	r0, r9
  405cca:	f040 0001 	orr.w	r0, r0, #1
  405cce:	6819      	ldr	r1, [r3, #0]
  405cd0:	60ba      	str	r2, [r7, #8]
  405cd2:	4449      	add	r1, r9
  405cd4:	42bc      	cmp	r4, r7
  405cd6:	6050      	str	r0, [r2, #4]
  405cd8:	6019      	str	r1, [r3, #0]
  405cda:	d017      	beq.n	405d0c <_malloc_r+0x2d8>
  405cdc:	f1b8 0f0f 	cmp.w	r8, #15
  405ce0:	f240 80fb 	bls.w	405eda <_malloc_r+0x4a6>
  405ce4:	6860      	ldr	r0, [r4, #4]
  405ce6:	f1a8 020c 	sub.w	r2, r8, #12
  405cea:	f022 0207 	bic.w	r2, r2, #7
  405cee:	eb04 0e02 	add.w	lr, r4, r2
  405cf2:	f000 0001 	and.w	r0, r0, #1
  405cf6:	f04f 0c05 	mov.w	ip, #5
  405cfa:	4310      	orrs	r0, r2
  405cfc:	2a0f      	cmp	r2, #15
  405cfe:	6060      	str	r0, [r4, #4]
  405d00:	f8ce c004 	str.w	ip, [lr, #4]
  405d04:	f8ce c008 	str.w	ip, [lr, #8]
  405d08:	f200 8117 	bhi.w	405f3a <_malloc_r+0x506>
  405d0c:	4b1d      	ldr	r3, [pc, #116]	; (405d84 <_malloc_r+0x350>)
  405d0e:	68bc      	ldr	r4, [r7, #8]
  405d10:	681a      	ldr	r2, [r3, #0]
  405d12:	4291      	cmp	r1, r2
  405d14:	bf88      	it	hi
  405d16:	6019      	strhi	r1, [r3, #0]
  405d18:	4b1b      	ldr	r3, [pc, #108]	; (405d88 <_malloc_r+0x354>)
  405d1a:	681a      	ldr	r2, [r3, #0]
  405d1c:	4291      	cmp	r1, r2
  405d1e:	6862      	ldr	r2, [r4, #4]
  405d20:	bf88      	it	hi
  405d22:	6019      	strhi	r1, [r3, #0]
  405d24:	f022 0203 	bic.w	r2, r2, #3
  405d28:	4296      	cmp	r6, r2
  405d2a:	eba2 0306 	sub.w	r3, r2, r6
  405d2e:	d801      	bhi.n	405d34 <_malloc_r+0x300>
  405d30:	2b0f      	cmp	r3, #15
  405d32:	dc04      	bgt.n	405d3e <_malloc_r+0x30a>
  405d34:	4628      	mov	r0, r5
  405d36:	f000 fa23 	bl	406180 <__malloc_unlock>
  405d3a:	2400      	movs	r4, #0
  405d3c:	e740      	b.n	405bc0 <_malloc_r+0x18c>
  405d3e:	19a2      	adds	r2, r4, r6
  405d40:	f043 0301 	orr.w	r3, r3, #1
  405d44:	f046 0601 	orr.w	r6, r6, #1
  405d48:	6066      	str	r6, [r4, #4]
  405d4a:	4628      	mov	r0, r5
  405d4c:	60ba      	str	r2, [r7, #8]
  405d4e:	6053      	str	r3, [r2, #4]
  405d50:	f000 fa16 	bl	406180 <__malloc_unlock>
  405d54:	3408      	adds	r4, #8
  405d56:	4620      	mov	r0, r4
  405d58:	b003      	add	sp, #12
  405d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d5e:	2b14      	cmp	r3, #20
  405d60:	d971      	bls.n	405e46 <_malloc_r+0x412>
  405d62:	2b54      	cmp	r3, #84	; 0x54
  405d64:	f200 80a3 	bhi.w	405eae <_malloc_r+0x47a>
  405d68:	0b33      	lsrs	r3, r6, #12
  405d6a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  405d6e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  405d72:	00c3      	lsls	r3, r0, #3
  405d74:	e680      	b.n	405a78 <_malloc_r+0x44>
  405d76:	bf00      	nop
  405d78:	20400454 	.word	0x20400454
  405d7c:	20400ca0 	.word	0x20400ca0
  405d80:	20400c70 	.word	0x20400c70
  405d84:	20400c98 	.word	0x20400c98
  405d88:	20400c9c 	.word	0x20400c9c
  405d8c:	2040045c 	.word	0x2040045c
  405d90:	2040085c 	.word	0x2040085c
  405d94:	0a5a      	lsrs	r2, r3, #9
  405d96:	2a04      	cmp	r2, #4
  405d98:	d95b      	bls.n	405e52 <_malloc_r+0x41e>
  405d9a:	2a14      	cmp	r2, #20
  405d9c:	f200 80ae 	bhi.w	405efc <_malloc_r+0x4c8>
  405da0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  405da4:	00c9      	lsls	r1, r1, #3
  405da6:	325b      	adds	r2, #91	; 0x5b
  405da8:	eb07 0c01 	add.w	ip, r7, r1
  405dac:	5879      	ldr	r1, [r7, r1]
  405dae:	f1ac 0c08 	sub.w	ip, ip, #8
  405db2:	458c      	cmp	ip, r1
  405db4:	f000 8088 	beq.w	405ec8 <_malloc_r+0x494>
  405db8:	684a      	ldr	r2, [r1, #4]
  405dba:	f022 0203 	bic.w	r2, r2, #3
  405dbe:	4293      	cmp	r3, r2
  405dc0:	d273      	bcs.n	405eaa <_malloc_r+0x476>
  405dc2:	6889      	ldr	r1, [r1, #8]
  405dc4:	458c      	cmp	ip, r1
  405dc6:	d1f7      	bne.n	405db8 <_malloc_r+0x384>
  405dc8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  405dcc:	687b      	ldr	r3, [r7, #4]
  405dce:	60e2      	str	r2, [r4, #12]
  405dd0:	f8c4 c008 	str.w	ip, [r4, #8]
  405dd4:	6094      	str	r4, [r2, #8]
  405dd6:	f8cc 400c 	str.w	r4, [ip, #12]
  405dda:	e68f      	b.n	405afc <_malloc_r+0xc8>
  405ddc:	19a1      	adds	r1, r4, r6
  405dde:	f046 0c01 	orr.w	ip, r6, #1
  405de2:	f042 0601 	orr.w	r6, r2, #1
  405de6:	f8c4 c004 	str.w	ip, [r4, #4]
  405dea:	4628      	mov	r0, r5
  405dec:	6179      	str	r1, [r7, #20]
  405dee:	6139      	str	r1, [r7, #16]
  405df0:	f8c1 e00c 	str.w	lr, [r1, #12]
  405df4:	f8c1 e008 	str.w	lr, [r1, #8]
  405df8:	604e      	str	r6, [r1, #4]
  405dfa:	50e2      	str	r2, [r4, r3]
  405dfc:	f000 f9c0 	bl	406180 <__malloc_unlock>
  405e00:	3408      	adds	r4, #8
  405e02:	e6dd      	b.n	405bc0 <_malloc_r+0x18c>
  405e04:	687b      	ldr	r3, [r7, #4]
  405e06:	e679      	b.n	405afc <_malloc_r+0xc8>
  405e08:	f108 0801 	add.w	r8, r8, #1
  405e0c:	f018 0f03 	tst.w	r8, #3
  405e10:	f10c 0c08 	add.w	ip, ip, #8
  405e14:	f47f ae85 	bne.w	405b22 <_malloc_r+0xee>
  405e18:	e02d      	b.n	405e76 <_malloc_r+0x442>
  405e1a:	68dc      	ldr	r4, [r3, #12]
  405e1c:	42a3      	cmp	r3, r4
  405e1e:	bf08      	it	eq
  405e20:	3002      	addeq	r0, #2
  405e22:	f43f ae3e 	beq.w	405aa2 <_malloc_r+0x6e>
  405e26:	e6bb      	b.n	405ba0 <_malloc_r+0x16c>
  405e28:	4419      	add	r1, r3
  405e2a:	461c      	mov	r4, r3
  405e2c:	684a      	ldr	r2, [r1, #4]
  405e2e:	68db      	ldr	r3, [r3, #12]
  405e30:	f854 6f08 	ldr.w	r6, [r4, #8]!
  405e34:	f042 0201 	orr.w	r2, r2, #1
  405e38:	604a      	str	r2, [r1, #4]
  405e3a:	4628      	mov	r0, r5
  405e3c:	60f3      	str	r3, [r6, #12]
  405e3e:	609e      	str	r6, [r3, #8]
  405e40:	f000 f99e 	bl	406180 <__malloc_unlock>
  405e44:	e6bc      	b.n	405bc0 <_malloc_r+0x18c>
  405e46:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  405e4a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  405e4e:	00c3      	lsls	r3, r0, #3
  405e50:	e612      	b.n	405a78 <_malloc_r+0x44>
  405e52:	099a      	lsrs	r2, r3, #6
  405e54:	f102 0139 	add.w	r1, r2, #57	; 0x39
  405e58:	00c9      	lsls	r1, r1, #3
  405e5a:	3238      	adds	r2, #56	; 0x38
  405e5c:	e7a4      	b.n	405da8 <_malloc_r+0x374>
  405e5e:	42bc      	cmp	r4, r7
  405e60:	d054      	beq.n	405f0c <_malloc_r+0x4d8>
  405e62:	68bc      	ldr	r4, [r7, #8]
  405e64:	6862      	ldr	r2, [r4, #4]
  405e66:	f022 0203 	bic.w	r2, r2, #3
  405e6a:	e75d      	b.n	405d28 <_malloc_r+0x2f4>
  405e6c:	f859 3908 	ldr.w	r3, [r9], #-8
  405e70:	4599      	cmp	r9, r3
  405e72:	f040 8086 	bne.w	405f82 <_malloc_r+0x54e>
  405e76:	f010 0f03 	tst.w	r0, #3
  405e7a:	f100 30ff 	add.w	r0, r0, #4294967295
  405e7e:	d1f5      	bne.n	405e6c <_malloc_r+0x438>
  405e80:	687b      	ldr	r3, [r7, #4]
  405e82:	ea23 0304 	bic.w	r3, r3, r4
  405e86:	607b      	str	r3, [r7, #4]
  405e88:	0064      	lsls	r4, r4, #1
  405e8a:	429c      	cmp	r4, r3
  405e8c:	f63f aec7 	bhi.w	405c1e <_malloc_r+0x1ea>
  405e90:	2c00      	cmp	r4, #0
  405e92:	f43f aec4 	beq.w	405c1e <_malloc_r+0x1ea>
  405e96:	421c      	tst	r4, r3
  405e98:	4640      	mov	r0, r8
  405e9a:	f47f ae3e 	bne.w	405b1a <_malloc_r+0xe6>
  405e9e:	0064      	lsls	r4, r4, #1
  405ea0:	421c      	tst	r4, r3
  405ea2:	f100 0004 	add.w	r0, r0, #4
  405ea6:	d0fa      	beq.n	405e9e <_malloc_r+0x46a>
  405ea8:	e637      	b.n	405b1a <_malloc_r+0xe6>
  405eaa:	468c      	mov	ip, r1
  405eac:	e78c      	b.n	405dc8 <_malloc_r+0x394>
  405eae:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  405eb2:	d815      	bhi.n	405ee0 <_malloc_r+0x4ac>
  405eb4:	0bf3      	lsrs	r3, r6, #15
  405eb6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  405eba:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  405ebe:	00c3      	lsls	r3, r0, #3
  405ec0:	e5da      	b.n	405a78 <_malloc_r+0x44>
  405ec2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  405ec6:	e6ed      	b.n	405ca4 <_malloc_r+0x270>
  405ec8:	687b      	ldr	r3, [r7, #4]
  405eca:	1092      	asrs	r2, r2, #2
  405ecc:	2101      	movs	r1, #1
  405ece:	fa01 f202 	lsl.w	r2, r1, r2
  405ed2:	4313      	orrs	r3, r2
  405ed4:	607b      	str	r3, [r7, #4]
  405ed6:	4662      	mov	r2, ip
  405ed8:	e779      	b.n	405dce <_malloc_r+0x39a>
  405eda:	2301      	movs	r3, #1
  405edc:	6053      	str	r3, [r2, #4]
  405ede:	e729      	b.n	405d34 <_malloc_r+0x300>
  405ee0:	f240 5254 	movw	r2, #1364	; 0x554
  405ee4:	4293      	cmp	r3, r2
  405ee6:	d822      	bhi.n	405f2e <_malloc_r+0x4fa>
  405ee8:	0cb3      	lsrs	r3, r6, #18
  405eea:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  405eee:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  405ef2:	00c3      	lsls	r3, r0, #3
  405ef4:	e5c0      	b.n	405a78 <_malloc_r+0x44>
  405ef6:	f103 0b10 	add.w	fp, r3, #16
  405efa:	e6ae      	b.n	405c5a <_malloc_r+0x226>
  405efc:	2a54      	cmp	r2, #84	; 0x54
  405efe:	d829      	bhi.n	405f54 <_malloc_r+0x520>
  405f00:	0b1a      	lsrs	r2, r3, #12
  405f02:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  405f06:	00c9      	lsls	r1, r1, #3
  405f08:	326e      	adds	r2, #110	; 0x6e
  405f0a:	e74d      	b.n	405da8 <_malloc_r+0x374>
  405f0c:	4b20      	ldr	r3, [pc, #128]	; (405f90 <_malloc_r+0x55c>)
  405f0e:	6819      	ldr	r1, [r3, #0]
  405f10:	4459      	add	r1, fp
  405f12:	6019      	str	r1, [r3, #0]
  405f14:	e6b2      	b.n	405c7c <_malloc_r+0x248>
  405f16:	f3ca 000b 	ubfx	r0, sl, #0, #12
  405f1a:	2800      	cmp	r0, #0
  405f1c:	f47f aeae 	bne.w	405c7c <_malloc_r+0x248>
  405f20:	eb08 030b 	add.w	r3, r8, fp
  405f24:	68ba      	ldr	r2, [r7, #8]
  405f26:	f043 0301 	orr.w	r3, r3, #1
  405f2a:	6053      	str	r3, [r2, #4]
  405f2c:	e6ee      	b.n	405d0c <_malloc_r+0x2d8>
  405f2e:	207f      	movs	r0, #127	; 0x7f
  405f30:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  405f34:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  405f38:	e59e      	b.n	405a78 <_malloc_r+0x44>
  405f3a:	f104 0108 	add.w	r1, r4, #8
  405f3e:	4628      	mov	r0, r5
  405f40:	9300      	str	r3, [sp, #0]
  405f42:	f000 fe0b 	bl	406b5c <_free_r>
  405f46:	9b00      	ldr	r3, [sp, #0]
  405f48:	6819      	ldr	r1, [r3, #0]
  405f4a:	e6df      	b.n	405d0c <_malloc_r+0x2d8>
  405f4c:	2001      	movs	r0, #1
  405f4e:	f04f 0900 	mov.w	r9, #0
  405f52:	e6bc      	b.n	405cce <_malloc_r+0x29a>
  405f54:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405f58:	d805      	bhi.n	405f66 <_malloc_r+0x532>
  405f5a:	0bda      	lsrs	r2, r3, #15
  405f5c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  405f60:	00c9      	lsls	r1, r1, #3
  405f62:	3277      	adds	r2, #119	; 0x77
  405f64:	e720      	b.n	405da8 <_malloc_r+0x374>
  405f66:	f240 5154 	movw	r1, #1364	; 0x554
  405f6a:	428a      	cmp	r2, r1
  405f6c:	d805      	bhi.n	405f7a <_malloc_r+0x546>
  405f6e:	0c9a      	lsrs	r2, r3, #18
  405f70:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  405f74:	00c9      	lsls	r1, r1, #3
  405f76:	327c      	adds	r2, #124	; 0x7c
  405f78:	e716      	b.n	405da8 <_malloc_r+0x374>
  405f7a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  405f7e:	227e      	movs	r2, #126	; 0x7e
  405f80:	e712      	b.n	405da8 <_malloc_r+0x374>
  405f82:	687b      	ldr	r3, [r7, #4]
  405f84:	e780      	b.n	405e88 <_malloc_r+0x454>
  405f86:	08f0      	lsrs	r0, r6, #3
  405f88:	f106 0308 	add.w	r3, r6, #8
  405f8c:	e600      	b.n	405b90 <_malloc_r+0x15c>
  405f8e:	bf00      	nop
  405f90:	20400c70 	.word	0x20400c70
	...

00405fa0 <memchr>:
  405fa0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405fa4:	2a10      	cmp	r2, #16
  405fa6:	db2b      	blt.n	406000 <memchr+0x60>
  405fa8:	f010 0f07 	tst.w	r0, #7
  405fac:	d008      	beq.n	405fc0 <memchr+0x20>
  405fae:	f810 3b01 	ldrb.w	r3, [r0], #1
  405fb2:	3a01      	subs	r2, #1
  405fb4:	428b      	cmp	r3, r1
  405fb6:	d02d      	beq.n	406014 <memchr+0x74>
  405fb8:	f010 0f07 	tst.w	r0, #7
  405fbc:	b342      	cbz	r2, 406010 <memchr+0x70>
  405fbe:	d1f6      	bne.n	405fae <memchr+0xe>
  405fc0:	b4f0      	push	{r4, r5, r6, r7}
  405fc2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405fc6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405fca:	f022 0407 	bic.w	r4, r2, #7
  405fce:	f07f 0700 	mvns.w	r7, #0
  405fd2:	2300      	movs	r3, #0
  405fd4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405fd8:	3c08      	subs	r4, #8
  405fda:	ea85 0501 	eor.w	r5, r5, r1
  405fde:	ea86 0601 	eor.w	r6, r6, r1
  405fe2:	fa85 f547 	uadd8	r5, r5, r7
  405fe6:	faa3 f587 	sel	r5, r3, r7
  405fea:	fa86 f647 	uadd8	r6, r6, r7
  405fee:	faa5 f687 	sel	r6, r5, r7
  405ff2:	b98e      	cbnz	r6, 406018 <memchr+0x78>
  405ff4:	d1ee      	bne.n	405fd4 <memchr+0x34>
  405ff6:	bcf0      	pop	{r4, r5, r6, r7}
  405ff8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405ffc:	f002 0207 	and.w	r2, r2, #7
  406000:	b132      	cbz	r2, 406010 <memchr+0x70>
  406002:	f810 3b01 	ldrb.w	r3, [r0], #1
  406006:	3a01      	subs	r2, #1
  406008:	ea83 0301 	eor.w	r3, r3, r1
  40600c:	b113      	cbz	r3, 406014 <memchr+0x74>
  40600e:	d1f8      	bne.n	406002 <memchr+0x62>
  406010:	2000      	movs	r0, #0
  406012:	4770      	bx	lr
  406014:	3801      	subs	r0, #1
  406016:	4770      	bx	lr
  406018:	2d00      	cmp	r5, #0
  40601a:	bf06      	itte	eq
  40601c:	4635      	moveq	r5, r6
  40601e:	3803      	subeq	r0, #3
  406020:	3807      	subne	r0, #7
  406022:	f015 0f01 	tst.w	r5, #1
  406026:	d107      	bne.n	406038 <memchr+0x98>
  406028:	3001      	adds	r0, #1
  40602a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40602e:	bf02      	ittt	eq
  406030:	3001      	addeq	r0, #1
  406032:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406036:	3001      	addeq	r0, #1
  406038:	bcf0      	pop	{r4, r5, r6, r7}
  40603a:	3801      	subs	r0, #1
  40603c:	4770      	bx	lr
  40603e:	bf00      	nop

00406040 <memcpy>:
  406040:	4684      	mov	ip, r0
  406042:	ea41 0300 	orr.w	r3, r1, r0
  406046:	f013 0303 	ands.w	r3, r3, #3
  40604a:	d16d      	bne.n	406128 <memcpy+0xe8>
  40604c:	3a40      	subs	r2, #64	; 0x40
  40604e:	d341      	bcc.n	4060d4 <memcpy+0x94>
  406050:	f851 3b04 	ldr.w	r3, [r1], #4
  406054:	f840 3b04 	str.w	r3, [r0], #4
  406058:	f851 3b04 	ldr.w	r3, [r1], #4
  40605c:	f840 3b04 	str.w	r3, [r0], #4
  406060:	f851 3b04 	ldr.w	r3, [r1], #4
  406064:	f840 3b04 	str.w	r3, [r0], #4
  406068:	f851 3b04 	ldr.w	r3, [r1], #4
  40606c:	f840 3b04 	str.w	r3, [r0], #4
  406070:	f851 3b04 	ldr.w	r3, [r1], #4
  406074:	f840 3b04 	str.w	r3, [r0], #4
  406078:	f851 3b04 	ldr.w	r3, [r1], #4
  40607c:	f840 3b04 	str.w	r3, [r0], #4
  406080:	f851 3b04 	ldr.w	r3, [r1], #4
  406084:	f840 3b04 	str.w	r3, [r0], #4
  406088:	f851 3b04 	ldr.w	r3, [r1], #4
  40608c:	f840 3b04 	str.w	r3, [r0], #4
  406090:	f851 3b04 	ldr.w	r3, [r1], #4
  406094:	f840 3b04 	str.w	r3, [r0], #4
  406098:	f851 3b04 	ldr.w	r3, [r1], #4
  40609c:	f840 3b04 	str.w	r3, [r0], #4
  4060a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4060a4:	f840 3b04 	str.w	r3, [r0], #4
  4060a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4060ac:	f840 3b04 	str.w	r3, [r0], #4
  4060b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4060b4:	f840 3b04 	str.w	r3, [r0], #4
  4060b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4060bc:	f840 3b04 	str.w	r3, [r0], #4
  4060c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4060c4:	f840 3b04 	str.w	r3, [r0], #4
  4060c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4060cc:	f840 3b04 	str.w	r3, [r0], #4
  4060d0:	3a40      	subs	r2, #64	; 0x40
  4060d2:	d2bd      	bcs.n	406050 <memcpy+0x10>
  4060d4:	3230      	adds	r2, #48	; 0x30
  4060d6:	d311      	bcc.n	4060fc <memcpy+0xbc>
  4060d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4060dc:	f840 3b04 	str.w	r3, [r0], #4
  4060e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4060e4:	f840 3b04 	str.w	r3, [r0], #4
  4060e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4060ec:	f840 3b04 	str.w	r3, [r0], #4
  4060f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4060f4:	f840 3b04 	str.w	r3, [r0], #4
  4060f8:	3a10      	subs	r2, #16
  4060fa:	d2ed      	bcs.n	4060d8 <memcpy+0x98>
  4060fc:	320c      	adds	r2, #12
  4060fe:	d305      	bcc.n	40610c <memcpy+0xcc>
  406100:	f851 3b04 	ldr.w	r3, [r1], #4
  406104:	f840 3b04 	str.w	r3, [r0], #4
  406108:	3a04      	subs	r2, #4
  40610a:	d2f9      	bcs.n	406100 <memcpy+0xc0>
  40610c:	3204      	adds	r2, #4
  40610e:	d008      	beq.n	406122 <memcpy+0xe2>
  406110:	07d2      	lsls	r2, r2, #31
  406112:	bf1c      	itt	ne
  406114:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406118:	f800 3b01 	strbne.w	r3, [r0], #1
  40611c:	d301      	bcc.n	406122 <memcpy+0xe2>
  40611e:	880b      	ldrh	r3, [r1, #0]
  406120:	8003      	strh	r3, [r0, #0]
  406122:	4660      	mov	r0, ip
  406124:	4770      	bx	lr
  406126:	bf00      	nop
  406128:	2a08      	cmp	r2, #8
  40612a:	d313      	bcc.n	406154 <memcpy+0x114>
  40612c:	078b      	lsls	r3, r1, #30
  40612e:	d08d      	beq.n	40604c <memcpy+0xc>
  406130:	f010 0303 	ands.w	r3, r0, #3
  406134:	d08a      	beq.n	40604c <memcpy+0xc>
  406136:	f1c3 0304 	rsb	r3, r3, #4
  40613a:	1ad2      	subs	r2, r2, r3
  40613c:	07db      	lsls	r3, r3, #31
  40613e:	bf1c      	itt	ne
  406140:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406144:	f800 3b01 	strbne.w	r3, [r0], #1
  406148:	d380      	bcc.n	40604c <memcpy+0xc>
  40614a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40614e:	f820 3b02 	strh.w	r3, [r0], #2
  406152:	e77b      	b.n	40604c <memcpy+0xc>
  406154:	3a04      	subs	r2, #4
  406156:	d3d9      	bcc.n	40610c <memcpy+0xcc>
  406158:	3a01      	subs	r2, #1
  40615a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40615e:	f800 3b01 	strb.w	r3, [r0], #1
  406162:	d2f9      	bcs.n	406158 <memcpy+0x118>
  406164:	780b      	ldrb	r3, [r1, #0]
  406166:	7003      	strb	r3, [r0, #0]
  406168:	784b      	ldrb	r3, [r1, #1]
  40616a:	7043      	strb	r3, [r0, #1]
  40616c:	788b      	ldrb	r3, [r1, #2]
  40616e:	7083      	strb	r3, [r0, #2]
  406170:	4660      	mov	r0, ip
  406172:	4770      	bx	lr

00406174 <__malloc_lock>:
  406174:	4801      	ldr	r0, [pc, #4]	; (40617c <__malloc_lock+0x8>)
  406176:	f7ff bc59 	b.w	405a2c <__retarget_lock_acquire_recursive>
  40617a:	bf00      	nop
  40617c:	20400cb4 	.word	0x20400cb4

00406180 <__malloc_unlock>:
  406180:	4801      	ldr	r0, [pc, #4]	; (406188 <__malloc_unlock+0x8>)
  406182:	f7ff bc55 	b.w	405a30 <__retarget_lock_release_recursive>
  406186:	bf00      	nop
  406188:	20400cb4 	.word	0x20400cb4

0040618c <_Balloc>:
  40618c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40618e:	b570      	push	{r4, r5, r6, lr}
  406190:	4605      	mov	r5, r0
  406192:	460c      	mov	r4, r1
  406194:	b14b      	cbz	r3, 4061aa <_Balloc+0x1e>
  406196:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40619a:	b180      	cbz	r0, 4061be <_Balloc+0x32>
  40619c:	6802      	ldr	r2, [r0, #0]
  40619e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4061a2:	2300      	movs	r3, #0
  4061a4:	6103      	str	r3, [r0, #16]
  4061a6:	60c3      	str	r3, [r0, #12]
  4061a8:	bd70      	pop	{r4, r5, r6, pc}
  4061aa:	2221      	movs	r2, #33	; 0x21
  4061ac:	2104      	movs	r1, #4
  4061ae:	f000 fc55 	bl	406a5c <_calloc_r>
  4061b2:	64e8      	str	r0, [r5, #76]	; 0x4c
  4061b4:	4603      	mov	r3, r0
  4061b6:	2800      	cmp	r0, #0
  4061b8:	d1ed      	bne.n	406196 <_Balloc+0xa>
  4061ba:	2000      	movs	r0, #0
  4061bc:	bd70      	pop	{r4, r5, r6, pc}
  4061be:	2101      	movs	r1, #1
  4061c0:	fa01 f604 	lsl.w	r6, r1, r4
  4061c4:	1d72      	adds	r2, r6, #5
  4061c6:	4628      	mov	r0, r5
  4061c8:	0092      	lsls	r2, r2, #2
  4061ca:	f000 fc47 	bl	406a5c <_calloc_r>
  4061ce:	2800      	cmp	r0, #0
  4061d0:	d0f3      	beq.n	4061ba <_Balloc+0x2e>
  4061d2:	6044      	str	r4, [r0, #4]
  4061d4:	6086      	str	r6, [r0, #8]
  4061d6:	e7e4      	b.n	4061a2 <_Balloc+0x16>

004061d8 <_Bfree>:
  4061d8:	b131      	cbz	r1, 4061e8 <_Bfree+0x10>
  4061da:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4061dc:	684a      	ldr	r2, [r1, #4]
  4061de:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4061e2:	6008      	str	r0, [r1, #0]
  4061e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4061e8:	4770      	bx	lr
  4061ea:	bf00      	nop

004061ec <__multadd>:
  4061ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  4061ee:	690c      	ldr	r4, [r1, #16]
  4061f0:	b083      	sub	sp, #12
  4061f2:	460d      	mov	r5, r1
  4061f4:	4606      	mov	r6, r0
  4061f6:	f101 0e14 	add.w	lr, r1, #20
  4061fa:	2700      	movs	r7, #0
  4061fc:	f8de 0000 	ldr.w	r0, [lr]
  406200:	b281      	uxth	r1, r0
  406202:	fb02 3301 	mla	r3, r2, r1, r3
  406206:	0c01      	lsrs	r1, r0, #16
  406208:	0c18      	lsrs	r0, r3, #16
  40620a:	fb02 0101 	mla	r1, r2, r1, r0
  40620e:	b29b      	uxth	r3, r3
  406210:	3701      	adds	r7, #1
  406212:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  406216:	42bc      	cmp	r4, r7
  406218:	f84e 3b04 	str.w	r3, [lr], #4
  40621c:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406220:	dcec      	bgt.n	4061fc <__multadd+0x10>
  406222:	b13b      	cbz	r3, 406234 <__multadd+0x48>
  406224:	68aa      	ldr	r2, [r5, #8]
  406226:	4294      	cmp	r4, r2
  406228:	da07      	bge.n	40623a <__multadd+0x4e>
  40622a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40622e:	3401      	adds	r4, #1
  406230:	6153      	str	r3, [r2, #20]
  406232:	612c      	str	r4, [r5, #16]
  406234:	4628      	mov	r0, r5
  406236:	b003      	add	sp, #12
  406238:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40623a:	6869      	ldr	r1, [r5, #4]
  40623c:	9301      	str	r3, [sp, #4]
  40623e:	3101      	adds	r1, #1
  406240:	4630      	mov	r0, r6
  406242:	f7ff ffa3 	bl	40618c <_Balloc>
  406246:	692a      	ldr	r2, [r5, #16]
  406248:	3202      	adds	r2, #2
  40624a:	f105 010c 	add.w	r1, r5, #12
  40624e:	4607      	mov	r7, r0
  406250:	0092      	lsls	r2, r2, #2
  406252:	300c      	adds	r0, #12
  406254:	f7ff fef4 	bl	406040 <memcpy>
  406258:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40625a:	6869      	ldr	r1, [r5, #4]
  40625c:	9b01      	ldr	r3, [sp, #4]
  40625e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406262:	6028      	str	r0, [r5, #0]
  406264:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  406268:	463d      	mov	r5, r7
  40626a:	e7de      	b.n	40622a <__multadd+0x3e>

0040626c <__hi0bits>:
  40626c:	0c02      	lsrs	r2, r0, #16
  40626e:	0412      	lsls	r2, r2, #16
  406270:	4603      	mov	r3, r0
  406272:	b9b2      	cbnz	r2, 4062a2 <__hi0bits+0x36>
  406274:	0403      	lsls	r3, r0, #16
  406276:	2010      	movs	r0, #16
  406278:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40627c:	bf04      	itt	eq
  40627e:	021b      	lsleq	r3, r3, #8
  406280:	3008      	addeq	r0, #8
  406282:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  406286:	bf04      	itt	eq
  406288:	011b      	lsleq	r3, r3, #4
  40628a:	3004      	addeq	r0, #4
  40628c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  406290:	bf04      	itt	eq
  406292:	009b      	lsleq	r3, r3, #2
  406294:	3002      	addeq	r0, #2
  406296:	2b00      	cmp	r3, #0
  406298:	db02      	blt.n	4062a0 <__hi0bits+0x34>
  40629a:	005b      	lsls	r3, r3, #1
  40629c:	d403      	bmi.n	4062a6 <__hi0bits+0x3a>
  40629e:	2020      	movs	r0, #32
  4062a0:	4770      	bx	lr
  4062a2:	2000      	movs	r0, #0
  4062a4:	e7e8      	b.n	406278 <__hi0bits+0xc>
  4062a6:	3001      	adds	r0, #1
  4062a8:	4770      	bx	lr
  4062aa:	bf00      	nop

004062ac <__lo0bits>:
  4062ac:	6803      	ldr	r3, [r0, #0]
  4062ae:	f013 0207 	ands.w	r2, r3, #7
  4062b2:	4601      	mov	r1, r0
  4062b4:	d007      	beq.n	4062c6 <__lo0bits+0x1a>
  4062b6:	07da      	lsls	r2, r3, #31
  4062b8:	d421      	bmi.n	4062fe <__lo0bits+0x52>
  4062ba:	0798      	lsls	r0, r3, #30
  4062bc:	d421      	bmi.n	406302 <__lo0bits+0x56>
  4062be:	089b      	lsrs	r3, r3, #2
  4062c0:	600b      	str	r3, [r1, #0]
  4062c2:	2002      	movs	r0, #2
  4062c4:	4770      	bx	lr
  4062c6:	b298      	uxth	r0, r3
  4062c8:	b198      	cbz	r0, 4062f2 <__lo0bits+0x46>
  4062ca:	4610      	mov	r0, r2
  4062cc:	f013 0fff 	tst.w	r3, #255	; 0xff
  4062d0:	bf04      	itt	eq
  4062d2:	0a1b      	lsreq	r3, r3, #8
  4062d4:	3008      	addeq	r0, #8
  4062d6:	071a      	lsls	r2, r3, #28
  4062d8:	bf04      	itt	eq
  4062da:	091b      	lsreq	r3, r3, #4
  4062dc:	3004      	addeq	r0, #4
  4062de:	079a      	lsls	r2, r3, #30
  4062e0:	bf04      	itt	eq
  4062e2:	089b      	lsreq	r3, r3, #2
  4062e4:	3002      	addeq	r0, #2
  4062e6:	07da      	lsls	r2, r3, #31
  4062e8:	d407      	bmi.n	4062fa <__lo0bits+0x4e>
  4062ea:	085b      	lsrs	r3, r3, #1
  4062ec:	d104      	bne.n	4062f8 <__lo0bits+0x4c>
  4062ee:	2020      	movs	r0, #32
  4062f0:	4770      	bx	lr
  4062f2:	0c1b      	lsrs	r3, r3, #16
  4062f4:	2010      	movs	r0, #16
  4062f6:	e7e9      	b.n	4062cc <__lo0bits+0x20>
  4062f8:	3001      	adds	r0, #1
  4062fa:	600b      	str	r3, [r1, #0]
  4062fc:	4770      	bx	lr
  4062fe:	2000      	movs	r0, #0
  406300:	4770      	bx	lr
  406302:	085b      	lsrs	r3, r3, #1
  406304:	600b      	str	r3, [r1, #0]
  406306:	2001      	movs	r0, #1
  406308:	4770      	bx	lr
  40630a:	bf00      	nop

0040630c <__i2b>:
  40630c:	b510      	push	{r4, lr}
  40630e:	460c      	mov	r4, r1
  406310:	2101      	movs	r1, #1
  406312:	f7ff ff3b 	bl	40618c <_Balloc>
  406316:	2201      	movs	r2, #1
  406318:	6144      	str	r4, [r0, #20]
  40631a:	6102      	str	r2, [r0, #16]
  40631c:	bd10      	pop	{r4, pc}
  40631e:	bf00      	nop

00406320 <__multiply>:
  406320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406324:	690c      	ldr	r4, [r1, #16]
  406326:	6915      	ldr	r5, [r2, #16]
  406328:	42ac      	cmp	r4, r5
  40632a:	b083      	sub	sp, #12
  40632c:	468b      	mov	fp, r1
  40632e:	4616      	mov	r6, r2
  406330:	da04      	bge.n	40633c <__multiply+0x1c>
  406332:	4622      	mov	r2, r4
  406334:	46b3      	mov	fp, r6
  406336:	462c      	mov	r4, r5
  406338:	460e      	mov	r6, r1
  40633a:	4615      	mov	r5, r2
  40633c:	f8db 3008 	ldr.w	r3, [fp, #8]
  406340:	f8db 1004 	ldr.w	r1, [fp, #4]
  406344:	eb04 0805 	add.w	r8, r4, r5
  406348:	4598      	cmp	r8, r3
  40634a:	bfc8      	it	gt
  40634c:	3101      	addgt	r1, #1
  40634e:	f7ff ff1d 	bl	40618c <_Balloc>
  406352:	f100 0914 	add.w	r9, r0, #20
  406356:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40635a:	45d1      	cmp	r9, sl
  40635c:	9000      	str	r0, [sp, #0]
  40635e:	d205      	bcs.n	40636c <__multiply+0x4c>
  406360:	464b      	mov	r3, r9
  406362:	2100      	movs	r1, #0
  406364:	f843 1b04 	str.w	r1, [r3], #4
  406368:	459a      	cmp	sl, r3
  40636a:	d8fb      	bhi.n	406364 <__multiply+0x44>
  40636c:	f106 0c14 	add.w	ip, r6, #20
  406370:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  406374:	f10b 0b14 	add.w	fp, fp, #20
  406378:	459c      	cmp	ip, r3
  40637a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40637e:	d24c      	bcs.n	40641a <__multiply+0xfa>
  406380:	f8cd a004 	str.w	sl, [sp, #4]
  406384:	469a      	mov	sl, r3
  406386:	f8dc 5000 	ldr.w	r5, [ip]
  40638a:	b2af      	uxth	r7, r5
  40638c:	b1ef      	cbz	r7, 4063ca <__multiply+0xaa>
  40638e:	2100      	movs	r1, #0
  406390:	464d      	mov	r5, r9
  406392:	465e      	mov	r6, fp
  406394:	460c      	mov	r4, r1
  406396:	f856 2b04 	ldr.w	r2, [r6], #4
  40639a:	6828      	ldr	r0, [r5, #0]
  40639c:	b293      	uxth	r3, r2
  40639e:	b281      	uxth	r1, r0
  4063a0:	fb07 1303 	mla	r3, r7, r3, r1
  4063a4:	0c12      	lsrs	r2, r2, #16
  4063a6:	0c01      	lsrs	r1, r0, #16
  4063a8:	4423      	add	r3, r4
  4063aa:	fb07 1102 	mla	r1, r7, r2, r1
  4063ae:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4063b2:	b29b      	uxth	r3, r3
  4063b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4063b8:	45b6      	cmp	lr, r6
  4063ba:	f845 3b04 	str.w	r3, [r5], #4
  4063be:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4063c2:	d8e8      	bhi.n	406396 <__multiply+0x76>
  4063c4:	602c      	str	r4, [r5, #0]
  4063c6:	f8dc 5000 	ldr.w	r5, [ip]
  4063ca:	0c2d      	lsrs	r5, r5, #16
  4063cc:	d01d      	beq.n	40640a <__multiply+0xea>
  4063ce:	f8d9 3000 	ldr.w	r3, [r9]
  4063d2:	4648      	mov	r0, r9
  4063d4:	461c      	mov	r4, r3
  4063d6:	4659      	mov	r1, fp
  4063d8:	2200      	movs	r2, #0
  4063da:	880e      	ldrh	r6, [r1, #0]
  4063dc:	0c24      	lsrs	r4, r4, #16
  4063de:	fb05 4406 	mla	r4, r5, r6, r4
  4063e2:	4422      	add	r2, r4
  4063e4:	b29b      	uxth	r3, r3
  4063e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4063ea:	f840 3b04 	str.w	r3, [r0], #4
  4063ee:	f851 3b04 	ldr.w	r3, [r1], #4
  4063f2:	6804      	ldr	r4, [r0, #0]
  4063f4:	0c1b      	lsrs	r3, r3, #16
  4063f6:	b2a6      	uxth	r6, r4
  4063f8:	fb05 6303 	mla	r3, r5, r3, r6
  4063fc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406400:	458e      	cmp	lr, r1
  406402:	ea4f 4213 	mov.w	r2, r3, lsr #16
  406406:	d8e8      	bhi.n	4063da <__multiply+0xba>
  406408:	6003      	str	r3, [r0, #0]
  40640a:	f10c 0c04 	add.w	ip, ip, #4
  40640e:	45e2      	cmp	sl, ip
  406410:	f109 0904 	add.w	r9, r9, #4
  406414:	d8b7      	bhi.n	406386 <__multiply+0x66>
  406416:	f8dd a004 	ldr.w	sl, [sp, #4]
  40641a:	f1b8 0f00 	cmp.w	r8, #0
  40641e:	dd0b      	ble.n	406438 <__multiply+0x118>
  406420:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  406424:	f1aa 0a04 	sub.w	sl, sl, #4
  406428:	b11b      	cbz	r3, 406432 <__multiply+0x112>
  40642a:	e005      	b.n	406438 <__multiply+0x118>
  40642c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  406430:	b913      	cbnz	r3, 406438 <__multiply+0x118>
  406432:	f1b8 0801 	subs.w	r8, r8, #1
  406436:	d1f9      	bne.n	40642c <__multiply+0x10c>
  406438:	9800      	ldr	r0, [sp, #0]
  40643a:	f8c0 8010 	str.w	r8, [r0, #16]
  40643e:	b003      	add	sp, #12
  406440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406444 <__pow5mult>:
  406444:	f012 0303 	ands.w	r3, r2, #3
  406448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40644c:	4614      	mov	r4, r2
  40644e:	4607      	mov	r7, r0
  406450:	d12e      	bne.n	4064b0 <__pow5mult+0x6c>
  406452:	460d      	mov	r5, r1
  406454:	10a4      	asrs	r4, r4, #2
  406456:	d01c      	beq.n	406492 <__pow5mult+0x4e>
  406458:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40645a:	b396      	cbz	r6, 4064c2 <__pow5mult+0x7e>
  40645c:	07e3      	lsls	r3, r4, #31
  40645e:	f04f 0800 	mov.w	r8, #0
  406462:	d406      	bmi.n	406472 <__pow5mult+0x2e>
  406464:	1064      	asrs	r4, r4, #1
  406466:	d014      	beq.n	406492 <__pow5mult+0x4e>
  406468:	6830      	ldr	r0, [r6, #0]
  40646a:	b1a8      	cbz	r0, 406498 <__pow5mult+0x54>
  40646c:	4606      	mov	r6, r0
  40646e:	07e3      	lsls	r3, r4, #31
  406470:	d5f8      	bpl.n	406464 <__pow5mult+0x20>
  406472:	4632      	mov	r2, r6
  406474:	4629      	mov	r1, r5
  406476:	4638      	mov	r0, r7
  406478:	f7ff ff52 	bl	406320 <__multiply>
  40647c:	b1b5      	cbz	r5, 4064ac <__pow5mult+0x68>
  40647e:	686a      	ldr	r2, [r5, #4]
  406480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406482:	1064      	asrs	r4, r4, #1
  406484:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406488:	6029      	str	r1, [r5, #0]
  40648a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40648e:	4605      	mov	r5, r0
  406490:	d1ea      	bne.n	406468 <__pow5mult+0x24>
  406492:	4628      	mov	r0, r5
  406494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406498:	4632      	mov	r2, r6
  40649a:	4631      	mov	r1, r6
  40649c:	4638      	mov	r0, r7
  40649e:	f7ff ff3f 	bl	406320 <__multiply>
  4064a2:	6030      	str	r0, [r6, #0]
  4064a4:	f8c0 8000 	str.w	r8, [r0]
  4064a8:	4606      	mov	r6, r0
  4064aa:	e7e0      	b.n	40646e <__pow5mult+0x2a>
  4064ac:	4605      	mov	r5, r0
  4064ae:	e7d9      	b.n	406464 <__pow5mult+0x20>
  4064b0:	1e5a      	subs	r2, r3, #1
  4064b2:	4d0b      	ldr	r5, [pc, #44]	; (4064e0 <__pow5mult+0x9c>)
  4064b4:	2300      	movs	r3, #0
  4064b6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4064ba:	f7ff fe97 	bl	4061ec <__multadd>
  4064be:	4605      	mov	r5, r0
  4064c0:	e7c8      	b.n	406454 <__pow5mult+0x10>
  4064c2:	2101      	movs	r1, #1
  4064c4:	4638      	mov	r0, r7
  4064c6:	f7ff fe61 	bl	40618c <_Balloc>
  4064ca:	f240 2171 	movw	r1, #625	; 0x271
  4064ce:	2201      	movs	r2, #1
  4064d0:	2300      	movs	r3, #0
  4064d2:	6141      	str	r1, [r0, #20]
  4064d4:	6102      	str	r2, [r0, #16]
  4064d6:	4606      	mov	r6, r0
  4064d8:	64b8      	str	r0, [r7, #72]	; 0x48
  4064da:	6003      	str	r3, [r0, #0]
  4064dc:	e7be      	b.n	40645c <__pow5mult+0x18>
  4064de:	bf00      	nop
  4064e0:	004086c8 	.word	0x004086c8

004064e4 <__lshift>:
  4064e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4064e8:	4691      	mov	r9, r2
  4064ea:	690a      	ldr	r2, [r1, #16]
  4064ec:	688b      	ldr	r3, [r1, #8]
  4064ee:	ea4f 1469 	mov.w	r4, r9, asr #5
  4064f2:	eb04 0802 	add.w	r8, r4, r2
  4064f6:	f108 0501 	add.w	r5, r8, #1
  4064fa:	429d      	cmp	r5, r3
  4064fc:	460e      	mov	r6, r1
  4064fe:	4607      	mov	r7, r0
  406500:	6849      	ldr	r1, [r1, #4]
  406502:	dd04      	ble.n	40650e <__lshift+0x2a>
  406504:	005b      	lsls	r3, r3, #1
  406506:	429d      	cmp	r5, r3
  406508:	f101 0101 	add.w	r1, r1, #1
  40650c:	dcfa      	bgt.n	406504 <__lshift+0x20>
  40650e:	4638      	mov	r0, r7
  406510:	f7ff fe3c 	bl	40618c <_Balloc>
  406514:	2c00      	cmp	r4, #0
  406516:	f100 0314 	add.w	r3, r0, #20
  40651a:	dd06      	ble.n	40652a <__lshift+0x46>
  40651c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  406520:	2100      	movs	r1, #0
  406522:	f843 1b04 	str.w	r1, [r3], #4
  406526:	429a      	cmp	r2, r3
  406528:	d1fb      	bne.n	406522 <__lshift+0x3e>
  40652a:	6934      	ldr	r4, [r6, #16]
  40652c:	f106 0114 	add.w	r1, r6, #20
  406530:	f019 091f 	ands.w	r9, r9, #31
  406534:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  406538:	d01d      	beq.n	406576 <__lshift+0x92>
  40653a:	f1c9 0c20 	rsb	ip, r9, #32
  40653e:	2200      	movs	r2, #0
  406540:	680c      	ldr	r4, [r1, #0]
  406542:	fa04 f409 	lsl.w	r4, r4, r9
  406546:	4314      	orrs	r4, r2
  406548:	f843 4b04 	str.w	r4, [r3], #4
  40654c:	f851 2b04 	ldr.w	r2, [r1], #4
  406550:	458e      	cmp	lr, r1
  406552:	fa22 f20c 	lsr.w	r2, r2, ip
  406556:	d8f3      	bhi.n	406540 <__lshift+0x5c>
  406558:	601a      	str	r2, [r3, #0]
  40655a:	b10a      	cbz	r2, 406560 <__lshift+0x7c>
  40655c:	f108 0502 	add.w	r5, r8, #2
  406560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406562:	6872      	ldr	r2, [r6, #4]
  406564:	3d01      	subs	r5, #1
  406566:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40656a:	6105      	str	r5, [r0, #16]
  40656c:	6031      	str	r1, [r6, #0]
  40656e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  406572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406576:	3b04      	subs	r3, #4
  406578:	f851 2b04 	ldr.w	r2, [r1], #4
  40657c:	f843 2f04 	str.w	r2, [r3, #4]!
  406580:	458e      	cmp	lr, r1
  406582:	d8f9      	bhi.n	406578 <__lshift+0x94>
  406584:	e7ec      	b.n	406560 <__lshift+0x7c>
  406586:	bf00      	nop

00406588 <__mcmp>:
  406588:	b430      	push	{r4, r5}
  40658a:	690b      	ldr	r3, [r1, #16]
  40658c:	4605      	mov	r5, r0
  40658e:	6900      	ldr	r0, [r0, #16]
  406590:	1ac0      	subs	r0, r0, r3
  406592:	d10f      	bne.n	4065b4 <__mcmp+0x2c>
  406594:	009b      	lsls	r3, r3, #2
  406596:	3514      	adds	r5, #20
  406598:	3114      	adds	r1, #20
  40659a:	4419      	add	r1, r3
  40659c:	442b      	add	r3, r5
  40659e:	e001      	b.n	4065a4 <__mcmp+0x1c>
  4065a0:	429d      	cmp	r5, r3
  4065a2:	d207      	bcs.n	4065b4 <__mcmp+0x2c>
  4065a4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4065a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4065ac:	4294      	cmp	r4, r2
  4065ae:	d0f7      	beq.n	4065a0 <__mcmp+0x18>
  4065b0:	d302      	bcc.n	4065b8 <__mcmp+0x30>
  4065b2:	2001      	movs	r0, #1
  4065b4:	bc30      	pop	{r4, r5}
  4065b6:	4770      	bx	lr
  4065b8:	f04f 30ff 	mov.w	r0, #4294967295
  4065bc:	e7fa      	b.n	4065b4 <__mcmp+0x2c>
  4065be:	bf00      	nop

004065c0 <__mdiff>:
  4065c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4065c4:	690f      	ldr	r7, [r1, #16]
  4065c6:	460e      	mov	r6, r1
  4065c8:	6911      	ldr	r1, [r2, #16]
  4065ca:	1a7f      	subs	r7, r7, r1
  4065cc:	2f00      	cmp	r7, #0
  4065ce:	4690      	mov	r8, r2
  4065d0:	d117      	bne.n	406602 <__mdiff+0x42>
  4065d2:	0089      	lsls	r1, r1, #2
  4065d4:	f106 0514 	add.w	r5, r6, #20
  4065d8:	f102 0e14 	add.w	lr, r2, #20
  4065dc:	186b      	adds	r3, r5, r1
  4065de:	4471      	add	r1, lr
  4065e0:	e001      	b.n	4065e6 <__mdiff+0x26>
  4065e2:	429d      	cmp	r5, r3
  4065e4:	d25c      	bcs.n	4066a0 <__mdiff+0xe0>
  4065e6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4065ea:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4065ee:	42a2      	cmp	r2, r4
  4065f0:	d0f7      	beq.n	4065e2 <__mdiff+0x22>
  4065f2:	d25e      	bcs.n	4066b2 <__mdiff+0xf2>
  4065f4:	4633      	mov	r3, r6
  4065f6:	462c      	mov	r4, r5
  4065f8:	4646      	mov	r6, r8
  4065fa:	4675      	mov	r5, lr
  4065fc:	4698      	mov	r8, r3
  4065fe:	2701      	movs	r7, #1
  406600:	e005      	b.n	40660e <__mdiff+0x4e>
  406602:	db58      	blt.n	4066b6 <__mdiff+0xf6>
  406604:	f106 0514 	add.w	r5, r6, #20
  406608:	f108 0414 	add.w	r4, r8, #20
  40660c:	2700      	movs	r7, #0
  40660e:	6871      	ldr	r1, [r6, #4]
  406610:	f7ff fdbc 	bl	40618c <_Balloc>
  406614:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406618:	6936      	ldr	r6, [r6, #16]
  40661a:	60c7      	str	r7, [r0, #12]
  40661c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  406620:	46a6      	mov	lr, r4
  406622:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  406626:	f100 0414 	add.w	r4, r0, #20
  40662a:	2300      	movs	r3, #0
  40662c:	f85e 1b04 	ldr.w	r1, [lr], #4
  406630:	f855 8b04 	ldr.w	r8, [r5], #4
  406634:	b28a      	uxth	r2, r1
  406636:	fa13 f388 	uxtah	r3, r3, r8
  40663a:	0c09      	lsrs	r1, r1, #16
  40663c:	1a9a      	subs	r2, r3, r2
  40663e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  406642:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406646:	b292      	uxth	r2, r2
  406648:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40664c:	45f4      	cmp	ip, lr
  40664e:	f844 2b04 	str.w	r2, [r4], #4
  406652:	ea4f 4323 	mov.w	r3, r3, asr #16
  406656:	d8e9      	bhi.n	40662c <__mdiff+0x6c>
  406658:	42af      	cmp	r7, r5
  40665a:	d917      	bls.n	40668c <__mdiff+0xcc>
  40665c:	46a4      	mov	ip, r4
  40665e:	46ae      	mov	lr, r5
  406660:	f85e 2b04 	ldr.w	r2, [lr], #4
  406664:	fa13 f382 	uxtah	r3, r3, r2
  406668:	1419      	asrs	r1, r3, #16
  40666a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40666e:	b29b      	uxth	r3, r3
  406670:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  406674:	4577      	cmp	r7, lr
  406676:	f84c 2b04 	str.w	r2, [ip], #4
  40667a:	ea4f 4321 	mov.w	r3, r1, asr #16
  40667e:	d8ef      	bhi.n	406660 <__mdiff+0xa0>
  406680:	43ed      	mvns	r5, r5
  406682:	442f      	add	r7, r5
  406684:	f027 0703 	bic.w	r7, r7, #3
  406688:	3704      	adds	r7, #4
  40668a:	443c      	add	r4, r7
  40668c:	3c04      	subs	r4, #4
  40668e:	b922      	cbnz	r2, 40669a <__mdiff+0xda>
  406690:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  406694:	3e01      	subs	r6, #1
  406696:	2b00      	cmp	r3, #0
  406698:	d0fa      	beq.n	406690 <__mdiff+0xd0>
  40669a:	6106      	str	r6, [r0, #16]
  40669c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4066a0:	2100      	movs	r1, #0
  4066a2:	f7ff fd73 	bl	40618c <_Balloc>
  4066a6:	2201      	movs	r2, #1
  4066a8:	2300      	movs	r3, #0
  4066aa:	6102      	str	r2, [r0, #16]
  4066ac:	6143      	str	r3, [r0, #20]
  4066ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4066b2:	4674      	mov	r4, lr
  4066b4:	e7ab      	b.n	40660e <__mdiff+0x4e>
  4066b6:	4633      	mov	r3, r6
  4066b8:	f106 0414 	add.w	r4, r6, #20
  4066bc:	f102 0514 	add.w	r5, r2, #20
  4066c0:	4616      	mov	r6, r2
  4066c2:	2701      	movs	r7, #1
  4066c4:	4698      	mov	r8, r3
  4066c6:	e7a2      	b.n	40660e <__mdiff+0x4e>

004066c8 <__d2b>:
  4066c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4066cc:	b082      	sub	sp, #8
  4066ce:	2101      	movs	r1, #1
  4066d0:	461c      	mov	r4, r3
  4066d2:	f3c3 570a 	ubfx	r7, r3, #20, #11
  4066d6:	4615      	mov	r5, r2
  4066d8:	9e08      	ldr	r6, [sp, #32]
  4066da:	f7ff fd57 	bl	40618c <_Balloc>
  4066de:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4066e2:	4680      	mov	r8, r0
  4066e4:	b10f      	cbz	r7, 4066ea <__d2b+0x22>
  4066e6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4066ea:	9401      	str	r4, [sp, #4]
  4066ec:	b31d      	cbz	r5, 406736 <__d2b+0x6e>
  4066ee:	a802      	add	r0, sp, #8
  4066f0:	f840 5d08 	str.w	r5, [r0, #-8]!
  4066f4:	f7ff fdda 	bl	4062ac <__lo0bits>
  4066f8:	2800      	cmp	r0, #0
  4066fa:	d134      	bne.n	406766 <__d2b+0x9e>
  4066fc:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406700:	f8c8 2014 	str.w	r2, [r8, #20]
  406704:	2b00      	cmp	r3, #0
  406706:	bf0c      	ite	eq
  406708:	2101      	moveq	r1, #1
  40670a:	2102      	movne	r1, #2
  40670c:	f8c8 3018 	str.w	r3, [r8, #24]
  406710:	f8c8 1010 	str.w	r1, [r8, #16]
  406714:	b9df      	cbnz	r7, 40674e <__d2b+0x86>
  406716:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40671a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40671e:	6030      	str	r0, [r6, #0]
  406720:	6918      	ldr	r0, [r3, #16]
  406722:	f7ff fda3 	bl	40626c <__hi0bits>
  406726:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406728:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40672c:	6018      	str	r0, [r3, #0]
  40672e:	4640      	mov	r0, r8
  406730:	b002      	add	sp, #8
  406732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406736:	a801      	add	r0, sp, #4
  406738:	f7ff fdb8 	bl	4062ac <__lo0bits>
  40673c:	9b01      	ldr	r3, [sp, #4]
  40673e:	f8c8 3014 	str.w	r3, [r8, #20]
  406742:	2101      	movs	r1, #1
  406744:	3020      	adds	r0, #32
  406746:	f8c8 1010 	str.w	r1, [r8, #16]
  40674a:	2f00      	cmp	r7, #0
  40674c:	d0e3      	beq.n	406716 <__d2b+0x4e>
  40674e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406750:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  406754:	4407      	add	r7, r0
  406756:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40675a:	6037      	str	r7, [r6, #0]
  40675c:	6018      	str	r0, [r3, #0]
  40675e:	4640      	mov	r0, r8
  406760:	b002      	add	sp, #8
  406762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406766:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40676a:	f1c0 0220 	rsb	r2, r0, #32
  40676e:	fa03 f202 	lsl.w	r2, r3, r2
  406772:	430a      	orrs	r2, r1
  406774:	40c3      	lsrs	r3, r0
  406776:	9301      	str	r3, [sp, #4]
  406778:	f8c8 2014 	str.w	r2, [r8, #20]
  40677c:	e7c2      	b.n	406704 <__d2b+0x3c>
  40677e:	bf00      	nop

00406780 <_sbrk_r>:
  406780:	b538      	push	{r3, r4, r5, lr}
  406782:	4c07      	ldr	r4, [pc, #28]	; (4067a0 <_sbrk_r+0x20>)
  406784:	2300      	movs	r3, #0
  406786:	4605      	mov	r5, r0
  406788:	4608      	mov	r0, r1
  40678a:	6023      	str	r3, [r4, #0]
  40678c:	f7fc f8e2 	bl	402954 <_sbrk>
  406790:	1c43      	adds	r3, r0, #1
  406792:	d000      	beq.n	406796 <_sbrk_r+0x16>
  406794:	bd38      	pop	{r3, r4, r5, pc}
  406796:	6823      	ldr	r3, [r4, #0]
  406798:	2b00      	cmp	r3, #0
  40679a:	d0fb      	beq.n	406794 <_sbrk_r+0x14>
  40679c:	602b      	str	r3, [r5, #0]
  40679e:	bd38      	pop	{r3, r4, r5, pc}
  4067a0:	20400cc8 	.word	0x20400cc8
	...

004067c0 <strlen>:
  4067c0:	f890 f000 	pld	[r0]
  4067c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4067c8:	f020 0107 	bic.w	r1, r0, #7
  4067cc:	f06f 0c00 	mvn.w	ip, #0
  4067d0:	f010 0407 	ands.w	r4, r0, #7
  4067d4:	f891 f020 	pld	[r1, #32]
  4067d8:	f040 8049 	bne.w	40686e <strlen+0xae>
  4067dc:	f04f 0400 	mov.w	r4, #0
  4067e0:	f06f 0007 	mvn.w	r0, #7
  4067e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4067e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4067ec:	f100 0008 	add.w	r0, r0, #8
  4067f0:	fa82 f24c 	uadd8	r2, r2, ip
  4067f4:	faa4 f28c 	sel	r2, r4, ip
  4067f8:	fa83 f34c 	uadd8	r3, r3, ip
  4067fc:	faa2 f38c 	sel	r3, r2, ip
  406800:	bb4b      	cbnz	r3, 406856 <strlen+0x96>
  406802:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406806:	fa82 f24c 	uadd8	r2, r2, ip
  40680a:	f100 0008 	add.w	r0, r0, #8
  40680e:	faa4 f28c 	sel	r2, r4, ip
  406812:	fa83 f34c 	uadd8	r3, r3, ip
  406816:	faa2 f38c 	sel	r3, r2, ip
  40681a:	b9e3      	cbnz	r3, 406856 <strlen+0x96>
  40681c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406820:	fa82 f24c 	uadd8	r2, r2, ip
  406824:	f100 0008 	add.w	r0, r0, #8
  406828:	faa4 f28c 	sel	r2, r4, ip
  40682c:	fa83 f34c 	uadd8	r3, r3, ip
  406830:	faa2 f38c 	sel	r3, r2, ip
  406834:	b97b      	cbnz	r3, 406856 <strlen+0x96>
  406836:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40683a:	f101 0120 	add.w	r1, r1, #32
  40683e:	fa82 f24c 	uadd8	r2, r2, ip
  406842:	f100 0008 	add.w	r0, r0, #8
  406846:	faa4 f28c 	sel	r2, r4, ip
  40684a:	fa83 f34c 	uadd8	r3, r3, ip
  40684e:	faa2 f38c 	sel	r3, r2, ip
  406852:	2b00      	cmp	r3, #0
  406854:	d0c6      	beq.n	4067e4 <strlen+0x24>
  406856:	2a00      	cmp	r2, #0
  406858:	bf04      	itt	eq
  40685a:	3004      	addeq	r0, #4
  40685c:	461a      	moveq	r2, r3
  40685e:	ba12      	rev	r2, r2
  406860:	fab2 f282 	clz	r2, r2
  406864:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406868:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40686c:	4770      	bx	lr
  40686e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406872:	f004 0503 	and.w	r5, r4, #3
  406876:	f1c4 0000 	rsb	r0, r4, #0
  40687a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40687e:	f014 0f04 	tst.w	r4, #4
  406882:	f891 f040 	pld	[r1, #64]	; 0x40
  406886:	fa0c f505 	lsl.w	r5, ip, r5
  40688a:	ea62 0205 	orn	r2, r2, r5
  40688e:	bf1c      	itt	ne
  406890:	ea63 0305 	ornne	r3, r3, r5
  406894:	4662      	movne	r2, ip
  406896:	f04f 0400 	mov.w	r4, #0
  40689a:	e7a9      	b.n	4067f0 <strlen+0x30>

0040689c <__ssprint_r>:
  40689c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4068a0:	6893      	ldr	r3, [r2, #8]
  4068a2:	b083      	sub	sp, #12
  4068a4:	4690      	mov	r8, r2
  4068a6:	2b00      	cmp	r3, #0
  4068a8:	d070      	beq.n	40698c <__ssprint_r+0xf0>
  4068aa:	4682      	mov	sl, r0
  4068ac:	460c      	mov	r4, r1
  4068ae:	6817      	ldr	r7, [r2, #0]
  4068b0:	688d      	ldr	r5, [r1, #8]
  4068b2:	6808      	ldr	r0, [r1, #0]
  4068b4:	e042      	b.n	40693c <__ssprint_r+0xa0>
  4068b6:	89a3      	ldrh	r3, [r4, #12]
  4068b8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4068bc:	d02e      	beq.n	40691c <__ssprint_r+0x80>
  4068be:	6965      	ldr	r5, [r4, #20]
  4068c0:	6921      	ldr	r1, [r4, #16]
  4068c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  4068c6:	eba0 0b01 	sub.w	fp, r0, r1
  4068ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  4068ce:	f10b 0001 	add.w	r0, fp, #1
  4068d2:	106d      	asrs	r5, r5, #1
  4068d4:	4430      	add	r0, r6
  4068d6:	42a8      	cmp	r0, r5
  4068d8:	462a      	mov	r2, r5
  4068da:	bf84      	itt	hi
  4068dc:	4605      	movhi	r5, r0
  4068de:	462a      	movhi	r2, r5
  4068e0:	055b      	lsls	r3, r3, #21
  4068e2:	d538      	bpl.n	406956 <__ssprint_r+0xba>
  4068e4:	4611      	mov	r1, r2
  4068e6:	4650      	mov	r0, sl
  4068e8:	f7ff f8a4 	bl	405a34 <_malloc_r>
  4068ec:	2800      	cmp	r0, #0
  4068ee:	d03c      	beq.n	40696a <__ssprint_r+0xce>
  4068f0:	465a      	mov	r2, fp
  4068f2:	6921      	ldr	r1, [r4, #16]
  4068f4:	9001      	str	r0, [sp, #4]
  4068f6:	f7ff fba3 	bl	406040 <memcpy>
  4068fa:	89a2      	ldrh	r2, [r4, #12]
  4068fc:	9b01      	ldr	r3, [sp, #4]
  4068fe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  406902:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  406906:	81a2      	strh	r2, [r4, #12]
  406908:	eba5 020b 	sub.w	r2, r5, fp
  40690c:	eb03 000b 	add.w	r0, r3, fp
  406910:	6165      	str	r5, [r4, #20]
  406912:	6123      	str	r3, [r4, #16]
  406914:	6020      	str	r0, [r4, #0]
  406916:	60a2      	str	r2, [r4, #8]
  406918:	4635      	mov	r5, r6
  40691a:	46b3      	mov	fp, r6
  40691c:	465a      	mov	r2, fp
  40691e:	4649      	mov	r1, r9
  406920:	f000 fa18 	bl	406d54 <memmove>
  406924:	f8d8 3008 	ldr.w	r3, [r8, #8]
  406928:	68a2      	ldr	r2, [r4, #8]
  40692a:	6820      	ldr	r0, [r4, #0]
  40692c:	1b55      	subs	r5, r2, r5
  40692e:	4458      	add	r0, fp
  406930:	1b9e      	subs	r6, r3, r6
  406932:	60a5      	str	r5, [r4, #8]
  406934:	6020      	str	r0, [r4, #0]
  406936:	f8c8 6008 	str.w	r6, [r8, #8]
  40693a:	b33e      	cbz	r6, 40698c <__ssprint_r+0xf0>
  40693c:	687e      	ldr	r6, [r7, #4]
  40693e:	463b      	mov	r3, r7
  406940:	3708      	adds	r7, #8
  406942:	2e00      	cmp	r6, #0
  406944:	d0fa      	beq.n	40693c <__ssprint_r+0xa0>
  406946:	42ae      	cmp	r6, r5
  406948:	f8d3 9000 	ldr.w	r9, [r3]
  40694c:	46ab      	mov	fp, r5
  40694e:	d2b2      	bcs.n	4068b6 <__ssprint_r+0x1a>
  406950:	4635      	mov	r5, r6
  406952:	46b3      	mov	fp, r6
  406954:	e7e2      	b.n	40691c <__ssprint_r+0x80>
  406956:	4650      	mov	r0, sl
  406958:	f000 fa60 	bl	406e1c <_realloc_r>
  40695c:	4603      	mov	r3, r0
  40695e:	2800      	cmp	r0, #0
  406960:	d1d2      	bne.n	406908 <__ssprint_r+0x6c>
  406962:	6921      	ldr	r1, [r4, #16]
  406964:	4650      	mov	r0, sl
  406966:	f000 f8f9 	bl	406b5c <_free_r>
  40696a:	230c      	movs	r3, #12
  40696c:	f8ca 3000 	str.w	r3, [sl]
  406970:	89a3      	ldrh	r3, [r4, #12]
  406972:	2200      	movs	r2, #0
  406974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406978:	f04f 30ff 	mov.w	r0, #4294967295
  40697c:	81a3      	strh	r3, [r4, #12]
  40697e:	f8c8 2008 	str.w	r2, [r8, #8]
  406982:	f8c8 2004 	str.w	r2, [r8, #4]
  406986:	b003      	add	sp, #12
  406988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40698c:	2000      	movs	r0, #0
  40698e:	f8c8 0004 	str.w	r0, [r8, #4]
  406992:	b003      	add	sp, #12
  406994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406998 <__register_exitproc>:
  406998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40699c:	4d2c      	ldr	r5, [pc, #176]	; (406a50 <__register_exitproc+0xb8>)
  40699e:	4606      	mov	r6, r0
  4069a0:	6828      	ldr	r0, [r5, #0]
  4069a2:	4698      	mov	r8, r3
  4069a4:	460f      	mov	r7, r1
  4069a6:	4691      	mov	r9, r2
  4069a8:	f7ff f840 	bl	405a2c <__retarget_lock_acquire_recursive>
  4069ac:	4b29      	ldr	r3, [pc, #164]	; (406a54 <__register_exitproc+0xbc>)
  4069ae:	681c      	ldr	r4, [r3, #0]
  4069b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4069b4:	2b00      	cmp	r3, #0
  4069b6:	d03e      	beq.n	406a36 <__register_exitproc+0x9e>
  4069b8:	685a      	ldr	r2, [r3, #4]
  4069ba:	2a1f      	cmp	r2, #31
  4069bc:	dc1c      	bgt.n	4069f8 <__register_exitproc+0x60>
  4069be:	f102 0e01 	add.w	lr, r2, #1
  4069c2:	b176      	cbz	r6, 4069e2 <__register_exitproc+0x4a>
  4069c4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4069c8:	2401      	movs	r4, #1
  4069ca:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4069ce:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4069d2:	4094      	lsls	r4, r2
  4069d4:	4320      	orrs	r0, r4
  4069d6:	2e02      	cmp	r6, #2
  4069d8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4069dc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4069e0:	d023      	beq.n	406a2a <__register_exitproc+0x92>
  4069e2:	3202      	adds	r2, #2
  4069e4:	f8c3 e004 	str.w	lr, [r3, #4]
  4069e8:	6828      	ldr	r0, [r5, #0]
  4069ea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4069ee:	f7ff f81f 	bl	405a30 <__retarget_lock_release_recursive>
  4069f2:	2000      	movs	r0, #0
  4069f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4069f8:	4b17      	ldr	r3, [pc, #92]	; (406a58 <__register_exitproc+0xc0>)
  4069fa:	b30b      	cbz	r3, 406a40 <__register_exitproc+0xa8>
  4069fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406a00:	f3af 8000 	nop.w
  406a04:	4603      	mov	r3, r0
  406a06:	b1d8      	cbz	r0, 406a40 <__register_exitproc+0xa8>
  406a08:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  406a0c:	6002      	str	r2, [r0, #0]
  406a0e:	2100      	movs	r1, #0
  406a10:	6041      	str	r1, [r0, #4]
  406a12:	460a      	mov	r2, r1
  406a14:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406a18:	f04f 0e01 	mov.w	lr, #1
  406a1c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406a20:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406a24:	2e00      	cmp	r6, #0
  406a26:	d0dc      	beq.n	4069e2 <__register_exitproc+0x4a>
  406a28:	e7cc      	b.n	4069c4 <__register_exitproc+0x2c>
  406a2a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  406a2e:	430c      	orrs	r4, r1
  406a30:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406a34:	e7d5      	b.n	4069e2 <__register_exitproc+0x4a>
  406a36:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  406a3a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  406a3e:	e7bb      	b.n	4069b8 <__register_exitproc+0x20>
  406a40:	6828      	ldr	r0, [r5, #0]
  406a42:	f7fe fff5 	bl	405a30 <__retarget_lock_release_recursive>
  406a46:	f04f 30ff 	mov.w	r0, #4294967295
  406a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406a4e:	bf00      	nop
  406a50:	20400450 	.word	0x20400450
  406a54:	0040855c 	.word	0x0040855c
  406a58:	00000000 	.word	0x00000000

00406a5c <_calloc_r>:
  406a5c:	b510      	push	{r4, lr}
  406a5e:	fb02 f101 	mul.w	r1, r2, r1
  406a62:	f7fe ffe7 	bl	405a34 <_malloc_r>
  406a66:	4604      	mov	r4, r0
  406a68:	b1d8      	cbz	r0, 406aa2 <_calloc_r+0x46>
  406a6a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  406a6e:	f022 0203 	bic.w	r2, r2, #3
  406a72:	3a04      	subs	r2, #4
  406a74:	2a24      	cmp	r2, #36	; 0x24
  406a76:	d818      	bhi.n	406aaa <_calloc_r+0x4e>
  406a78:	2a13      	cmp	r2, #19
  406a7a:	d914      	bls.n	406aa6 <_calloc_r+0x4a>
  406a7c:	2300      	movs	r3, #0
  406a7e:	2a1b      	cmp	r2, #27
  406a80:	6003      	str	r3, [r0, #0]
  406a82:	6043      	str	r3, [r0, #4]
  406a84:	d916      	bls.n	406ab4 <_calloc_r+0x58>
  406a86:	2a24      	cmp	r2, #36	; 0x24
  406a88:	6083      	str	r3, [r0, #8]
  406a8a:	60c3      	str	r3, [r0, #12]
  406a8c:	bf11      	iteee	ne
  406a8e:	f100 0210 	addne.w	r2, r0, #16
  406a92:	6103      	streq	r3, [r0, #16]
  406a94:	6143      	streq	r3, [r0, #20]
  406a96:	f100 0218 	addeq.w	r2, r0, #24
  406a9a:	2300      	movs	r3, #0
  406a9c:	6013      	str	r3, [r2, #0]
  406a9e:	6053      	str	r3, [r2, #4]
  406aa0:	6093      	str	r3, [r2, #8]
  406aa2:	4620      	mov	r0, r4
  406aa4:	bd10      	pop	{r4, pc}
  406aa6:	4602      	mov	r2, r0
  406aa8:	e7f7      	b.n	406a9a <_calloc_r+0x3e>
  406aaa:	2100      	movs	r1, #0
  406aac:	f7fc fd24 	bl	4034f8 <memset>
  406ab0:	4620      	mov	r0, r4
  406ab2:	bd10      	pop	{r4, pc}
  406ab4:	f100 0208 	add.w	r2, r0, #8
  406ab8:	e7ef      	b.n	406a9a <_calloc_r+0x3e>
  406aba:	bf00      	nop

00406abc <_malloc_trim_r>:
  406abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406abe:	4f24      	ldr	r7, [pc, #144]	; (406b50 <_malloc_trim_r+0x94>)
  406ac0:	460c      	mov	r4, r1
  406ac2:	4606      	mov	r6, r0
  406ac4:	f7ff fb56 	bl	406174 <__malloc_lock>
  406ac8:	68bb      	ldr	r3, [r7, #8]
  406aca:	685d      	ldr	r5, [r3, #4]
  406acc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406ad0:	310f      	adds	r1, #15
  406ad2:	f025 0503 	bic.w	r5, r5, #3
  406ad6:	4429      	add	r1, r5
  406ad8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406adc:	f021 010f 	bic.w	r1, r1, #15
  406ae0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406ae4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406ae8:	db07      	blt.n	406afa <_malloc_trim_r+0x3e>
  406aea:	2100      	movs	r1, #0
  406aec:	4630      	mov	r0, r6
  406aee:	f7ff fe47 	bl	406780 <_sbrk_r>
  406af2:	68bb      	ldr	r3, [r7, #8]
  406af4:	442b      	add	r3, r5
  406af6:	4298      	cmp	r0, r3
  406af8:	d004      	beq.n	406b04 <_malloc_trim_r+0x48>
  406afa:	4630      	mov	r0, r6
  406afc:	f7ff fb40 	bl	406180 <__malloc_unlock>
  406b00:	2000      	movs	r0, #0
  406b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406b04:	4261      	negs	r1, r4
  406b06:	4630      	mov	r0, r6
  406b08:	f7ff fe3a 	bl	406780 <_sbrk_r>
  406b0c:	3001      	adds	r0, #1
  406b0e:	d00d      	beq.n	406b2c <_malloc_trim_r+0x70>
  406b10:	4b10      	ldr	r3, [pc, #64]	; (406b54 <_malloc_trim_r+0x98>)
  406b12:	68ba      	ldr	r2, [r7, #8]
  406b14:	6819      	ldr	r1, [r3, #0]
  406b16:	1b2d      	subs	r5, r5, r4
  406b18:	f045 0501 	orr.w	r5, r5, #1
  406b1c:	4630      	mov	r0, r6
  406b1e:	1b09      	subs	r1, r1, r4
  406b20:	6055      	str	r5, [r2, #4]
  406b22:	6019      	str	r1, [r3, #0]
  406b24:	f7ff fb2c 	bl	406180 <__malloc_unlock>
  406b28:	2001      	movs	r0, #1
  406b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406b2c:	2100      	movs	r1, #0
  406b2e:	4630      	mov	r0, r6
  406b30:	f7ff fe26 	bl	406780 <_sbrk_r>
  406b34:	68ba      	ldr	r2, [r7, #8]
  406b36:	1a83      	subs	r3, r0, r2
  406b38:	2b0f      	cmp	r3, #15
  406b3a:	ddde      	ble.n	406afa <_malloc_trim_r+0x3e>
  406b3c:	4c06      	ldr	r4, [pc, #24]	; (406b58 <_malloc_trim_r+0x9c>)
  406b3e:	4905      	ldr	r1, [pc, #20]	; (406b54 <_malloc_trim_r+0x98>)
  406b40:	6824      	ldr	r4, [r4, #0]
  406b42:	f043 0301 	orr.w	r3, r3, #1
  406b46:	1b00      	subs	r0, r0, r4
  406b48:	6053      	str	r3, [r2, #4]
  406b4a:	6008      	str	r0, [r1, #0]
  406b4c:	e7d5      	b.n	406afa <_malloc_trim_r+0x3e>
  406b4e:	bf00      	nop
  406b50:	20400454 	.word	0x20400454
  406b54:	20400c70 	.word	0x20400c70
  406b58:	2040085c 	.word	0x2040085c

00406b5c <_free_r>:
  406b5c:	2900      	cmp	r1, #0
  406b5e:	d044      	beq.n	406bea <_free_r+0x8e>
  406b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406b64:	460d      	mov	r5, r1
  406b66:	4680      	mov	r8, r0
  406b68:	f7ff fb04 	bl	406174 <__malloc_lock>
  406b6c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406b70:	4969      	ldr	r1, [pc, #420]	; (406d18 <_free_r+0x1bc>)
  406b72:	f027 0301 	bic.w	r3, r7, #1
  406b76:	f1a5 0408 	sub.w	r4, r5, #8
  406b7a:	18e2      	adds	r2, r4, r3
  406b7c:	688e      	ldr	r6, [r1, #8]
  406b7e:	6850      	ldr	r0, [r2, #4]
  406b80:	42b2      	cmp	r2, r6
  406b82:	f020 0003 	bic.w	r0, r0, #3
  406b86:	d05e      	beq.n	406c46 <_free_r+0xea>
  406b88:	07fe      	lsls	r6, r7, #31
  406b8a:	6050      	str	r0, [r2, #4]
  406b8c:	d40b      	bmi.n	406ba6 <_free_r+0x4a>
  406b8e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406b92:	1be4      	subs	r4, r4, r7
  406b94:	f101 0e08 	add.w	lr, r1, #8
  406b98:	68a5      	ldr	r5, [r4, #8]
  406b9a:	4575      	cmp	r5, lr
  406b9c:	443b      	add	r3, r7
  406b9e:	d06d      	beq.n	406c7c <_free_r+0x120>
  406ba0:	68e7      	ldr	r7, [r4, #12]
  406ba2:	60ef      	str	r7, [r5, #12]
  406ba4:	60bd      	str	r5, [r7, #8]
  406ba6:	1815      	adds	r5, r2, r0
  406ba8:	686d      	ldr	r5, [r5, #4]
  406baa:	07ed      	lsls	r5, r5, #31
  406bac:	d53e      	bpl.n	406c2c <_free_r+0xd0>
  406bae:	f043 0201 	orr.w	r2, r3, #1
  406bb2:	6062      	str	r2, [r4, #4]
  406bb4:	50e3      	str	r3, [r4, r3]
  406bb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406bba:	d217      	bcs.n	406bec <_free_r+0x90>
  406bbc:	08db      	lsrs	r3, r3, #3
  406bbe:	1c58      	adds	r0, r3, #1
  406bc0:	109a      	asrs	r2, r3, #2
  406bc2:	684d      	ldr	r5, [r1, #4]
  406bc4:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406bc8:	60a7      	str	r7, [r4, #8]
  406bca:	2301      	movs	r3, #1
  406bcc:	4093      	lsls	r3, r2
  406bce:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406bd2:	432b      	orrs	r3, r5
  406bd4:	3a08      	subs	r2, #8
  406bd6:	60e2      	str	r2, [r4, #12]
  406bd8:	604b      	str	r3, [r1, #4]
  406bda:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406bde:	60fc      	str	r4, [r7, #12]
  406be0:	4640      	mov	r0, r8
  406be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406be6:	f7ff bacb 	b.w	406180 <__malloc_unlock>
  406bea:	4770      	bx	lr
  406bec:	0a5a      	lsrs	r2, r3, #9
  406bee:	2a04      	cmp	r2, #4
  406bf0:	d852      	bhi.n	406c98 <_free_r+0x13c>
  406bf2:	099a      	lsrs	r2, r3, #6
  406bf4:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406bf8:	00ff      	lsls	r7, r7, #3
  406bfa:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406bfe:	19c8      	adds	r0, r1, r7
  406c00:	59ca      	ldr	r2, [r1, r7]
  406c02:	3808      	subs	r0, #8
  406c04:	4290      	cmp	r0, r2
  406c06:	d04f      	beq.n	406ca8 <_free_r+0x14c>
  406c08:	6851      	ldr	r1, [r2, #4]
  406c0a:	f021 0103 	bic.w	r1, r1, #3
  406c0e:	428b      	cmp	r3, r1
  406c10:	d232      	bcs.n	406c78 <_free_r+0x11c>
  406c12:	6892      	ldr	r2, [r2, #8]
  406c14:	4290      	cmp	r0, r2
  406c16:	d1f7      	bne.n	406c08 <_free_r+0xac>
  406c18:	68c3      	ldr	r3, [r0, #12]
  406c1a:	60a0      	str	r0, [r4, #8]
  406c1c:	60e3      	str	r3, [r4, #12]
  406c1e:	609c      	str	r4, [r3, #8]
  406c20:	60c4      	str	r4, [r0, #12]
  406c22:	4640      	mov	r0, r8
  406c24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406c28:	f7ff baaa 	b.w	406180 <__malloc_unlock>
  406c2c:	6895      	ldr	r5, [r2, #8]
  406c2e:	4f3b      	ldr	r7, [pc, #236]	; (406d1c <_free_r+0x1c0>)
  406c30:	42bd      	cmp	r5, r7
  406c32:	4403      	add	r3, r0
  406c34:	d040      	beq.n	406cb8 <_free_r+0x15c>
  406c36:	68d0      	ldr	r0, [r2, #12]
  406c38:	60e8      	str	r0, [r5, #12]
  406c3a:	f043 0201 	orr.w	r2, r3, #1
  406c3e:	6085      	str	r5, [r0, #8]
  406c40:	6062      	str	r2, [r4, #4]
  406c42:	50e3      	str	r3, [r4, r3]
  406c44:	e7b7      	b.n	406bb6 <_free_r+0x5a>
  406c46:	07ff      	lsls	r7, r7, #31
  406c48:	4403      	add	r3, r0
  406c4a:	d407      	bmi.n	406c5c <_free_r+0x100>
  406c4c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406c50:	1aa4      	subs	r4, r4, r2
  406c52:	4413      	add	r3, r2
  406c54:	68a0      	ldr	r0, [r4, #8]
  406c56:	68e2      	ldr	r2, [r4, #12]
  406c58:	60c2      	str	r2, [r0, #12]
  406c5a:	6090      	str	r0, [r2, #8]
  406c5c:	4a30      	ldr	r2, [pc, #192]	; (406d20 <_free_r+0x1c4>)
  406c5e:	6812      	ldr	r2, [r2, #0]
  406c60:	f043 0001 	orr.w	r0, r3, #1
  406c64:	4293      	cmp	r3, r2
  406c66:	6060      	str	r0, [r4, #4]
  406c68:	608c      	str	r4, [r1, #8]
  406c6a:	d3b9      	bcc.n	406be0 <_free_r+0x84>
  406c6c:	4b2d      	ldr	r3, [pc, #180]	; (406d24 <_free_r+0x1c8>)
  406c6e:	4640      	mov	r0, r8
  406c70:	6819      	ldr	r1, [r3, #0]
  406c72:	f7ff ff23 	bl	406abc <_malloc_trim_r>
  406c76:	e7b3      	b.n	406be0 <_free_r+0x84>
  406c78:	4610      	mov	r0, r2
  406c7a:	e7cd      	b.n	406c18 <_free_r+0xbc>
  406c7c:	1811      	adds	r1, r2, r0
  406c7e:	6849      	ldr	r1, [r1, #4]
  406c80:	07c9      	lsls	r1, r1, #31
  406c82:	d444      	bmi.n	406d0e <_free_r+0x1b2>
  406c84:	6891      	ldr	r1, [r2, #8]
  406c86:	68d2      	ldr	r2, [r2, #12]
  406c88:	60ca      	str	r2, [r1, #12]
  406c8a:	4403      	add	r3, r0
  406c8c:	f043 0001 	orr.w	r0, r3, #1
  406c90:	6091      	str	r1, [r2, #8]
  406c92:	6060      	str	r0, [r4, #4]
  406c94:	50e3      	str	r3, [r4, r3]
  406c96:	e7a3      	b.n	406be0 <_free_r+0x84>
  406c98:	2a14      	cmp	r2, #20
  406c9a:	d816      	bhi.n	406cca <_free_r+0x16e>
  406c9c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406ca0:	00ff      	lsls	r7, r7, #3
  406ca2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406ca6:	e7aa      	b.n	406bfe <_free_r+0xa2>
  406ca8:	10aa      	asrs	r2, r5, #2
  406caa:	2301      	movs	r3, #1
  406cac:	684d      	ldr	r5, [r1, #4]
  406cae:	4093      	lsls	r3, r2
  406cb0:	432b      	orrs	r3, r5
  406cb2:	604b      	str	r3, [r1, #4]
  406cb4:	4603      	mov	r3, r0
  406cb6:	e7b0      	b.n	406c1a <_free_r+0xbe>
  406cb8:	f043 0201 	orr.w	r2, r3, #1
  406cbc:	614c      	str	r4, [r1, #20]
  406cbe:	610c      	str	r4, [r1, #16]
  406cc0:	60e5      	str	r5, [r4, #12]
  406cc2:	60a5      	str	r5, [r4, #8]
  406cc4:	6062      	str	r2, [r4, #4]
  406cc6:	50e3      	str	r3, [r4, r3]
  406cc8:	e78a      	b.n	406be0 <_free_r+0x84>
  406cca:	2a54      	cmp	r2, #84	; 0x54
  406ccc:	d806      	bhi.n	406cdc <_free_r+0x180>
  406cce:	0b1a      	lsrs	r2, r3, #12
  406cd0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406cd4:	00ff      	lsls	r7, r7, #3
  406cd6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406cda:	e790      	b.n	406bfe <_free_r+0xa2>
  406cdc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406ce0:	d806      	bhi.n	406cf0 <_free_r+0x194>
  406ce2:	0bda      	lsrs	r2, r3, #15
  406ce4:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406ce8:	00ff      	lsls	r7, r7, #3
  406cea:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406cee:	e786      	b.n	406bfe <_free_r+0xa2>
  406cf0:	f240 5054 	movw	r0, #1364	; 0x554
  406cf4:	4282      	cmp	r2, r0
  406cf6:	d806      	bhi.n	406d06 <_free_r+0x1aa>
  406cf8:	0c9a      	lsrs	r2, r3, #18
  406cfa:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406cfe:	00ff      	lsls	r7, r7, #3
  406d00:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406d04:	e77b      	b.n	406bfe <_free_r+0xa2>
  406d06:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406d0a:	257e      	movs	r5, #126	; 0x7e
  406d0c:	e777      	b.n	406bfe <_free_r+0xa2>
  406d0e:	f043 0101 	orr.w	r1, r3, #1
  406d12:	6061      	str	r1, [r4, #4]
  406d14:	6013      	str	r3, [r2, #0]
  406d16:	e763      	b.n	406be0 <_free_r+0x84>
  406d18:	20400454 	.word	0x20400454
  406d1c:	2040045c 	.word	0x2040045c
  406d20:	20400860 	.word	0x20400860
  406d24:	20400ca0 	.word	0x20400ca0

00406d28 <__ascii_mbtowc>:
  406d28:	b082      	sub	sp, #8
  406d2a:	b149      	cbz	r1, 406d40 <__ascii_mbtowc+0x18>
  406d2c:	b15a      	cbz	r2, 406d46 <__ascii_mbtowc+0x1e>
  406d2e:	b16b      	cbz	r3, 406d4c <__ascii_mbtowc+0x24>
  406d30:	7813      	ldrb	r3, [r2, #0]
  406d32:	600b      	str	r3, [r1, #0]
  406d34:	7812      	ldrb	r2, [r2, #0]
  406d36:	1c10      	adds	r0, r2, #0
  406d38:	bf18      	it	ne
  406d3a:	2001      	movne	r0, #1
  406d3c:	b002      	add	sp, #8
  406d3e:	4770      	bx	lr
  406d40:	a901      	add	r1, sp, #4
  406d42:	2a00      	cmp	r2, #0
  406d44:	d1f3      	bne.n	406d2e <__ascii_mbtowc+0x6>
  406d46:	4610      	mov	r0, r2
  406d48:	b002      	add	sp, #8
  406d4a:	4770      	bx	lr
  406d4c:	f06f 0001 	mvn.w	r0, #1
  406d50:	e7f4      	b.n	406d3c <__ascii_mbtowc+0x14>
  406d52:	bf00      	nop

00406d54 <memmove>:
  406d54:	4288      	cmp	r0, r1
  406d56:	b5f0      	push	{r4, r5, r6, r7, lr}
  406d58:	d90d      	bls.n	406d76 <memmove+0x22>
  406d5a:	188b      	adds	r3, r1, r2
  406d5c:	4298      	cmp	r0, r3
  406d5e:	d20a      	bcs.n	406d76 <memmove+0x22>
  406d60:	1884      	adds	r4, r0, r2
  406d62:	2a00      	cmp	r2, #0
  406d64:	d051      	beq.n	406e0a <memmove+0xb6>
  406d66:	4622      	mov	r2, r4
  406d68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406d6c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406d70:	4299      	cmp	r1, r3
  406d72:	d1f9      	bne.n	406d68 <memmove+0x14>
  406d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406d76:	2a0f      	cmp	r2, #15
  406d78:	d948      	bls.n	406e0c <memmove+0xb8>
  406d7a:	ea41 0300 	orr.w	r3, r1, r0
  406d7e:	079b      	lsls	r3, r3, #30
  406d80:	d146      	bne.n	406e10 <memmove+0xbc>
  406d82:	f100 0410 	add.w	r4, r0, #16
  406d86:	f101 0310 	add.w	r3, r1, #16
  406d8a:	4615      	mov	r5, r2
  406d8c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406d90:	f844 6c10 	str.w	r6, [r4, #-16]
  406d94:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406d98:	f844 6c0c 	str.w	r6, [r4, #-12]
  406d9c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406da0:	f844 6c08 	str.w	r6, [r4, #-8]
  406da4:	3d10      	subs	r5, #16
  406da6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406daa:	f844 6c04 	str.w	r6, [r4, #-4]
  406dae:	2d0f      	cmp	r5, #15
  406db0:	f103 0310 	add.w	r3, r3, #16
  406db4:	f104 0410 	add.w	r4, r4, #16
  406db8:	d8e8      	bhi.n	406d8c <memmove+0x38>
  406dba:	f1a2 0310 	sub.w	r3, r2, #16
  406dbe:	f023 030f 	bic.w	r3, r3, #15
  406dc2:	f002 0e0f 	and.w	lr, r2, #15
  406dc6:	3310      	adds	r3, #16
  406dc8:	f1be 0f03 	cmp.w	lr, #3
  406dcc:	4419      	add	r1, r3
  406dce:	4403      	add	r3, r0
  406dd0:	d921      	bls.n	406e16 <memmove+0xc2>
  406dd2:	1f1e      	subs	r6, r3, #4
  406dd4:	460d      	mov	r5, r1
  406dd6:	4674      	mov	r4, lr
  406dd8:	3c04      	subs	r4, #4
  406dda:	f855 7b04 	ldr.w	r7, [r5], #4
  406dde:	f846 7f04 	str.w	r7, [r6, #4]!
  406de2:	2c03      	cmp	r4, #3
  406de4:	d8f8      	bhi.n	406dd8 <memmove+0x84>
  406de6:	f1ae 0404 	sub.w	r4, lr, #4
  406dea:	f024 0403 	bic.w	r4, r4, #3
  406dee:	3404      	adds	r4, #4
  406df0:	4421      	add	r1, r4
  406df2:	4423      	add	r3, r4
  406df4:	f002 0203 	and.w	r2, r2, #3
  406df8:	b162      	cbz	r2, 406e14 <memmove+0xc0>
  406dfa:	3b01      	subs	r3, #1
  406dfc:	440a      	add	r2, r1
  406dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
  406e02:	f803 4f01 	strb.w	r4, [r3, #1]!
  406e06:	428a      	cmp	r2, r1
  406e08:	d1f9      	bne.n	406dfe <memmove+0xaa>
  406e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406e0c:	4603      	mov	r3, r0
  406e0e:	e7f3      	b.n	406df8 <memmove+0xa4>
  406e10:	4603      	mov	r3, r0
  406e12:	e7f2      	b.n	406dfa <memmove+0xa6>
  406e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406e16:	4672      	mov	r2, lr
  406e18:	e7ee      	b.n	406df8 <memmove+0xa4>
  406e1a:	bf00      	nop

00406e1c <_realloc_r>:
  406e1c:	2900      	cmp	r1, #0
  406e1e:	f000 8095 	beq.w	406f4c <_realloc_r+0x130>
  406e22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406e26:	460d      	mov	r5, r1
  406e28:	4616      	mov	r6, r2
  406e2a:	b083      	sub	sp, #12
  406e2c:	4680      	mov	r8, r0
  406e2e:	f106 070b 	add.w	r7, r6, #11
  406e32:	f7ff f99f 	bl	406174 <__malloc_lock>
  406e36:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406e3a:	2f16      	cmp	r7, #22
  406e3c:	f02e 0403 	bic.w	r4, lr, #3
  406e40:	f1a5 0908 	sub.w	r9, r5, #8
  406e44:	d83c      	bhi.n	406ec0 <_realloc_r+0xa4>
  406e46:	2210      	movs	r2, #16
  406e48:	4617      	mov	r7, r2
  406e4a:	42be      	cmp	r6, r7
  406e4c:	d83d      	bhi.n	406eca <_realloc_r+0xae>
  406e4e:	4294      	cmp	r4, r2
  406e50:	da43      	bge.n	406eda <_realloc_r+0xbe>
  406e52:	4bc4      	ldr	r3, [pc, #784]	; (407164 <_realloc_r+0x348>)
  406e54:	6899      	ldr	r1, [r3, #8]
  406e56:	eb09 0004 	add.w	r0, r9, r4
  406e5a:	4288      	cmp	r0, r1
  406e5c:	f000 80b4 	beq.w	406fc8 <_realloc_r+0x1ac>
  406e60:	6843      	ldr	r3, [r0, #4]
  406e62:	f023 0101 	bic.w	r1, r3, #1
  406e66:	4401      	add	r1, r0
  406e68:	6849      	ldr	r1, [r1, #4]
  406e6a:	07c9      	lsls	r1, r1, #31
  406e6c:	d54c      	bpl.n	406f08 <_realloc_r+0xec>
  406e6e:	f01e 0f01 	tst.w	lr, #1
  406e72:	f000 809b 	beq.w	406fac <_realloc_r+0x190>
  406e76:	4631      	mov	r1, r6
  406e78:	4640      	mov	r0, r8
  406e7a:	f7fe fddb 	bl	405a34 <_malloc_r>
  406e7e:	4606      	mov	r6, r0
  406e80:	2800      	cmp	r0, #0
  406e82:	d03a      	beq.n	406efa <_realloc_r+0xde>
  406e84:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406e88:	f023 0301 	bic.w	r3, r3, #1
  406e8c:	444b      	add	r3, r9
  406e8e:	f1a0 0208 	sub.w	r2, r0, #8
  406e92:	429a      	cmp	r2, r3
  406e94:	f000 8121 	beq.w	4070da <_realloc_r+0x2be>
  406e98:	1f22      	subs	r2, r4, #4
  406e9a:	2a24      	cmp	r2, #36	; 0x24
  406e9c:	f200 8107 	bhi.w	4070ae <_realloc_r+0x292>
  406ea0:	2a13      	cmp	r2, #19
  406ea2:	f200 80db 	bhi.w	40705c <_realloc_r+0x240>
  406ea6:	4603      	mov	r3, r0
  406ea8:	462a      	mov	r2, r5
  406eaa:	6811      	ldr	r1, [r2, #0]
  406eac:	6019      	str	r1, [r3, #0]
  406eae:	6851      	ldr	r1, [r2, #4]
  406eb0:	6059      	str	r1, [r3, #4]
  406eb2:	6892      	ldr	r2, [r2, #8]
  406eb4:	609a      	str	r2, [r3, #8]
  406eb6:	4629      	mov	r1, r5
  406eb8:	4640      	mov	r0, r8
  406eba:	f7ff fe4f 	bl	406b5c <_free_r>
  406ebe:	e01c      	b.n	406efa <_realloc_r+0xde>
  406ec0:	f027 0707 	bic.w	r7, r7, #7
  406ec4:	2f00      	cmp	r7, #0
  406ec6:	463a      	mov	r2, r7
  406ec8:	dabf      	bge.n	406e4a <_realloc_r+0x2e>
  406eca:	2600      	movs	r6, #0
  406ecc:	230c      	movs	r3, #12
  406ece:	4630      	mov	r0, r6
  406ed0:	f8c8 3000 	str.w	r3, [r8]
  406ed4:	b003      	add	sp, #12
  406ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406eda:	462e      	mov	r6, r5
  406edc:	1be3      	subs	r3, r4, r7
  406ede:	2b0f      	cmp	r3, #15
  406ee0:	d81e      	bhi.n	406f20 <_realloc_r+0x104>
  406ee2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406ee6:	f003 0301 	and.w	r3, r3, #1
  406eea:	4323      	orrs	r3, r4
  406eec:	444c      	add	r4, r9
  406eee:	f8c9 3004 	str.w	r3, [r9, #4]
  406ef2:	6863      	ldr	r3, [r4, #4]
  406ef4:	f043 0301 	orr.w	r3, r3, #1
  406ef8:	6063      	str	r3, [r4, #4]
  406efa:	4640      	mov	r0, r8
  406efc:	f7ff f940 	bl	406180 <__malloc_unlock>
  406f00:	4630      	mov	r0, r6
  406f02:	b003      	add	sp, #12
  406f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f08:	f023 0303 	bic.w	r3, r3, #3
  406f0c:	18e1      	adds	r1, r4, r3
  406f0e:	4291      	cmp	r1, r2
  406f10:	db1f      	blt.n	406f52 <_realloc_r+0x136>
  406f12:	68c3      	ldr	r3, [r0, #12]
  406f14:	6882      	ldr	r2, [r0, #8]
  406f16:	462e      	mov	r6, r5
  406f18:	60d3      	str	r3, [r2, #12]
  406f1a:	460c      	mov	r4, r1
  406f1c:	609a      	str	r2, [r3, #8]
  406f1e:	e7dd      	b.n	406edc <_realloc_r+0xc0>
  406f20:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406f24:	eb09 0107 	add.w	r1, r9, r7
  406f28:	f002 0201 	and.w	r2, r2, #1
  406f2c:	444c      	add	r4, r9
  406f2e:	f043 0301 	orr.w	r3, r3, #1
  406f32:	4317      	orrs	r7, r2
  406f34:	f8c9 7004 	str.w	r7, [r9, #4]
  406f38:	604b      	str	r3, [r1, #4]
  406f3a:	6863      	ldr	r3, [r4, #4]
  406f3c:	f043 0301 	orr.w	r3, r3, #1
  406f40:	3108      	adds	r1, #8
  406f42:	6063      	str	r3, [r4, #4]
  406f44:	4640      	mov	r0, r8
  406f46:	f7ff fe09 	bl	406b5c <_free_r>
  406f4a:	e7d6      	b.n	406efa <_realloc_r+0xde>
  406f4c:	4611      	mov	r1, r2
  406f4e:	f7fe bd71 	b.w	405a34 <_malloc_r>
  406f52:	f01e 0f01 	tst.w	lr, #1
  406f56:	d18e      	bne.n	406e76 <_realloc_r+0x5a>
  406f58:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406f5c:	eba9 0a01 	sub.w	sl, r9, r1
  406f60:	f8da 1004 	ldr.w	r1, [sl, #4]
  406f64:	f021 0103 	bic.w	r1, r1, #3
  406f68:	440b      	add	r3, r1
  406f6a:	4423      	add	r3, r4
  406f6c:	4293      	cmp	r3, r2
  406f6e:	db25      	blt.n	406fbc <_realloc_r+0x1a0>
  406f70:	68c2      	ldr	r2, [r0, #12]
  406f72:	6881      	ldr	r1, [r0, #8]
  406f74:	4656      	mov	r6, sl
  406f76:	60ca      	str	r2, [r1, #12]
  406f78:	6091      	str	r1, [r2, #8]
  406f7a:	f8da 100c 	ldr.w	r1, [sl, #12]
  406f7e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406f82:	1f22      	subs	r2, r4, #4
  406f84:	2a24      	cmp	r2, #36	; 0x24
  406f86:	60c1      	str	r1, [r0, #12]
  406f88:	6088      	str	r0, [r1, #8]
  406f8a:	f200 8094 	bhi.w	4070b6 <_realloc_r+0x29a>
  406f8e:	2a13      	cmp	r2, #19
  406f90:	d96f      	bls.n	407072 <_realloc_r+0x256>
  406f92:	6829      	ldr	r1, [r5, #0]
  406f94:	f8ca 1008 	str.w	r1, [sl, #8]
  406f98:	6869      	ldr	r1, [r5, #4]
  406f9a:	f8ca 100c 	str.w	r1, [sl, #12]
  406f9e:	2a1b      	cmp	r2, #27
  406fa0:	f200 80a2 	bhi.w	4070e8 <_realloc_r+0x2cc>
  406fa4:	3508      	adds	r5, #8
  406fa6:	f10a 0210 	add.w	r2, sl, #16
  406faa:	e063      	b.n	407074 <_realloc_r+0x258>
  406fac:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406fb0:	eba9 0a03 	sub.w	sl, r9, r3
  406fb4:	f8da 1004 	ldr.w	r1, [sl, #4]
  406fb8:	f021 0103 	bic.w	r1, r1, #3
  406fbc:	1863      	adds	r3, r4, r1
  406fbe:	4293      	cmp	r3, r2
  406fc0:	f6ff af59 	blt.w	406e76 <_realloc_r+0x5a>
  406fc4:	4656      	mov	r6, sl
  406fc6:	e7d8      	b.n	406f7a <_realloc_r+0x15e>
  406fc8:	6841      	ldr	r1, [r0, #4]
  406fca:	f021 0b03 	bic.w	fp, r1, #3
  406fce:	44a3      	add	fp, r4
  406fd0:	f107 0010 	add.w	r0, r7, #16
  406fd4:	4583      	cmp	fp, r0
  406fd6:	da56      	bge.n	407086 <_realloc_r+0x26a>
  406fd8:	f01e 0f01 	tst.w	lr, #1
  406fdc:	f47f af4b 	bne.w	406e76 <_realloc_r+0x5a>
  406fe0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406fe4:	eba9 0a01 	sub.w	sl, r9, r1
  406fe8:	f8da 1004 	ldr.w	r1, [sl, #4]
  406fec:	f021 0103 	bic.w	r1, r1, #3
  406ff0:	448b      	add	fp, r1
  406ff2:	4558      	cmp	r0, fp
  406ff4:	dce2      	bgt.n	406fbc <_realloc_r+0x1a0>
  406ff6:	4656      	mov	r6, sl
  406ff8:	f8da 100c 	ldr.w	r1, [sl, #12]
  406ffc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407000:	1f22      	subs	r2, r4, #4
  407002:	2a24      	cmp	r2, #36	; 0x24
  407004:	60c1      	str	r1, [r0, #12]
  407006:	6088      	str	r0, [r1, #8]
  407008:	f200 808f 	bhi.w	40712a <_realloc_r+0x30e>
  40700c:	2a13      	cmp	r2, #19
  40700e:	f240 808a 	bls.w	407126 <_realloc_r+0x30a>
  407012:	6829      	ldr	r1, [r5, #0]
  407014:	f8ca 1008 	str.w	r1, [sl, #8]
  407018:	6869      	ldr	r1, [r5, #4]
  40701a:	f8ca 100c 	str.w	r1, [sl, #12]
  40701e:	2a1b      	cmp	r2, #27
  407020:	f200 808a 	bhi.w	407138 <_realloc_r+0x31c>
  407024:	3508      	adds	r5, #8
  407026:	f10a 0210 	add.w	r2, sl, #16
  40702a:	6829      	ldr	r1, [r5, #0]
  40702c:	6011      	str	r1, [r2, #0]
  40702e:	6869      	ldr	r1, [r5, #4]
  407030:	6051      	str	r1, [r2, #4]
  407032:	68a9      	ldr	r1, [r5, #8]
  407034:	6091      	str	r1, [r2, #8]
  407036:	eb0a 0107 	add.w	r1, sl, r7
  40703a:	ebab 0207 	sub.w	r2, fp, r7
  40703e:	f042 0201 	orr.w	r2, r2, #1
  407042:	6099      	str	r1, [r3, #8]
  407044:	604a      	str	r2, [r1, #4]
  407046:	f8da 3004 	ldr.w	r3, [sl, #4]
  40704a:	f003 0301 	and.w	r3, r3, #1
  40704e:	431f      	orrs	r7, r3
  407050:	4640      	mov	r0, r8
  407052:	f8ca 7004 	str.w	r7, [sl, #4]
  407056:	f7ff f893 	bl	406180 <__malloc_unlock>
  40705a:	e751      	b.n	406f00 <_realloc_r+0xe4>
  40705c:	682b      	ldr	r3, [r5, #0]
  40705e:	6003      	str	r3, [r0, #0]
  407060:	686b      	ldr	r3, [r5, #4]
  407062:	6043      	str	r3, [r0, #4]
  407064:	2a1b      	cmp	r2, #27
  407066:	d82d      	bhi.n	4070c4 <_realloc_r+0x2a8>
  407068:	f100 0308 	add.w	r3, r0, #8
  40706c:	f105 0208 	add.w	r2, r5, #8
  407070:	e71b      	b.n	406eaa <_realloc_r+0x8e>
  407072:	4632      	mov	r2, r6
  407074:	6829      	ldr	r1, [r5, #0]
  407076:	6011      	str	r1, [r2, #0]
  407078:	6869      	ldr	r1, [r5, #4]
  40707a:	6051      	str	r1, [r2, #4]
  40707c:	68a9      	ldr	r1, [r5, #8]
  40707e:	6091      	str	r1, [r2, #8]
  407080:	461c      	mov	r4, r3
  407082:	46d1      	mov	r9, sl
  407084:	e72a      	b.n	406edc <_realloc_r+0xc0>
  407086:	eb09 0107 	add.w	r1, r9, r7
  40708a:	ebab 0b07 	sub.w	fp, fp, r7
  40708e:	f04b 0201 	orr.w	r2, fp, #1
  407092:	6099      	str	r1, [r3, #8]
  407094:	604a      	str	r2, [r1, #4]
  407096:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40709a:	f003 0301 	and.w	r3, r3, #1
  40709e:	431f      	orrs	r7, r3
  4070a0:	4640      	mov	r0, r8
  4070a2:	f845 7c04 	str.w	r7, [r5, #-4]
  4070a6:	f7ff f86b 	bl	406180 <__malloc_unlock>
  4070aa:	462e      	mov	r6, r5
  4070ac:	e728      	b.n	406f00 <_realloc_r+0xe4>
  4070ae:	4629      	mov	r1, r5
  4070b0:	f7ff fe50 	bl	406d54 <memmove>
  4070b4:	e6ff      	b.n	406eb6 <_realloc_r+0x9a>
  4070b6:	4629      	mov	r1, r5
  4070b8:	4630      	mov	r0, r6
  4070ba:	461c      	mov	r4, r3
  4070bc:	46d1      	mov	r9, sl
  4070be:	f7ff fe49 	bl	406d54 <memmove>
  4070c2:	e70b      	b.n	406edc <_realloc_r+0xc0>
  4070c4:	68ab      	ldr	r3, [r5, #8]
  4070c6:	6083      	str	r3, [r0, #8]
  4070c8:	68eb      	ldr	r3, [r5, #12]
  4070ca:	60c3      	str	r3, [r0, #12]
  4070cc:	2a24      	cmp	r2, #36	; 0x24
  4070ce:	d017      	beq.n	407100 <_realloc_r+0x2e4>
  4070d0:	f100 0310 	add.w	r3, r0, #16
  4070d4:	f105 0210 	add.w	r2, r5, #16
  4070d8:	e6e7      	b.n	406eaa <_realloc_r+0x8e>
  4070da:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4070de:	f023 0303 	bic.w	r3, r3, #3
  4070e2:	441c      	add	r4, r3
  4070e4:	462e      	mov	r6, r5
  4070e6:	e6f9      	b.n	406edc <_realloc_r+0xc0>
  4070e8:	68a9      	ldr	r1, [r5, #8]
  4070ea:	f8ca 1010 	str.w	r1, [sl, #16]
  4070ee:	68e9      	ldr	r1, [r5, #12]
  4070f0:	f8ca 1014 	str.w	r1, [sl, #20]
  4070f4:	2a24      	cmp	r2, #36	; 0x24
  4070f6:	d00c      	beq.n	407112 <_realloc_r+0x2f6>
  4070f8:	3510      	adds	r5, #16
  4070fa:	f10a 0218 	add.w	r2, sl, #24
  4070fe:	e7b9      	b.n	407074 <_realloc_r+0x258>
  407100:	692b      	ldr	r3, [r5, #16]
  407102:	6103      	str	r3, [r0, #16]
  407104:	696b      	ldr	r3, [r5, #20]
  407106:	6143      	str	r3, [r0, #20]
  407108:	f105 0218 	add.w	r2, r5, #24
  40710c:	f100 0318 	add.w	r3, r0, #24
  407110:	e6cb      	b.n	406eaa <_realloc_r+0x8e>
  407112:	692a      	ldr	r2, [r5, #16]
  407114:	f8ca 2018 	str.w	r2, [sl, #24]
  407118:	696a      	ldr	r2, [r5, #20]
  40711a:	f8ca 201c 	str.w	r2, [sl, #28]
  40711e:	3518      	adds	r5, #24
  407120:	f10a 0220 	add.w	r2, sl, #32
  407124:	e7a6      	b.n	407074 <_realloc_r+0x258>
  407126:	4632      	mov	r2, r6
  407128:	e77f      	b.n	40702a <_realloc_r+0x20e>
  40712a:	4629      	mov	r1, r5
  40712c:	4630      	mov	r0, r6
  40712e:	9301      	str	r3, [sp, #4]
  407130:	f7ff fe10 	bl	406d54 <memmove>
  407134:	9b01      	ldr	r3, [sp, #4]
  407136:	e77e      	b.n	407036 <_realloc_r+0x21a>
  407138:	68a9      	ldr	r1, [r5, #8]
  40713a:	f8ca 1010 	str.w	r1, [sl, #16]
  40713e:	68e9      	ldr	r1, [r5, #12]
  407140:	f8ca 1014 	str.w	r1, [sl, #20]
  407144:	2a24      	cmp	r2, #36	; 0x24
  407146:	d003      	beq.n	407150 <_realloc_r+0x334>
  407148:	3510      	adds	r5, #16
  40714a:	f10a 0218 	add.w	r2, sl, #24
  40714e:	e76c      	b.n	40702a <_realloc_r+0x20e>
  407150:	692a      	ldr	r2, [r5, #16]
  407152:	f8ca 2018 	str.w	r2, [sl, #24]
  407156:	696a      	ldr	r2, [r5, #20]
  407158:	f8ca 201c 	str.w	r2, [sl, #28]
  40715c:	3518      	adds	r5, #24
  40715e:	f10a 0220 	add.w	r2, sl, #32
  407162:	e762      	b.n	40702a <_realloc_r+0x20e>
  407164:	20400454 	.word	0x20400454

00407168 <__ascii_wctomb>:
  407168:	b121      	cbz	r1, 407174 <__ascii_wctomb+0xc>
  40716a:	2aff      	cmp	r2, #255	; 0xff
  40716c:	d804      	bhi.n	407178 <__ascii_wctomb+0x10>
  40716e:	700a      	strb	r2, [r1, #0]
  407170:	2001      	movs	r0, #1
  407172:	4770      	bx	lr
  407174:	4608      	mov	r0, r1
  407176:	4770      	bx	lr
  407178:	238a      	movs	r3, #138	; 0x8a
  40717a:	6003      	str	r3, [r0, #0]
  40717c:	f04f 30ff 	mov.w	r0, #4294967295
  407180:	4770      	bx	lr
  407182:	bf00      	nop

00407184 <__aeabi_drsub>:
  407184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407188:	e002      	b.n	407190 <__adddf3>
  40718a:	bf00      	nop

0040718c <__aeabi_dsub>:
  40718c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407190 <__adddf3>:
  407190:	b530      	push	{r4, r5, lr}
  407192:	ea4f 0441 	mov.w	r4, r1, lsl #1
  407196:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40719a:	ea94 0f05 	teq	r4, r5
  40719e:	bf08      	it	eq
  4071a0:	ea90 0f02 	teqeq	r0, r2
  4071a4:	bf1f      	itttt	ne
  4071a6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4071aa:	ea55 0c02 	orrsne.w	ip, r5, r2
  4071ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4071b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4071b6:	f000 80e2 	beq.w	40737e <__adddf3+0x1ee>
  4071ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4071be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4071c2:	bfb8      	it	lt
  4071c4:	426d      	neglt	r5, r5
  4071c6:	dd0c      	ble.n	4071e2 <__adddf3+0x52>
  4071c8:	442c      	add	r4, r5
  4071ca:	ea80 0202 	eor.w	r2, r0, r2
  4071ce:	ea81 0303 	eor.w	r3, r1, r3
  4071d2:	ea82 0000 	eor.w	r0, r2, r0
  4071d6:	ea83 0101 	eor.w	r1, r3, r1
  4071da:	ea80 0202 	eor.w	r2, r0, r2
  4071de:	ea81 0303 	eor.w	r3, r1, r3
  4071e2:	2d36      	cmp	r5, #54	; 0x36
  4071e4:	bf88      	it	hi
  4071e6:	bd30      	pophi	{r4, r5, pc}
  4071e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4071ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4071f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4071f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4071f8:	d002      	beq.n	407200 <__adddf3+0x70>
  4071fa:	4240      	negs	r0, r0
  4071fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407200:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  407204:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407208:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40720c:	d002      	beq.n	407214 <__adddf3+0x84>
  40720e:	4252      	negs	r2, r2
  407210:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407214:	ea94 0f05 	teq	r4, r5
  407218:	f000 80a7 	beq.w	40736a <__adddf3+0x1da>
  40721c:	f1a4 0401 	sub.w	r4, r4, #1
  407220:	f1d5 0e20 	rsbs	lr, r5, #32
  407224:	db0d      	blt.n	407242 <__adddf3+0xb2>
  407226:	fa02 fc0e 	lsl.w	ip, r2, lr
  40722a:	fa22 f205 	lsr.w	r2, r2, r5
  40722e:	1880      	adds	r0, r0, r2
  407230:	f141 0100 	adc.w	r1, r1, #0
  407234:	fa03 f20e 	lsl.w	r2, r3, lr
  407238:	1880      	adds	r0, r0, r2
  40723a:	fa43 f305 	asr.w	r3, r3, r5
  40723e:	4159      	adcs	r1, r3
  407240:	e00e      	b.n	407260 <__adddf3+0xd0>
  407242:	f1a5 0520 	sub.w	r5, r5, #32
  407246:	f10e 0e20 	add.w	lr, lr, #32
  40724a:	2a01      	cmp	r2, #1
  40724c:	fa03 fc0e 	lsl.w	ip, r3, lr
  407250:	bf28      	it	cs
  407252:	f04c 0c02 	orrcs.w	ip, ip, #2
  407256:	fa43 f305 	asr.w	r3, r3, r5
  40725a:	18c0      	adds	r0, r0, r3
  40725c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407260:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407264:	d507      	bpl.n	407276 <__adddf3+0xe6>
  407266:	f04f 0e00 	mov.w	lr, #0
  40726a:	f1dc 0c00 	rsbs	ip, ip, #0
  40726e:	eb7e 0000 	sbcs.w	r0, lr, r0
  407272:	eb6e 0101 	sbc.w	r1, lr, r1
  407276:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40727a:	d31b      	bcc.n	4072b4 <__adddf3+0x124>
  40727c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407280:	d30c      	bcc.n	40729c <__adddf3+0x10c>
  407282:	0849      	lsrs	r1, r1, #1
  407284:	ea5f 0030 	movs.w	r0, r0, rrx
  407288:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40728c:	f104 0401 	add.w	r4, r4, #1
  407290:	ea4f 5244 	mov.w	r2, r4, lsl #21
  407294:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407298:	f080 809a 	bcs.w	4073d0 <__adddf3+0x240>
  40729c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4072a0:	bf08      	it	eq
  4072a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4072a6:	f150 0000 	adcs.w	r0, r0, #0
  4072aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4072ae:	ea41 0105 	orr.w	r1, r1, r5
  4072b2:	bd30      	pop	{r4, r5, pc}
  4072b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4072b8:	4140      	adcs	r0, r0
  4072ba:	eb41 0101 	adc.w	r1, r1, r1
  4072be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4072c2:	f1a4 0401 	sub.w	r4, r4, #1
  4072c6:	d1e9      	bne.n	40729c <__adddf3+0x10c>
  4072c8:	f091 0f00 	teq	r1, #0
  4072cc:	bf04      	itt	eq
  4072ce:	4601      	moveq	r1, r0
  4072d0:	2000      	moveq	r0, #0
  4072d2:	fab1 f381 	clz	r3, r1
  4072d6:	bf08      	it	eq
  4072d8:	3320      	addeq	r3, #32
  4072da:	f1a3 030b 	sub.w	r3, r3, #11
  4072de:	f1b3 0220 	subs.w	r2, r3, #32
  4072e2:	da0c      	bge.n	4072fe <__adddf3+0x16e>
  4072e4:	320c      	adds	r2, #12
  4072e6:	dd08      	ble.n	4072fa <__adddf3+0x16a>
  4072e8:	f102 0c14 	add.w	ip, r2, #20
  4072ec:	f1c2 020c 	rsb	r2, r2, #12
  4072f0:	fa01 f00c 	lsl.w	r0, r1, ip
  4072f4:	fa21 f102 	lsr.w	r1, r1, r2
  4072f8:	e00c      	b.n	407314 <__adddf3+0x184>
  4072fa:	f102 0214 	add.w	r2, r2, #20
  4072fe:	bfd8      	it	le
  407300:	f1c2 0c20 	rsble	ip, r2, #32
  407304:	fa01 f102 	lsl.w	r1, r1, r2
  407308:	fa20 fc0c 	lsr.w	ip, r0, ip
  40730c:	bfdc      	itt	le
  40730e:	ea41 010c 	orrle.w	r1, r1, ip
  407312:	4090      	lslle	r0, r2
  407314:	1ae4      	subs	r4, r4, r3
  407316:	bfa2      	ittt	ge
  407318:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40731c:	4329      	orrge	r1, r5
  40731e:	bd30      	popge	{r4, r5, pc}
  407320:	ea6f 0404 	mvn.w	r4, r4
  407324:	3c1f      	subs	r4, #31
  407326:	da1c      	bge.n	407362 <__adddf3+0x1d2>
  407328:	340c      	adds	r4, #12
  40732a:	dc0e      	bgt.n	40734a <__adddf3+0x1ba>
  40732c:	f104 0414 	add.w	r4, r4, #20
  407330:	f1c4 0220 	rsb	r2, r4, #32
  407334:	fa20 f004 	lsr.w	r0, r0, r4
  407338:	fa01 f302 	lsl.w	r3, r1, r2
  40733c:	ea40 0003 	orr.w	r0, r0, r3
  407340:	fa21 f304 	lsr.w	r3, r1, r4
  407344:	ea45 0103 	orr.w	r1, r5, r3
  407348:	bd30      	pop	{r4, r5, pc}
  40734a:	f1c4 040c 	rsb	r4, r4, #12
  40734e:	f1c4 0220 	rsb	r2, r4, #32
  407352:	fa20 f002 	lsr.w	r0, r0, r2
  407356:	fa01 f304 	lsl.w	r3, r1, r4
  40735a:	ea40 0003 	orr.w	r0, r0, r3
  40735e:	4629      	mov	r1, r5
  407360:	bd30      	pop	{r4, r5, pc}
  407362:	fa21 f004 	lsr.w	r0, r1, r4
  407366:	4629      	mov	r1, r5
  407368:	bd30      	pop	{r4, r5, pc}
  40736a:	f094 0f00 	teq	r4, #0
  40736e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  407372:	bf06      	itte	eq
  407374:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407378:	3401      	addeq	r4, #1
  40737a:	3d01      	subne	r5, #1
  40737c:	e74e      	b.n	40721c <__adddf3+0x8c>
  40737e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407382:	bf18      	it	ne
  407384:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407388:	d029      	beq.n	4073de <__adddf3+0x24e>
  40738a:	ea94 0f05 	teq	r4, r5
  40738e:	bf08      	it	eq
  407390:	ea90 0f02 	teqeq	r0, r2
  407394:	d005      	beq.n	4073a2 <__adddf3+0x212>
  407396:	ea54 0c00 	orrs.w	ip, r4, r0
  40739a:	bf04      	itt	eq
  40739c:	4619      	moveq	r1, r3
  40739e:	4610      	moveq	r0, r2
  4073a0:	bd30      	pop	{r4, r5, pc}
  4073a2:	ea91 0f03 	teq	r1, r3
  4073a6:	bf1e      	ittt	ne
  4073a8:	2100      	movne	r1, #0
  4073aa:	2000      	movne	r0, #0
  4073ac:	bd30      	popne	{r4, r5, pc}
  4073ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4073b2:	d105      	bne.n	4073c0 <__adddf3+0x230>
  4073b4:	0040      	lsls	r0, r0, #1
  4073b6:	4149      	adcs	r1, r1
  4073b8:	bf28      	it	cs
  4073ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4073be:	bd30      	pop	{r4, r5, pc}
  4073c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4073c4:	bf3c      	itt	cc
  4073c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4073ca:	bd30      	popcc	{r4, r5, pc}
  4073cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4073d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4073d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4073d8:	f04f 0000 	mov.w	r0, #0
  4073dc:	bd30      	pop	{r4, r5, pc}
  4073de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4073e2:	bf1a      	itte	ne
  4073e4:	4619      	movne	r1, r3
  4073e6:	4610      	movne	r0, r2
  4073e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4073ec:	bf1c      	itt	ne
  4073ee:	460b      	movne	r3, r1
  4073f0:	4602      	movne	r2, r0
  4073f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4073f6:	bf06      	itte	eq
  4073f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4073fc:	ea91 0f03 	teqeq	r1, r3
  407400:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  407404:	bd30      	pop	{r4, r5, pc}
  407406:	bf00      	nop

00407408 <__aeabi_ui2d>:
  407408:	f090 0f00 	teq	r0, #0
  40740c:	bf04      	itt	eq
  40740e:	2100      	moveq	r1, #0
  407410:	4770      	bxeq	lr
  407412:	b530      	push	{r4, r5, lr}
  407414:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407418:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40741c:	f04f 0500 	mov.w	r5, #0
  407420:	f04f 0100 	mov.w	r1, #0
  407424:	e750      	b.n	4072c8 <__adddf3+0x138>
  407426:	bf00      	nop

00407428 <__aeabi_i2d>:
  407428:	f090 0f00 	teq	r0, #0
  40742c:	bf04      	itt	eq
  40742e:	2100      	moveq	r1, #0
  407430:	4770      	bxeq	lr
  407432:	b530      	push	{r4, r5, lr}
  407434:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407438:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40743c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407440:	bf48      	it	mi
  407442:	4240      	negmi	r0, r0
  407444:	f04f 0100 	mov.w	r1, #0
  407448:	e73e      	b.n	4072c8 <__adddf3+0x138>
  40744a:	bf00      	nop

0040744c <__aeabi_f2d>:
  40744c:	0042      	lsls	r2, r0, #1
  40744e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  407452:	ea4f 0131 	mov.w	r1, r1, rrx
  407456:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40745a:	bf1f      	itttt	ne
  40745c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407460:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407464:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407468:	4770      	bxne	lr
  40746a:	f092 0f00 	teq	r2, #0
  40746e:	bf14      	ite	ne
  407470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407474:	4770      	bxeq	lr
  407476:	b530      	push	{r4, r5, lr}
  407478:	f44f 7460 	mov.w	r4, #896	; 0x380
  40747c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407484:	e720      	b.n	4072c8 <__adddf3+0x138>
  407486:	bf00      	nop

00407488 <__aeabi_ul2d>:
  407488:	ea50 0201 	orrs.w	r2, r0, r1
  40748c:	bf08      	it	eq
  40748e:	4770      	bxeq	lr
  407490:	b530      	push	{r4, r5, lr}
  407492:	f04f 0500 	mov.w	r5, #0
  407496:	e00a      	b.n	4074ae <__aeabi_l2d+0x16>

00407498 <__aeabi_l2d>:
  407498:	ea50 0201 	orrs.w	r2, r0, r1
  40749c:	bf08      	it	eq
  40749e:	4770      	bxeq	lr
  4074a0:	b530      	push	{r4, r5, lr}
  4074a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4074a6:	d502      	bpl.n	4074ae <__aeabi_l2d+0x16>
  4074a8:	4240      	negs	r0, r0
  4074aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4074ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4074b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4074b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4074ba:	f43f aedc 	beq.w	407276 <__adddf3+0xe6>
  4074be:	f04f 0203 	mov.w	r2, #3
  4074c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4074c6:	bf18      	it	ne
  4074c8:	3203      	addne	r2, #3
  4074ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4074ce:	bf18      	it	ne
  4074d0:	3203      	addne	r2, #3
  4074d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4074d6:	f1c2 0320 	rsb	r3, r2, #32
  4074da:	fa00 fc03 	lsl.w	ip, r0, r3
  4074de:	fa20 f002 	lsr.w	r0, r0, r2
  4074e2:	fa01 fe03 	lsl.w	lr, r1, r3
  4074e6:	ea40 000e 	orr.w	r0, r0, lr
  4074ea:	fa21 f102 	lsr.w	r1, r1, r2
  4074ee:	4414      	add	r4, r2
  4074f0:	e6c1      	b.n	407276 <__adddf3+0xe6>
  4074f2:	bf00      	nop

004074f4 <__aeabi_dmul>:
  4074f4:	b570      	push	{r4, r5, r6, lr}
  4074f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4074fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4074fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407502:	bf1d      	ittte	ne
  407504:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407508:	ea94 0f0c 	teqne	r4, ip
  40750c:	ea95 0f0c 	teqne	r5, ip
  407510:	f000 f8de 	bleq	4076d0 <__aeabi_dmul+0x1dc>
  407514:	442c      	add	r4, r5
  407516:	ea81 0603 	eor.w	r6, r1, r3
  40751a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40751e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407522:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407526:	bf18      	it	ne
  407528:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40752c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407534:	d038      	beq.n	4075a8 <__aeabi_dmul+0xb4>
  407536:	fba0 ce02 	umull	ip, lr, r0, r2
  40753a:	f04f 0500 	mov.w	r5, #0
  40753e:	fbe1 e502 	umlal	lr, r5, r1, r2
  407542:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407546:	fbe0 e503 	umlal	lr, r5, r0, r3
  40754a:	f04f 0600 	mov.w	r6, #0
  40754e:	fbe1 5603 	umlal	r5, r6, r1, r3
  407552:	f09c 0f00 	teq	ip, #0
  407556:	bf18      	it	ne
  407558:	f04e 0e01 	orrne.w	lr, lr, #1
  40755c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407560:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407564:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407568:	d204      	bcs.n	407574 <__aeabi_dmul+0x80>
  40756a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40756e:	416d      	adcs	r5, r5
  407570:	eb46 0606 	adc.w	r6, r6, r6
  407574:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407578:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40757c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407580:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407584:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407588:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40758c:	bf88      	it	hi
  40758e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407592:	d81e      	bhi.n	4075d2 <__aeabi_dmul+0xde>
  407594:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407598:	bf08      	it	eq
  40759a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40759e:	f150 0000 	adcs.w	r0, r0, #0
  4075a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4075a6:	bd70      	pop	{r4, r5, r6, pc}
  4075a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4075ac:	ea46 0101 	orr.w	r1, r6, r1
  4075b0:	ea40 0002 	orr.w	r0, r0, r2
  4075b4:	ea81 0103 	eor.w	r1, r1, r3
  4075b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4075bc:	bfc2      	ittt	gt
  4075be:	ebd4 050c 	rsbsgt	r5, r4, ip
  4075c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4075c6:	bd70      	popgt	{r4, r5, r6, pc}
  4075c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4075cc:	f04f 0e00 	mov.w	lr, #0
  4075d0:	3c01      	subs	r4, #1
  4075d2:	f300 80ab 	bgt.w	40772c <__aeabi_dmul+0x238>
  4075d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4075da:	bfde      	ittt	le
  4075dc:	2000      	movle	r0, #0
  4075de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4075e2:	bd70      	pople	{r4, r5, r6, pc}
  4075e4:	f1c4 0400 	rsb	r4, r4, #0
  4075e8:	3c20      	subs	r4, #32
  4075ea:	da35      	bge.n	407658 <__aeabi_dmul+0x164>
  4075ec:	340c      	adds	r4, #12
  4075ee:	dc1b      	bgt.n	407628 <__aeabi_dmul+0x134>
  4075f0:	f104 0414 	add.w	r4, r4, #20
  4075f4:	f1c4 0520 	rsb	r5, r4, #32
  4075f8:	fa00 f305 	lsl.w	r3, r0, r5
  4075fc:	fa20 f004 	lsr.w	r0, r0, r4
  407600:	fa01 f205 	lsl.w	r2, r1, r5
  407604:	ea40 0002 	orr.w	r0, r0, r2
  407608:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40760c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407614:	fa21 f604 	lsr.w	r6, r1, r4
  407618:	eb42 0106 	adc.w	r1, r2, r6
  40761c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407620:	bf08      	it	eq
  407622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407626:	bd70      	pop	{r4, r5, r6, pc}
  407628:	f1c4 040c 	rsb	r4, r4, #12
  40762c:	f1c4 0520 	rsb	r5, r4, #32
  407630:	fa00 f304 	lsl.w	r3, r0, r4
  407634:	fa20 f005 	lsr.w	r0, r0, r5
  407638:	fa01 f204 	lsl.w	r2, r1, r4
  40763c:	ea40 0002 	orr.w	r0, r0, r2
  407640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407644:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407648:	f141 0100 	adc.w	r1, r1, #0
  40764c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407650:	bf08      	it	eq
  407652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407656:	bd70      	pop	{r4, r5, r6, pc}
  407658:	f1c4 0520 	rsb	r5, r4, #32
  40765c:	fa00 f205 	lsl.w	r2, r0, r5
  407660:	ea4e 0e02 	orr.w	lr, lr, r2
  407664:	fa20 f304 	lsr.w	r3, r0, r4
  407668:	fa01 f205 	lsl.w	r2, r1, r5
  40766c:	ea43 0302 	orr.w	r3, r3, r2
  407670:	fa21 f004 	lsr.w	r0, r1, r4
  407674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407678:	fa21 f204 	lsr.w	r2, r1, r4
  40767c:	ea20 0002 	bic.w	r0, r0, r2
  407680:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407688:	bf08      	it	eq
  40768a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40768e:	bd70      	pop	{r4, r5, r6, pc}
  407690:	f094 0f00 	teq	r4, #0
  407694:	d10f      	bne.n	4076b6 <__aeabi_dmul+0x1c2>
  407696:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40769a:	0040      	lsls	r0, r0, #1
  40769c:	eb41 0101 	adc.w	r1, r1, r1
  4076a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4076a4:	bf08      	it	eq
  4076a6:	3c01      	subeq	r4, #1
  4076a8:	d0f7      	beq.n	40769a <__aeabi_dmul+0x1a6>
  4076aa:	ea41 0106 	orr.w	r1, r1, r6
  4076ae:	f095 0f00 	teq	r5, #0
  4076b2:	bf18      	it	ne
  4076b4:	4770      	bxne	lr
  4076b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4076ba:	0052      	lsls	r2, r2, #1
  4076bc:	eb43 0303 	adc.w	r3, r3, r3
  4076c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4076c4:	bf08      	it	eq
  4076c6:	3d01      	subeq	r5, #1
  4076c8:	d0f7      	beq.n	4076ba <__aeabi_dmul+0x1c6>
  4076ca:	ea43 0306 	orr.w	r3, r3, r6
  4076ce:	4770      	bx	lr
  4076d0:	ea94 0f0c 	teq	r4, ip
  4076d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4076d8:	bf18      	it	ne
  4076da:	ea95 0f0c 	teqne	r5, ip
  4076de:	d00c      	beq.n	4076fa <__aeabi_dmul+0x206>
  4076e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4076e4:	bf18      	it	ne
  4076e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4076ea:	d1d1      	bne.n	407690 <__aeabi_dmul+0x19c>
  4076ec:	ea81 0103 	eor.w	r1, r1, r3
  4076f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4076f4:	f04f 0000 	mov.w	r0, #0
  4076f8:	bd70      	pop	{r4, r5, r6, pc}
  4076fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4076fe:	bf06      	itte	eq
  407700:	4610      	moveq	r0, r2
  407702:	4619      	moveq	r1, r3
  407704:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407708:	d019      	beq.n	40773e <__aeabi_dmul+0x24a>
  40770a:	ea94 0f0c 	teq	r4, ip
  40770e:	d102      	bne.n	407716 <__aeabi_dmul+0x222>
  407710:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407714:	d113      	bne.n	40773e <__aeabi_dmul+0x24a>
  407716:	ea95 0f0c 	teq	r5, ip
  40771a:	d105      	bne.n	407728 <__aeabi_dmul+0x234>
  40771c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407720:	bf1c      	itt	ne
  407722:	4610      	movne	r0, r2
  407724:	4619      	movne	r1, r3
  407726:	d10a      	bne.n	40773e <__aeabi_dmul+0x24a>
  407728:	ea81 0103 	eor.w	r1, r1, r3
  40772c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407730:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407738:	f04f 0000 	mov.w	r0, #0
  40773c:	bd70      	pop	{r4, r5, r6, pc}
  40773e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407742:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407746:	bd70      	pop	{r4, r5, r6, pc}

00407748 <__aeabi_ddiv>:
  407748:	b570      	push	{r4, r5, r6, lr}
  40774a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40774e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407752:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407756:	bf1d      	ittte	ne
  407758:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40775c:	ea94 0f0c 	teqne	r4, ip
  407760:	ea95 0f0c 	teqne	r5, ip
  407764:	f000 f8a7 	bleq	4078b6 <__aeabi_ddiv+0x16e>
  407768:	eba4 0405 	sub.w	r4, r4, r5
  40776c:	ea81 0e03 	eor.w	lr, r1, r3
  407770:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407774:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407778:	f000 8088 	beq.w	40788c <__aeabi_ddiv+0x144>
  40777c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407780:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407784:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407788:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40778c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407790:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407794:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407798:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40779c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4077a0:	429d      	cmp	r5, r3
  4077a2:	bf08      	it	eq
  4077a4:	4296      	cmpeq	r6, r2
  4077a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4077aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4077ae:	d202      	bcs.n	4077b6 <__aeabi_ddiv+0x6e>
  4077b0:	085b      	lsrs	r3, r3, #1
  4077b2:	ea4f 0232 	mov.w	r2, r2, rrx
  4077b6:	1ab6      	subs	r6, r6, r2
  4077b8:	eb65 0503 	sbc.w	r5, r5, r3
  4077bc:	085b      	lsrs	r3, r3, #1
  4077be:	ea4f 0232 	mov.w	r2, r2, rrx
  4077c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4077c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4077ca:	ebb6 0e02 	subs.w	lr, r6, r2
  4077ce:	eb75 0e03 	sbcs.w	lr, r5, r3
  4077d2:	bf22      	ittt	cs
  4077d4:	1ab6      	subcs	r6, r6, r2
  4077d6:	4675      	movcs	r5, lr
  4077d8:	ea40 000c 	orrcs.w	r0, r0, ip
  4077dc:	085b      	lsrs	r3, r3, #1
  4077de:	ea4f 0232 	mov.w	r2, r2, rrx
  4077e2:	ebb6 0e02 	subs.w	lr, r6, r2
  4077e6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4077ea:	bf22      	ittt	cs
  4077ec:	1ab6      	subcs	r6, r6, r2
  4077ee:	4675      	movcs	r5, lr
  4077f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4077f4:	085b      	lsrs	r3, r3, #1
  4077f6:	ea4f 0232 	mov.w	r2, r2, rrx
  4077fa:	ebb6 0e02 	subs.w	lr, r6, r2
  4077fe:	eb75 0e03 	sbcs.w	lr, r5, r3
  407802:	bf22      	ittt	cs
  407804:	1ab6      	subcs	r6, r6, r2
  407806:	4675      	movcs	r5, lr
  407808:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40780c:	085b      	lsrs	r3, r3, #1
  40780e:	ea4f 0232 	mov.w	r2, r2, rrx
  407812:	ebb6 0e02 	subs.w	lr, r6, r2
  407816:	eb75 0e03 	sbcs.w	lr, r5, r3
  40781a:	bf22      	ittt	cs
  40781c:	1ab6      	subcs	r6, r6, r2
  40781e:	4675      	movcs	r5, lr
  407820:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407824:	ea55 0e06 	orrs.w	lr, r5, r6
  407828:	d018      	beq.n	40785c <__aeabi_ddiv+0x114>
  40782a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40782e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  407832:	ea4f 1606 	mov.w	r6, r6, lsl #4
  407836:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40783a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40783e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  407842:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  407846:	d1c0      	bne.n	4077ca <__aeabi_ddiv+0x82>
  407848:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40784c:	d10b      	bne.n	407866 <__aeabi_ddiv+0x11e>
  40784e:	ea41 0100 	orr.w	r1, r1, r0
  407852:	f04f 0000 	mov.w	r0, #0
  407856:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40785a:	e7b6      	b.n	4077ca <__aeabi_ddiv+0x82>
  40785c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407860:	bf04      	itt	eq
  407862:	4301      	orreq	r1, r0
  407864:	2000      	moveq	r0, #0
  407866:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40786a:	bf88      	it	hi
  40786c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407870:	f63f aeaf 	bhi.w	4075d2 <__aeabi_dmul+0xde>
  407874:	ebb5 0c03 	subs.w	ip, r5, r3
  407878:	bf04      	itt	eq
  40787a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40787e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407882:	f150 0000 	adcs.w	r0, r0, #0
  407886:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40788a:	bd70      	pop	{r4, r5, r6, pc}
  40788c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  407890:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  407894:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407898:	bfc2      	ittt	gt
  40789a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40789e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4078a2:	bd70      	popgt	{r4, r5, r6, pc}
  4078a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4078a8:	f04f 0e00 	mov.w	lr, #0
  4078ac:	3c01      	subs	r4, #1
  4078ae:	e690      	b.n	4075d2 <__aeabi_dmul+0xde>
  4078b0:	ea45 0e06 	orr.w	lr, r5, r6
  4078b4:	e68d      	b.n	4075d2 <__aeabi_dmul+0xde>
  4078b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4078ba:	ea94 0f0c 	teq	r4, ip
  4078be:	bf08      	it	eq
  4078c0:	ea95 0f0c 	teqeq	r5, ip
  4078c4:	f43f af3b 	beq.w	40773e <__aeabi_dmul+0x24a>
  4078c8:	ea94 0f0c 	teq	r4, ip
  4078cc:	d10a      	bne.n	4078e4 <__aeabi_ddiv+0x19c>
  4078ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4078d2:	f47f af34 	bne.w	40773e <__aeabi_dmul+0x24a>
  4078d6:	ea95 0f0c 	teq	r5, ip
  4078da:	f47f af25 	bne.w	407728 <__aeabi_dmul+0x234>
  4078de:	4610      	mov	r0, r2
  4078e0:	4619      	mov	r1, r3
  4078e2:	e72c      	b.n	40773e <__aeabi_dmul+0x24a>
  4078e4:	ea95 0f0c 	teq	r5, ip
  4078e8:	d106      	bne.n	4078f8 <__aeabi_ddiv+0x1b0>
  4078ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4078ee:	f43f aefd 	beq.w	4076ec <__aeabi_dmul+0x1f8>
  4078f2:	4610      	mov	r0, r2
  4078f4:	4619      	mov	r1, r3
  4078f6:	e722      	b.n	40773e <__aeabi_dmul+0x24a>
  4078f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4078fc:	bf18      	it	ne
  4078fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407902:	f47f aec5 	bne.w	407690 <__aeabi_dmul+0x19c>
  407906:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40790a:	f47f af0d 	bne.w	407728 <__aeabi_dmul+0x234>
  40790e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  407912:	f47f aeeb 	bne.w	4076ec <__aeabi_dmul+0x1f8>
  407916:	e712      	b.n	40773e <__aeabi_dmul+0x24a>

00407918 <__gedf2>:
  407918:	f04f 3cff 	mov.w	ip, #4294967295
  40791c:	e006      	b.n	40792c <__cmpdf2+0x4>
  40791e:	bf00      	nop

00407920 <__ledf2>:
  407920:	f04f 0c01 	mov.w	ip, #1
  407924:	e002      	b.n	40792c <__cmpdf2+0x4>
  407926:	bf00      	nop

00407928 <__cmpdf2>:
  407928:	f04f 0c01 	mov.w	ip, #1
  40792c:	f84d cd04 	str.w	ip, [sp, #-4]!
  407930:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407934:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407938:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40793c:	bf18      	it	ne
  40793e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  407942:	d01b      	beq.n	40797c <__cmpdf2+0x54>
  407944:	b001      	add	sp, #4
  407946:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40794a:	bf0c      	ite	eq
  40794c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  407950:	ea91 0f03 	teqne	r1, r3
  407954:	bf02      	ittt	eq
  407956:	ea90 0f02 	teqeq	r0, r2
  40795a:	2000      	moveq	r0, #0
  40795c:	4770      	bxeq	lr
  40795e:	f110 0f00 	cmn.w	r0, #0
  407962:	ea91 0f03 	teq	r1, r3
  407966:	bf58      	it	pl
  407968:	4299      	cmppl	r1, r3
  40796a:	bf08      	it	eq
  40796c:	4290      	cmpeq	r0, r2
  40796e:	bf2c      	ite	cs
  407970:	17d8      	asrcs	r0, r3, #31
  407972:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  407976:	f040 0001 	orr.w	r0, r0, #1
  40797a:	4770      	bx	lr
  40797c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407984:	d102      	bne.n	40798c <__cmpdf2+0x64>
  407986:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40798a:	d107      	bne.n	40799c <__cmpdf2+0x74>
  40798c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407994:	d1d6      	bne.n	407944 <__cmpdf2+0x1c>
  407996:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40799a:	d0d3      	beq.n	407944 <__cmpdf2+0x1c>
  40799c:	f85d 0b04 	ldr.w	r0, [sp], #4
  4079a0:	4770      	bx	lr
  4079a2:	bf00      	nop

004079a4 <__aeabi_cdrcmple>:
  4079a4:	4684      	mov	ip, r0
  4079a6:	4610      	mov	r0, r2
  4079a8:	4662      	mov	r2, ip
  4079aa:	468c      	mov	ip, r1
  4079ac:	4619      	mov	r1, r3
  4079ae:	4663      	mov	r3, ip
  4079b0:	e000      	b.n	4079b4 <__aeabi_cdcmpeq>
  4079b2:	bf00      	nop

004079b4 <__aeabi_cdcmpeq>:
  4079b4:	b501      	push	{r0, lr}
  4079b6:	f7ff ffb7 	bl	407928 <__cmpdf2>
  4079ba:	2800      	cmp	r0, #0
  4079bc:	bf48      	it	mi
  4079be:	f110 0f00 	cmnmi.w	r0, #0
  4079c2:	bd01      	pop	{r0, pc}

004079c4 <__aeabi_dcmpeq>:
  4079c4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4079c8:	f7ff fff4 	bl	4079b4 <__aeabi_cdcmpeq>
  4079cc:	bf0c      	ite	eq
  4079ce:	2001      	moveq	r0, #1
  4079d0:	2000      	movne	r0, #0
  4079d2:	f85d fb08 	ldr.w	pc, [sp], #8
  4079d6:	bf00      	nop

004079d8 <__aeabi_dcmplt>:
  4079d8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4079dc:	f7ff ffea 	bl	4079b4 <__aeabi_cdcmpeq>
  4079e0:	bf34      	ite	cc
  4079e2:	2001      	movcc	r0, #1
  4079e4:	2000      	movcs	r0, #0
  4079e6:	f85d fb08 	ldr.w	pc, [sp], #8
  4079ea:	bf00      	nop

004079ec <__aeabi_dcmple>:
  4079ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  4079f0:	f7ff ffe0 	bl	4079b4 <__aeabi_cdcmpeq>
  4079f4:	bf94      	ite	ls
  4079f6:	2001      	movls	r0, #1
  4079f8:	2000      	movhi	r0, #0
  4079fa:	f85d fb08 	ldr.w	pc, [sp], #8
  4079fe:	bf00      	nop

00407a00 <__aeabi_dcmpge>:
  407a00:	f84d ed08 	str.w	lr, [sp, #-8]!
  407a04:	f7ff ffce 	bl	4079a4 <__aeabi_cdrcmple>
  407a08:	bf94      	ite	ls
  407a0a:	2001      	movls	r0, #1
  407a0c:	2000      	movhi	r0, #0
  407a0e:	f85d fb08 	ldr.w	pc, [sp], #8
  407a12:	bf00      	nop

00407a14 <__aeabi_dcmpgt>:
  407a14:	f84d ed08 	str.w	lr, [sp, #-8]!
  407a18:	f7ff ffc4 	bl	4079a4 <__aeabi_cdrcmple>
  407a1c:	bf34      	ite	cc
  407a1e:	2001      	movcc	r0, #1
  407a20:	2000      	movcs	r0, #0
  407a22:	f85d fb08 	ldr.w	pc, [sp], #8
  407a26:	bf00      	nop

00407a28 <__aeabi_dcmpun>:
  407a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407a30:	d102      	bne.n	407a38 <__aeabi_dcmpun+0x10>
  407a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407a36:	d10a      	bne.n	407a4e <__aeabi_dcmpun+0x26>
  407a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407a40:	d102      	bne.n	407a48 <__aeabi_dcmpun+0x20>
  407a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407a46:	d102      	bne.n	407a4e <__aeabi_dcmpun+0x26>
  407a48:	f04f 0000 	mov.w	r0, #0
  407a4c:	4770      	bx	lr
  407a4e:	f04f 0001 	mov.w	r0, #1
  407a52:	4770      	bx	lr

00407a54 <__aeabi_d2iz>:
  407a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407a5c:	d215      	bcs.n	407a8a <__aeabi_d2iz+0x36>
  407a5e:	d511      	bpl.n	407a84 <__aeabi_d2iz+0x30>
  407a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407a68:	d912      	bls.n	407a90 <__aeabi_d2iz+0x3c>
  407a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407a7a:	fa23 f002 	lsr.w	r0, r3, r2
  407a7e:	bf18      	it	ne
  407a80:	4240      	negne	r0, r0
  407a82:	4770      	bx	lr
  407a84:	f04f 0000 	mov.w	r0, #0
  407a88:	4770      	bx	lr
  407a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407a8e:	d105      	bne.n	407a9c <__aeabi_d2iz+0x48>
  407a90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407a94:	bf08      	it	eq
  407a96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407a9a:	4770      	bx	lr
  407a9c:	f04f 0000 	mov.w	r0, #0
  407aa0:	4770      	bx	lr
  407aa2:	bf00      	nop

00407aa4 <sysfont_glyphs>:
	...
  407ac4:	0030 0030 0030 0030 0030 0030 0000 0030     0.0.0.0.0.0...0.
  407ad4:	0030 0000 0000 0000 0000 0000 006c 006c     0...........l.l.
  407ae4:	006c 006c 0000 0000 0000 0000 0000 0000     l.l.............
	...
  407afc:	0000 0028 0028 007c 0028 0028 007c 0028     ..(.(.|.(.(.|.(.
  407b0c:	0028 0000 0000 0000 0000 0000 0010 003c     (.............<.
  407b1c:	0040 0020 0010 0008 0004 0078 0010 0000     @. .......x.....
	...
  407b34:	0000 007c 00a4 00a8 0050 0028 0054 0094     ..|.....P.(.T...
  407b44:	0088 0000 0000 0000 0000 0000 0060 0090     ............`...
  407b54:	0090 0090 0060 0094 0088 0088 0070 0000     ....`.......p...
	...
  407b6c:	0010 0010 0010 0000 0000 0000 0000 0000     ................
	...
  407b88:	0008 0010 0020 0020 0020 0020 0020 0020     .... . . . . . .
  407b98:	0010 0008 0000 0000 0000 0000 0020 0010     ............ ...
  407ba8:	0008 0008 0008 0008 0008 0008 0010 0020     .............. .
  407bb8:	0000 0000 0000 0028 0010 007c 0010 0028     ......(...|...(.
	...
  407be0:	0010 0010 0010 00fe 0010 0010 0010 0000     ................
	...
  407c08:	0010 0030 0020 0000 0000 0000 0000 0000     ..0. ...........
  407c18:	0000 0000 0000 007c 0000 0000 0000 0000     ......|.........
	...
  407c3c:	0000 0030 0030 0000 0000 0000 0000 0000     ..0.0...........
  407c4c:	0000 0008 0008 0010 0010 0020 0020 0040     .......... . .@.
  407c5c:	0040 0000 0000 0000 0000 0000 0000 0078     @.............x.
  407c6c:	0084 008c 0094 00a4 00c4 0084 0078 0000     ............x...
	...
  407c84:	0000 0010 0030 0050 0010 0010 0010 0010     ....0.P.........
  407c94:	007c 0000 0000 0000 0000 0000 0000 0070     |.............p.
  407ca4:	0088 0008 0010 0020 0040 0080 00f8 0000     ...... .@.......
	...
  407cbc:	0000 0070 0088 0008 0030 0008 0008 0088     ..p.....0.......
  407ccc:	0070 0000 0000 0000 0000 0000 0000 0008     p...............
  407cdc:	0018 0028 0048 0088 00fc 0008 0008 0000     ..(.H...........
	...
  407cf4:	0000 0078 0080 0080 00f0 0008 0008 0008     ..x.............
  407d04:	00f0 0000 0000 0000 0000 0000 0000 0030     ..............0.
  407d14:	0040 0080 00f0 0088 0088 0088 0070 0000     @...........p...
	...
  407d2c:	0000 00f8 0008 0010 0010 0020 0020 0040     .......... . .@.
  407d3c:	0040 0000 0000 0000 0000 0000 0000 0070     @.............p.
  407d4c:	0088 0088 0070 0088 0088 0088 0070 0000     ....p.......p...
	...
  407d64:	0000 0070 0088 0088 0088 0078 0008 0010     ..p.......x.....
  407d74:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
  407d84:	0000 0030 0030 0000 0000 0030 0030 0000     ..0.0.....0.0...
	...
  407da0:	0000 0030 0030 0000 0000 0030 0030 0060     ..0.0.....0.0.`.
  407db0:	0040 0000 0000 0000 0000 0000 0008 0010     @...............
  407dc0:	0020 0040 0020 0010 0008 0000 0000 0000      .@. ...........
	...
  407ddc:	007c 0000 007c 0000 0000 0000 0000 0000     |...|...........
	...
  407df4:	0040 0020 0010 0008 0010 0020 0040 0000     @. ....... .@...
	...
  407e0c:	0000 0030 0048 0008 0010 0020 0000 0000     ..0.H..... .....
  407e1c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
  407e2c:	003c 0042 009a 00aa 00aa 00be 0080 0078     <.B...........x.
	...
  407e44:	0000 0010 0028 0028 0044 007c 0044 0044     ....(.(.D.|.D.D.
  407e54:	0044 0000 0000 0000 0000 0000 0000 00f8     D...............
  407e64:	0084 0084 00f8 0084 0084 0084 00f8 0000     ................
	...
  407e7c:	0000 003c 0040 0080 0080 0080 0080 0040     ..<.@.........@.
  407e8c:	003c 0000 0000 0000 0000 0000 0000 00f0     <...............
  407e9c:	0088 0084 0084 0084 0084 0088 00f0 0000     ................
	...
  407eb4:	0000 00f8 0080 0080 00f0 0080 0080 0080     ................
  407ec4:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  407ed4:	0080 0080 00f8 0080 0080 0080 0080 0000     ................
	...
  407eec:	0000 003c 0040 0080 0080 009c 0084 0044     ..<.@.........D.
  407efc:	0038 0000 0000 0000 0000 0000 0000 0088     8...............
  407f0c:	0088 0088 00f8 0088 0088 0088 0088 0000     ................
	...
  407f24:	0000 00f8 0020 0020 0020 0020 0020 0020     .... . . . . . .
  407f34:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  407f44:	0008 0008 0008 0008 0008 0008 00f0 0000     ................
	...
  407f5c:	0000 0084 0088 0090 00a0 00d0 0088 0084     ................
  407f6c:	0084 0000 0000 0000 0000 0000 0000 0080     ................
  407f7c:	0080 0080 0080 0080 0080 0080 00fc 0000     ................
	...
  407f94:	0000 0084 00cc 00cc 00b4 00b4 0084 0084     ................
  407fa4:	0084 0000 0000 0000 0000 0000 0000 0084     ................
  407fb4:	00c4 00c4 00a4 00a4 0094 0094 008c 0000     ................
	...
  407fcc:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  407fdc:	0078 0000 0000 0000 0000 0000 0000 00f8     x...............
  407fec:	0084 0084 0084 00f8 0080 0080 0080 0000     ................
	...
  408004:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  408014:	0078 0020 0018 0000 0000 0000 0000 00f8     x. .............
  408024:	0084 0084 0084 00f8 0088 0084 0084 0000     ................
	...
  40803c:	0000 007c 0080 0080 0060 0018 0004 0004     ..|.....`.......
  40804c:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  40805c:	0020 0020 0020 0020 0020 0020 0020 0000      . . . . . . ...
	...
  408074:	0000 0084 0084 0084 0084 0084 0084 0084     ................
  408084:	0078 0000 0000 0000 0000 0000 0000 0084     x...............
  408094:	0084 0084 0048 0048 0048 0030 0030 0000     ....H.H.H.0.0...
	...
  4080ac:	0000 0088 00a8 00a8 00a8 00a8 00a8 0050     ..............P.
  4080bc:	0050 0000 0000 0000 0000 0000 0000 0088     P...............
  4080cc:	0088 0050 0020 0020 0050 0088 0088 0000     ..P. . .P.......
	...
  4080e4:	0000 0088 0088 0088 0050 0050 0020 0020     ........P.P. . .
  4080f4:	0020 0000 0000 0000 0000 0000 0000 00fc      ...............
  408104:	0004 0008 0010 0020 0040 0080 00fc 0000     ...... .@.......
	...
  40811c:	0070 0040 0040 0040 0040 0040 0040 0040     p.@.@.@.@.@.@.@.
  40812c:	0040 0040 0070 0000 0000 0000 0040 0040     @.@.p.......@.@.
  40813c:	0020 0020 0020 0010 0010 0010 0008 0008      . . ...........
	...
  408154:	0038 0008 0008 0008 0008 0008 0008 0008     8...............
  408164:	0008 0008 0038 0000 0000 0000 0010 0028     ....8.........(.
  408174:	0044 0000 0000 0000 0000 0000 0000 0000     D...............
	...
  40819c:	0038 0000 0000 0000 0000 0000 0000 0020     8............. .
  4081ac:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...
  4081c8:	0000 0070 0008 0008 0078 0088 007c 0000     ..p.....x...|...
	...
  4081e0:	0080 0080 0080 00f8 0084 0084 0084 0084     ................
  4081f0:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  408200:	0000 0078 0080 0080 0080 0080 0078 0000     ..x.........x...
	...
  408218:	0004 0004 0004 007c 0084 0084 0084 008c     ......|.........
  408228:	0074 0000 0000 0000 0000 0000 0000 0000     t...............
  408238:	0000 0078 0084 00fc 0080 0080 007c 0000     ..x.........|...
	...
  408250:	001c 0020 0020 00fc 0020 0020 0020 0020     .. . ... . . . .
  408260:	00fc 0000 0000 0000 0000 0000 0000 0000     ................
  408270:	0000 007c 0084 0084 0084 0084 007c 0004     ..|.........|...
  408280:	0078 0000 0000 0000 0080 0080 0080 00b8     x...............
  408290:	00c4 0084 0084 0084 0084 0000 0000 0000     ................
  4082a0:	0000 0000 0000 0010 0000 0070 0010 0010     ..........p.....
  4082b0:	0010 0010 007c 0000 0000 0000 0000 0000     ....|...........
  4082c0:	0000 0008 0000 0078 0008 0008 0008 0008     ......x.........
  4082d0:	0008 0008 0008 0070 0000 0000 0080 0080     ......p.........
  4082e0:	0080 0088 0090 00a0 00d0 0088 0088 0000     ................
	...
  4082f8:	00e0 0020 0020 0020 0020 0020 0020 0020     .. . . . . . . .
  408308:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  408318:	0000 00a4 00fc 00a4 00a4 00a4 00a4 0000     ................
	...
  408334:	0000 00b8 00c4 0084 0084 0084 0084 0000     ................
	...
  408350:	0000 0078 0084 0084 0084 0084 0078 0000     ..x.........x...
	...
  40836c:	0000 00b8 00c4 0084 0084 0084 00f8 0080     ................
  40837c:	0080 0000 0000 0000 0000 0000 0000 007c     ..............|.
  40838c:	0084 0084 0084 0084 007c 0004 0004 0000     ........|.......
	...
  4083a4:	0000 00d8 0060 0040 0040 0040 00f0 0000     ....`.@.@.@.....
	...
  4083c0:	0000 0078 0080 0040 0030 0008 00f0 0000     ..x...@.0.......
	...
  4083dc:	0020 00fc 0020 0020 0020 0020 001c 0000      ... . . . .....
	...
  4083f8:	0000 0088 0088 0088 0088 0088 007c 0000     ............|...
	...
  408414:	0000 0084 0084 0084 0048 0048 0030 0000     ........H.H.0...
	...
  408430:	0000 0088 00a8 00a8 00a8 00a8 0050 0000     ............P...
	...
  40844c:	0000 0088 0050 0020 0020 0050 0088 0000     ....P. . .P.....
	...
  408468:	0000 0084 0084 0048 0048 0030 0010 0020     ......H.H.0... .
  408478:	0040 0000 0000 0000 0000 0000 0000 00f8     @...............
  408488:	0008 0010 0020 0040 00f8 0000 0000 0000     .... .@.........
  408498:	0000 0000 0010 0020 0020 0010 0020 0020     ...... . ... . .
  4084a8:	0010 0020 0020 0010 0000 0000 0000 0000     .. . ...........
  4084b8:	0010 0010 0010 0010 0000 0000 0010 0010     ................
  4084c8:	0010 0010 0000 0000 0000 0000 0020 0010     ............ ...
  4084d8:	0010 0020 0010 0010 0020 0010 0010 0020     .. ..... ..... .
  4084e8:	0000 0000 6425 0000 2020 2020 2020 2020     ....%d..        
  4084f8:	2020 2020 0020 0000 6f43 7266 2065 6546          ...Cofre Fe
  408508:	6863 6461 006f 0000 6553 686e 2061 7265     chado...Senha er
  408518:	6172 6164 0000 0000 6c42 716f 6575 6461     rada....Bloquead
  408528:	006f 0000 6f43 7266 2065 6241 7265 6f74     o...Cofre Aberto
  408538:	0000 0000 0001 0000 0001 0000 0002 0000     ................
  408548:	0003 0000 0009 0000 0009 0000 0009 0000     ................
  408558:	0009 0000                                   ....

0040855c <_global_impure_ptr>:
  40855c:	0028 2040 4e49 0046 6e69 0066 414e 004e     (.@ INF.inf.NAN.
  40856c:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  40857c:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  40858c:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  40859c:	296c 0000 0030 0000                         l)..0...

004085a4 <blanks.7223>:
  4085a4:	2020 2020 2020 2020 2020 2020 2020 2020                     

004085b4 <zeroes.7224>:
  4085b4:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  4085c4:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  4085d4:	0000 0000                                   ....

004085d8 <__mprec_bigtens>:
  4085d8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  4085e8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  4085f8:	bf3c 7f73 4fdd 7515                         <.s..O.u

00408600 <__mprec_tens>:
  408600:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  408610:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  408620:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  408630:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  408640:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  408650:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  408660:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  408670:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  408680:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  408690:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  4086a0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  4086b0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  4086c0:	9db4 79d9 7843 44ea                         ...yCx.D

004086c8 <p05.6055>:
  4086c8:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  4086d8:	4f50 4953 0058 0000 002e 0000               POSIX.......

004086e4 <_ctype_>:
  4086e4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  4086f4:	2020 2020 2020 2020 2020 2020 2020 2020                     
  408704:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  408714:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  408724:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  408734:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  408744:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  408754:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  408764:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

004087e8 <_init>:
  4087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4087ea:	bf00      	nop
  4087ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4087ee:	bc08      	pop	{r3}
  4087f0:	469e      	mov	lr, r3
  4087f2:	4770      	bx	lr

004087f4 <__init_array_start>:
  4087f4:	00404a3d 	.word	0x00404a3d

004087f8 <__frame_dummy_init_array_entry>:
  4087f8:	00400165                                e.@.

004087fc <_fini>:
  4087fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4087fe:	bf00      	nop
  408800:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408802:	bc08      	pop	{r3}
  408804:	469e      	mov	lr, r3
  408806:	4770      	bx	lr

00408808 <__fini_array_start>:
  408808:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 7aa4 0040 0e0a 7d20               .....z@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <_impure_ptr>:
20400020:	0028 2040 0000 0000                         (.@ ....

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	0ca4 2040                                   ..@ 

20400454 <__malloc_av_>:
	...
2040045c:	0454 2040 0454 2040 045c 2040 045c 2040     T.@ T.@ \.@ \.@ 
2040046c:	0464 2040 0464 2040 046c 2040 046c 2040     d.@ d.@ l.@ l.@ 
2040047c:	0474 2040 0474 2040 047c 2040 047c 2040     t.@ t.@ |.@ |.@ 
2040048c:	0484 2040 0484 2040 048c 2040 048c 2040     ..@ ..@ ..@ ..@ 
2040049c:	0494 2040 0494 2040 049c 2040 049c 2040     ..@ ..@ ..@ ..@ 
204004ac:	04a4 2040 04a4 2040 04ac 2040 04ac 2040     ..@ ..@ ..@ ..@ 
204004bc:	04b4 2040 04b4 2040 04bc 2040 04bc 2040     ..@ ..@ ..@ ..@ 
204004cc:	04c4 2040 04c4 2040 04cc 2040 04cc 2040     ..@ ..@ ..@ ..@ 
204004dc:	04d4 2040 04d4 2040 04dc 2040 04dc 2040     ..@ ..@ ..@ ..@ 
204004ec:	04e4 2040 04e4 2040 04ec 2040 04ec 2040     ..@ ..@ ..@ ..@ 
204004fc:	04f4 2040 04f4 2040 04fc 2040 04fc 2040     ..@ ..@ ..@ ..@ 
2040050c:	0504 2040 0504 2040 050c 2040 050c 2040     ..@ ..@ ..@ ..@ 
2040051c:	0514 2040 0514 2040 051c 2040 051c 2040     ..@ ..@ ..@ ..@ 
2040052c:	0524 2040 0524 2040 052c 2040 052c 2040     $.@ $.@ ,.@ ,.@ 
2040053c:	0534 2040 0534 2040 053c 2040 053c 2040     4.@ 4.@ <.@ <.@ 
2040054c:	0544 2040 0544 2040 054c 2040 054c 2040     D.@ D.@ L.@ L.@ 
2040055c:	0554 2040 0554 2040 055c 2040 055c 2040     T.@ T.@ \.@ \.@ 
2040056c:	0564 2040 0564 2040 056c 2040 056c 2040     d.@ d.@ l.@ l.@ 
2040057c:	0574 2040 0574 2040 057c 2040 057c 2040     t.@ t.@ |.@ |.@ 
2040058c:	0584 2040 0584 2040 058c 2040 058c 2040     ..@ ..@ ..@ ..@ 
2040059c:	0594 2040 0594 2040 059c 2040 059c 2040     ..@ ..@ ..@ ..@ 
204005ac:	05a4 2040 05a4 2040 05ac 2040 05ac 2040     ..@ ..@ ..@ ..@ 
204005bc:	05b4 2040 05b4 2040 05bc 2040 05bc 2040     ..@ ..@ ..@ ..@ 
204005cc:	05c4 2040 05c4 2040 05cc 2040 05cc 2040     ..@ ..@ ..@ ..@ 
204005dc:	05d4 2040 05d4 2040 05dc 2040 05dc 2040     ..@ ..@ ..@ ..@ 
204005ec:	05e4 2040 05e4 2040 05ec 2040 05ec 2040     ..@ ..@ ..@ ..@ 
204005fc:	05f4 2040 05f4 2040 05fc 2040 05fc 2040     ..@ ..@ ..@ ..@ 
2040060c:	0604 2040 0604 2040 060c 2040 060c 2040     ..@ ..@ ..@ ..@ 
2040061c:	0614 2040 0614 2040 061c 2040 061c 2040     ..@ ..@ ..@ ..@ 
2040062c:	0624 2040 0624 2040 062c 2040 062c 2040     $.@ $.@ ,.@ ,.@ 
2040063c:	0634 2040 0634 2040 063c 2040 063c 2040     4.@ 4.@ <.@ <.@ 
2040064c:	0644 2040 0644 2040 064c 2040 064c 2040     D.@ D.@ L.@ L.@ 
2040065c:	0654 2040 0654 2040 065c 2040 065c 2040     T.@ T.@ \.@ \.@ 
2040066c:	0664 2040 0664 2040 066c 2040 066c 2040     d.@ d.@ l.@ l.@ 
2040067c:	0674 2040 0674 2040 067c 2040 067c 2040     t.@ t.@ |.@ |.@ 
2040068c:	0684 2040 0684 2040 068c 2040 068c 2040     ..@ ..@ ..@ ..@ 
2040069c:	0694 2040 0694 2040 069c 2040 069c 2040     ..@ ..@ ..@ ..@ 
204006ac:	06a4 2040 06a4 2040 06ac 2040 06ac 2040     ..@ ..@ ..@ ..@ 
204006bc:	06b4 2040 06b4 2040 06bc 2040 06bc 2040     ..@ ..@ ..@ ..@ 
204006cc:	06c4 2040 06c4 2040 06cc 2040 06cc 2040     ..@ ..@ ..@ ..@ 
204006dc:	06d4 2040 06d4 2040 06dc 2040 06dc 2040     ..@ ..@ ..@ ..@ 
204006ec:	06e4 2040 06e4 2040 06ec 2040 06ec 2040     ..@ ..@ ..@ ..@ 
204006fc:	06f4 2040 06f4 2040 06fc 2040 06fc 2040     ..@ ..@ ..@ ..@ 
2040070c:	0704 2040 0704 2040 070c 2040 070c 2040     ..@ ..@ ..@ ..@ 
2040071c:	0714 2040 0714 2040 071c 2040 071c 2040     ..@ ..@ ..@ ..@ 
2040072c:	0724 2040 0724 2040 072c 2040 072c 2040     $.@ $.@ ,.@ ,.@ 
2040073c:	0734 2040 0734 2040 073c 2040 073c 2040     4.@ 4.@ <.@ <.@ 
2040074c:	0744 2040 0744 2040 074c 2040 074c 2040     D.@ D.@ L.@ L.@ 
2040075c:	0754 2040 0754 2040 075c 2040 075c 2040     T.@ T.@ \.@ \.@ 
2040076c:	0764 2040 0764 2040 076c 2040 076c 2040     d.@ d.@ l.@ l.@ 
2040077c:	0774 2040 0774 2040 077c 2040 077c 2040     t.@ t.@ |.@ |.@ 
2040078c:	0784 2040 0784 2040 078c 2040 078c 2040     ..@ ..@ ..@ ..@ 
2040079c:	0794 2040 0794 2040 079c 2040 079c 2040     ..@ ..@ ..@ ..@ 
204007ac:	07a4 2040 07a4 2040 07ac 2040 07ac 2040     ..@ ..@ ..@ ..@ 
204007bc:	07b4 2040 07b4 2040 07bc 2040 07bc 2040     ..@ ..@ ..@ ..@ 
204007cc:	07c4 2040 07c4 2040 07cc 2040 07cc 2040     ..@ ..@ ..@ ..@ 
204007dc:	07d4 2040 07d4 2040 07dc 2040 07dc 2040     ..@ ..@ ..@ ..@ 
204007ec:	07e4 2040 07e4 2040 07ec 2040 07ec 2040     ..@ ..@ ..@ ..@ 
204007fc:	07f4 2040 07f4 2040 07fc 2040 07fc 2040     ..@ ..@ ..@ ..@ 
2040080c:	0804 2040 0804 2040 080c 2040 080c 2040     ..@ ..@ ..@ ..@ 
2040081c:	0814 2040 0814 2040 081c 2040 081c 2040     ..@ ..@ ..@ ..@ 
2040082c:	0824 2040 0824 2040 082c 2040 082c 2040     $.@ $.@ ,.@ ,.@ 
2040083c:	0834 2040 0834 2040 083c 2040 083c 2040     4.@ 4.@ <.@ <.@ 
2040084c:	0844 2040 0844 2040 084c 2040 084c 2040     D.@ D.@ L.@ L.@ 

2040085c <__malloc_sbrk_base>:
2040085c:	ffff ffff                                   ....

20400860 <__malloc_trim_threshold>:
20400860:	0000 0002                                   ....

20400864 <__global_locale>:
20400864:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	7169 0040 6d29 0040 0000 0000 86e4 0040     iq@.)m@.......@.
20400954:	86e0 0040 8580 0040 8580 0040 8580 0040     ..@...@...@...@.
20400964:	8580 0040 8580 0040 8580 0040 8580 0040     ..@...@...@...@.
20400974:	8580 0040 8580 0040 ffff ffff ffff ffff     ..@...@.........
20400984:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009ac:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
